{"version":3,"sources":["../src/emitter.ts","../src/stat.ts","../src/cell/behavior.ts","../src/math.ts","../src/cell/body.ts","../src/cell/diet.ts","../src/vector.ts","../src/cell/physic.ts","../src/cell/relations.ts","../src/cell/renderer.ts","../src/cell/senses.ts","../src/cell/state-decorators.js","../src/cell/state.ts","../src/cell/index.ts","../src/cell.ts","../src/world.ts","../src/game/entities.ts","../src/game/interaction.ts","../src/game/renderer.ts","../src/game/state.ts","../src/game/ticker.ts","../src/game/index.ts","main.ts"],"names":["exports","buffer","Class","bufferProps","_bufferProps","_isDoubleBuffer","Object","assign","prototype","getState","prev","prop","state","setState","newState","_isBufferDirty","next","flushState","bufferProp","key","constructor","push","defineProperty","get","set","value"],"mappings":";;;;AAAA,MAAA,OAAA,CAAA;AAAA,kBAAA;AAEY,ACFZ,IAAK,IAAL,KDEY,SAAA,GAAY,IAAI,GAAJ,EAAZ;AAsBX,ACxBD,CAAA,UAAK,IAAL,EAAS;ADIL,ACHA,ODGG,ECHH,IDGA,CCHA,CDGmB,QAAnB,EAAqC,UCHrC,IAAA,CAAA,IAAA,qBAAA;ADII,ACHJ,SAAA,GDGQ,CAAC,CCHT,IDGc,MCHd,GDGS,CAAe,ACHxB,CAAA,EDGS,CAAmB,CCH5B,KDGS,CAAL,EAAiC,ECHrC;ADIQ,AGNC,AFGT,QEHS,CFGT,CEHS,GAAK,CFGd,GDGa,CGNM,EAAV,MHMD,CAAe,GAAf,CAAmB,ECH3B,IDGQ,ACHR,CAAA,CDGmC,EAA3B,CCHR,mBAAA;ACHJ,AFOS,AGNI,AFGT,MCJJ,ECCa,CFGT,EEHS,GAAM,AFGf,CCJJ,ICCwB,EAAL,GAAU,CAAhB,IFGT,ECJJ,EDII,CAAA,IAAA,CCJJ,SAAA,CAAA,CAAA,GDII;ACDJ,AFMQ,AGNK,AFET,MCFJ,ECAa,CFET,EEFS,EHMA,CGNM,AFEf,ECFJ,GCAwB,GHMhB,AGNK,CHMU,GAAf,ACJJ,CDIuB,GCJvB,CAAA,CCFJ,CFMQ,EAA2B,ACJ/B,IDII,CENR,AFMwC,OCJpC,CDII,CENR,CAAA,CAAA;AAEA,AFKK,AGNQ,AFET,MCDJ,ECDa,CFET,EEFS,GAAM,AFEf,ICDJ,CAAA,ACDwB,GAAX,YFET,IAAA,CAAA,IAAA,oBAAA;ACCA,AFKA,AGPS,AFET,QEFS,CHOJ,ACLL,EEFS,GAAM,AFEf,CDKA,CEJY,CFIS,EGPD,CDEpB,EACsB,ACHb,GHOT,EAAkC,CCLlC,IAAA,CAAA,IAAA,cAAA;ACCY,AERhB,AJaQ,AGPK,AFET,MGRJ,EDMa,CFET,GEFS,CDEG,CFKF,ACLV,CGRJ,ADMoB,EDEJ,GAAA,ACFS,GCNzB,CFQgB,ACFH,EHOa,ECLtB,GDK2B,CIb/B,AHQI,CGRJ,AHQI,IAAA,GDKsB,CAAe,GAAf,CAAmB,MAAnB,ACLtB,CDKI;AEJA,AERR,AJcQ,AGRK,AFEZ,AKTD,CLAA,EAAK,GGCL,AEDA,EHOa,GAAA,CHQD,ACfP,CDeQ,CGRM,CCNnB,AEDA,IHOwB,AFPf,EAAJ,CDeG,AGRK,AFPb,CKAA,CNewB,OIdxB,AEDA,CAAA,OFCA,SAAA,CAAA,CAAA;AFUI,AETJ,ACDA,ALeY,AGPZ,AFEA,AKTA,MFAA,ACDA,ACCA,ELSA,CCAS,ACFT,GDEI,AITJ,CAAA,CJSmB,CGVnB,AFQA,AFEA,CGTA,ADOuB,EFER,CEFf,EAAqC,CFErC,EEFA,EAAiD,KERjD,CDCA,OCDA,CDCA,QCDA,CDCA,ACDA,CDCA,ACDA,CDCA;AFUQ,AEPR,ACDA,ALaS,AGPL,AG0BA,MF/BJ,ACDA,EFMQ,MDEM,AEPd,ACDA,CDCA,ACDA,CCiCiB,CADb,CH1Bc,CG4BD,CAFb,EAEsB,EH5BlB,CDEiB,ICFI,CDEC,ACF1B,EAA4B,EDEP,CAAU,kBAAV,CAA6B,GAA7B,CAAjB;AAEA,AEeJ,ACrBA,ALWI,AGRA,AG0BS,aJvBJ,AFKA,AMkBI,CAAA,CH1BF,CCmBC,ACrBA,CC4BC,CAAA,CJvBE,AFKA,CIUf,ACrBA,AFGgB,ECoBJ,ACtBU,GHKlB,CCHO,CCkBX,AJVI,CGRA,CDGqB,AEiBG,EJZD,MELvB,EAA+B,CFK/B,EAAkC;AEJ9B,AEeI,ACrBA,AGPhB,ARkBY,AGRP,AG0BY,KH5Bb,CKRJ,KLUW,ECkBK,ACrBA,AC6BC,CAAA,CH1BF,CDGC,CEeA,ACrBA,AC6BC,CAAA,CEpCjB,CJ4BgB,ACrBA,AGPhB,CRkBqB,GIUL,ACrBA,CFGS,IHQb,EGRG,GDGmB,ECHE,CAAzB,EAA4B,GDGL,OAAtB,EAA4B;AACxB,AEeA,ACzBJ,AENZ,ACMI,AReK,AGRD,AG2BA,MCxCR,MDwCY,CFTI,ACzBJ,CFOE,CIbd,CCOgB,CLMR,CCkBQ,ACzBJ,ACkCM,CAAN,CElCR,CNUiB,AEeL,ACzBI,CGCM,EFiCF,CDlCA,CDyBR,ECzBI,EAAR,ACkCkB,CCxC9B,ADwCwB,CAAhB,EAA0B,GJxBlB,CAAsB,CKhBtC,KLgBgB,IKhBhB,CAAA,CAAA;ALiBa,AEgBL,ACvBA,AETR,ACMgB,ACPhB,ATsBK,AGRG,AG2BI,MCxCZ,AEDA,OLiCa,AI1BG,CLOF,CMdd,ANcQ,EIbR,ACMgB,CJ0BR,AEQU,CFRC,CI1BH,EFkCM,CGzCtB,CDOgB,EJ0BR,CEQU,CAAU,CFRC,GKjC7B,CLiCQ,AGhCR,AEDA,QFCA,WAAA,CAAA,CAAA,GDwCyD,IAAI,EAA3C,CAAN;AJvBH,AEgBD,ACtBJ,AEPJ,ACDY,ACDZ,AEHAA,AXAA,AGeK,AG2BI,MCrCT,AEFA,EEHQC,INYI,CDsBC,AI9BD,CGJZ,ENYI,AEPJ,CAAA,AILiB,CPkCT,ACtBoC,AIT5C,CL+BmB,AK/BnB,CDCY,GJ8BJ,AI9Bc,CHQlB,EDsBsB,ACtBgC,AMZhCA,CPkClB,AI9BkB,GAAJ,EAAV,AGJK,CAAgBC,KAAhB,EAAuB;AToBhC,AEeH,ACtBG,AEJJ,ACDI,ACCJ,AERA,AXDJ,AGiBI,AG0BC,QN3CL,EWCUC,CRgBC,EDGE,AGPA,ELbb,COUgB,AEAA,ANOA,CDGR,CAAU,AGPV,ALbR,CKamB,CEJf,AEAA,CNQO,CDGH,AGPA,AEFQ,AEDU,ANOJ,CEJC,CMZCD,CXDxB,EKaQ,AEJJ,AJQuB,EEJE,AEFG,CIVFE,GRgBR,EEJd,IFI+B,GQhBf,GAAqBF,ARgBA,GAAvB,CAAX,EQhBwCE,ERgBE,GAAjD,OQhByC,IAAsB,EAA/D;AToBC,AEdD,ACOC,AEJW,ACAZ,ACAY,ANQf,AGZG,QFCI,GEDG,ECIK,AEAA,AHJZ,CEIU,AFJA,CFCV,AEDA,ECIY,AEAA,AHJS,CFCV,AEDX,ECIY,ACAZ,ACAY,AHJkB,EEIR,EDAV,AEAA;APaZ,AEfI,ACQJ,AELY,ACAR,ACNJ,AEFAF,ARMJ,AGFQ,QDSA,AFPR,EQNUG,GJQM,ACAH,ACNT,CJWA,AFPJ,CCDe,AEDA,CDSc,CFP7B,CIEgB,AENZ,CHEe,CFCC,AIGZ,CNYa,AKZL,ACAK,ACNT,ENIZ,CKEQ,CJHO,AIGU,AGRrB,ALIW,CJgBX,AEfsB,AGGV,ADJU,CGFR,AHEH,CJgBiB,ASpBJ,CLIC,CAAd,CEIP,AFJA,CKJJ,CPKI,CKHU,MAAA,CAAO,CAAP,EAAU,QAAV,EACT,QADS,CACA,EADA,EAET,QAFS,CAEA,CAFA,EAEG,GAFH,CAAd;APmBI,AEfH,ACQG,AEVI,ACKP,ACDG,ACXR,APoBA,AGZK,MIRL,MLiBY,CAAC,AEVD,CLiBE,CQxBd,GLiBkB,CEVN,GFUC,AEVkB,CFUR,CEVX,GLiBe,EGPd,CAAiB,CKjB9B,CRwBgC,IAAL,AGPd,CHOwB,AGP7B,EAA+B,AKjBvC,QRwB2B,CAAqB,AQxBhD,CAAA,CAAA,GRwB2B,CAAnB;AAEA,AEfJ,ACOQ,AELJ,ACCJ,ACDA,ACTJ,ACCIC,ARgBJ,AGXI,MINJ,ENOQ,GKEG,AERAC,ALKA,CJgBC,AEfR,CIGS,CDDC,CHFF,AEDR,CINJ,AJMgB,CJgBC,AKbT,AGTR,ACCI,CNac,AILd,AERcL,ALKA,CEId,CDDgB,AEAwB,CPahC,AMZa,CNYH,AGRA,ACRA,CAAN,CKLQM,CLKC,EDQP,CHQN,AGRgB,CHQC,AKbT,ADHS,CAAb,EAAZ,CKLA,CTqBQ,AIhBmC,CJgBvC,ASrB2B,CJQf,CLaiB,AKbV,IAAnB,WFK4C,MAAM,EAAxC,CAAN;AHSA,AEfJ,ACOC,AELD,ACCA,ACDA,ACRJ,APgBJ,AGXQ,cCGM,AEAA,CLFC,AIIH,AFLG,CJgBC,AOZJ,ACRI,GDOF,AHHK,CFCC,AIIH,AEVb,CDUQ,CFFJ,AGPkB,GNKX,AGEU,ADHV,CJgBH,AEfc,AEDA,CAAX,CJgBa,CMXhB,ACFE,AHHe,CFCrB,AIImB,AFLZ,CGMH,AHNJ,GCGiB,CEAX,CDEF,ICEA,CFJa,ACGb,CDHoB,GEIf,CFJT,ACGS,GCHT,ODGI,CAAgB,MAAhB,CADA,IAEA,KAAK,SAAL,CAAe,MAAf,CAHJ;ANaQ,AEfX,ACQG,AENH,ACKA,ACAG,ACbQ,ACARC,ARiBR,AGZK,MHYC,OOjBU,CLcF,GKdE,ECAG,CDAH,CRqBK,ECJE,COjBP,APiBS,CDIT,ACJO,CDIG,CGPC,AFGC,EDIZ,ACJO,CDIO,CCJE,CEHA,EFGT,CDIP,ACJhB,CEH2B,CAAU,MAA7B;AHQK,AEfT,ACQI,AELJ,ACKA,ACDI,ACbA,ACAI,ARkBZ,AGZI,QFAI,AGGA,CJSR,EITI,ADHO,CFAP,CFaQ,AEbC,CCQC,AELH,AEIG,CDCC,CFRX,CAAa,CFAb,AONcC,CTqBC,CEfO,CIQtB,EAAuB,ACDJ,AHPnB,EKNqB,ARkBzB,AGZ0D,CHYhC,CQlBd,CLMiD,CDQhC,CIDC,CAAtB,CNKR,EAAwC,CGZpC,CDQgC,CCR2C,KDQvE;AHQQ,AEfR,ACQA,AELA,ACKA,ACDA,ACZJ,APiBA,AGZI,WHYG,ECZE,CCQC,AIDA,CFJC,ACKA,AFRA,GFAP,CAAW,CGGC,CLYC,AQpBH,CFaI,AFRA,CFAd,CKOgB,AHPT,CJeC,AKZD,ADFH,CJcc,AEfA,ACQA,AELA,AJSA,GITlB,ELYQ,AEfR,ACQuB,AGAhB,CAAiB,ALIrB,AGXQ,CGMc,EAAzB,ANK2B,AGXb,EEOe,EHAX,CAAc,CGAzB,CAAP,CFPsB,CHWc,CAAxC,CEJsB,ACPJ,CDOd,AFIuC,AGXZ,MAAD,IAAY,OAAO,CAA/B,CAAV,CADG,EAEH,OAAO,GAAG,QAAQ,GAAR,CAAa,MAAD,IAAY,OAAO,CAA/B,CAAV,CAFG,CAAP;AJgBK,AEdL,ACOA,AQxBR,ANmBK,ACKA,ACAG,ACbA,ACDI,ARkBJ,AGTH,MOnBL,MTiBY,ECOE,CKbC,CDaC,CEdC,CEVjB,EJwBQ,ACbY,ENME,CAAd,AOPe,ARkBA,COjBR,CNMU,AMNA,ACDAC,ERkBjB,CAAoB,COjBb,ACDQ,ENcQ,AMdAC,CDCC,CPiBC,CU5BjC,ERwBoC,AMdb,ARkBK,COjBS,APiBA,CQlBzB,CRkBgB,CEJG,CAAU,AKbT,APiBS,CU5BzC,AHW0C,ACDAT,MNcX,CAAkB,AKbjB,CAAkB,GCDtC,CEVZ,CAAA,AFUuD,CNcN,AQxBjD,AV4BwD,COjBN,KPiBT,CEJQ,CAAK,AKbJ,CAAK,APiBU,CAArC,CAApB,UEJuB,AKbC,CLaxB,AKbA;ARqBC,AEdG,ACOJ,AQrBR,ANgBI,ACMA,ACDI,ACbH,ACDWO,ARkBX,AGRD,ASjBJ,MFAA,AEAA,ERgBQ,CLMA,EKNJ,ADCO,ASjBX,CRgBY,AQhBZ,EVqBc,AGCA,CNMC,COPC,AHJZ,CFHa,AGEb,ADCa,EJWE,AW5BnB,ANgByB,ADCN,CFHP,AIQR,CGfiBC,CHeK,CFLH,CDIC,ACJP,CJWQ,AOPjB,AEdQ,CFcU,AHJA,GKVG,CFcC,AHJA,CJWX,AOPX,AHJS,CJWe,COPC,AHJ7B,CKV8BC,CEPlC,APiBgD,EJWX,AGPA,AIAA,CAA7B,CEdqB,CAAb,CTqBG,CAAJ,CW5Bf,CX4B4C,OGPpC,IQrBR,CAAA,CAAA;ACJA,AZiCY,AEdH,ACOD,AQrBR,ANgBQ,ACMA,ACDA,ACZJ,ACFS,ACTb,AT4BI,AGTI,ASdJ,MDRJ,ADKA,ADFA,KT4BW,EIVE,CFKC,CQrBd,ALsBe,AFLA,CQtBf,AL0BgB,AMjBC,CbwBA,CKZT,CAAW,CCMC,AFLA,ASdhB,CVkBiB,CELb,AEKA,AMjBqB,CNiBN,ACZA,EHOE,CGPrB,APiBsB,CDEd,AMNG,AIxBf,ANmBe,CJWa,AMNA,AEbK,AJQL,ECDpB,CMhBR,ALsBe,CM3Bf,AN2BgC,ACDA,ANKrB,CDEC,ACFR,ES5BJ,ANmBmC,CDIC,CCJR,CEKb,AFLuB,COjBtC,ALsBQ,ACDe,AHJK,CQtB5B,CRsByC,CGIC,AHJd,CDIP,ACJN,CAAP,EDIsC,CQrB9C,CAAA,CAAA,AJqB0C,GAAA,CJArB,CS1BrB,CAAA,AL0BgD,AGvBhD,CEHA,AT0BwD,AIAhD,AGvBR,YPuBQ;ASxBR,AZgCS,AEdJ,ACQG,AQtBR,ANgBK,ACMA,ACAG,ACbA,AETR,AT0BC,AGTI,ASdY,IHHI,ECArB,ECJA,KCOiB,EDPjB,AT0Be,AQtBf,CJsBgB,AGtBhB,CGGiB,CDPF,ECOE,CVmBT,COtBR,EGGiB,CVmBQ,AIAjB,CK1BO,EL0Ba,CJApB,EQtBR,ADAA,CAAA,CEJA,AL0BiC,KAAzB,CItBR,QAAA,CAAA,CAAA;AX6BK,AEbD,ACOI,AQtBR,ANiBI,ACMA,ACAI,ACdA,ACFI,ACQR,ATYJ,AGTI,ASnBQ,MFCZ,ETeQ,AGEA,CJUR,GGTY,CDIC,AUvBD,CXgBR,AIQU,AEdA,APkBd,CAAsB,CIVlB,AEMY,AGPA,CRDF,ACON,AQtBR,CRsBkB,CELF,AIVGF,ALWf,CEKA,AIRA,ATYJ,AGToB,CSnBR,CPwBc,AIPA,ATWW,CQpBzB,CNeJ,AUvBe,CNwBf,EHLJ,CDIwB,AKbA,AKVD,CTmBW,ESnBf,EFCvB,AHSiC,APkBe,AY5BpC,CZ4BZ,CELmC,CFKc,COlBrB,CAAU,CJSmB,EOlBzD,EPkB6D,CDIrD,CKboB,CAAkB,GJSW,CAAW,COlBpE,APkByD,COlBzD,CAAA,AHS8C,AJSyB,CAAd,CAArD,EAAqE,GIT3B,CAAK,YAAvB,CAApB;ARqBJ,AEdI,ACOA,AQtBR,ANiBQ,ACMA,ACAA,ACdA,ACFC,ACQO,ATYZ,AGTI,AShBA,MFFR,EV2BQ,CDEC,AShC0B,INyBtB,AGCA,AIRG,CFNF,AJSA,CJWV,AEdW,AGEA,CEMC,CPMK,AGPb,AOPQ,CPOE,CGCC,ACAX,CIvBR,ANiBoB,AEMA,AGRJ,CHQR,ANIa,CCZN,ACOP,AFKJ,AGTkB,CDIC,AICA,CAAf,AGRQ,ATYQ,CCZT,AGEA,ACMP,AEdiB,CNMN,AGEO,AEMA,CHLC,CDInB,CGCqB,AEdA,CLaC,CDPN,CKQhB,AHLc,CAAW,CCDzB,ACM0B,ACAA,CAA1B,CLRW,ACOX,AQtBR,CTe8B,AKQO,CHLC,GFHvB,AIQP,AFLc,CITG,CNMW,AIQO,AEdA,AJSA,CFH5B,ASff,AJuBqC,GAA7B,CLRiC,AMNO,EJS1B,EITqB,AJSS,CFHN,AMNO,ENM7C,CMNiB,CGTzB,CAAA,AHS0D,CGT1D,APkBsB,CAAd,SITiB,CAAjB;ARqBA,AEdH,ACQG,AQvBR,ANiBK,ACMO,ACAJ,ACbA,AEXI,AIRZ,AboCQ,AGTA,ASfJ,MFHJ,AGTA,EDYQ,KHJI,CV8BE,AIXA,ASfV,CVoBW,AKbA,AMnBf,AboCe,CKJC,ACAA,AMpBY,EHJhB,CPwBJ,AQvBR,CJuBQ,ANIY,AGTA,CMnBA,CV8BE,CMNC,CEbC,CEXA,AT4BT,AGTU,CHSC,CDEC,CU9BP,EFWL,AEXH,ANmBQ,CJWE,AQnBU,AMnBhC,AboCe,AGTgB,CJWC,AMNhB,ALIR,CKJyB,EKvBjC,CHU+B,AJQK,GJWd,AMNN,AQhChB,AV2BoB,CJWoB,AMN5B,AEb8B,CJQD,CEKC,CKvB1C,IX6BwC,CctCxC,AV2BoB,CU3BpB,CNmBoD,AMnBpD,AV2BkD,IJWV,CAAK,AW7B7C,AHUyD,CGVzD,CAAA,APkBoB,CAAZ,CIRO,CAAP,YRmBc,CAAd;AACA,AEdJ,ACQC,AQvBL,ANiBI,ACMY,ACAR,ACbH,ACHGG,ACOA,AIvBR,AEAA,AfoCK,AGRG,AShBA,MFHR,AGTA,AEAA,EdwBQ,AGEA,KDEK,AShBA,Cb0BC,AEdV,CAAW,AYxBf,AEAA,CX0BI,AEMY,CIvBhB,ANiBiB,AIVAC,ALYA,GFJb,CEIiB,AShBb,CXYY,AGEhB,AEMI,AMpBc,CPoBC,ACAA,AOhCvB,AEAA,CX0B8B,CIVtB,AIJA,Cb0BkB,Aa1BA,CPoBV,AGhBW,ALYA,CAAnB,CGIA,CHJsB,CGIC,COhC/B,AEAA,AHYQ,Cb0ByB,AW7BjC,AGTA,AEAA,CZ4BkC,EJUR,CAAW,CON7B,AHJ8B,CAA9B,CJUkB,CAAe,AW7BzC,APmByC,GAAjC,EJUsC,AIVA,IJUL,CAAU,AW7BnD,CAAA,CAAA,CX6B0B,CAAlB;AACA,AEdA,ACSJ,AQxBJ,ANiBQ,ACMK,ACAL,ACZJ,ACJQ,ACQR,AIxBJ,ACDA,ACIA,AfkCI,AGTQ,AShBP,MFHL,AGTA,ACDA,ACIA,IfkCU,COjBC,CEIC,CRAC,ACSA,AEPA,CLYC,CUdV,AIxBJ,CHSA,AJuBgB,CCZZ,ACJaC,ACQI,AKzBrB,AX6BiB,CFJT,AGEA,AWvBR,CdqBmB,ACSf,AEPe,AGNI,AQjBvB,EhBmCqB,AGLa,AFIb,AGTA,CGIb,CLRA,AKQe,CAAf,CHJiB,CFJC,AKQA,CFNlB,GAAsB,CLYC,AStBnB,AKhBZ,AV4B+B,COnB/B,APmBY,CFJc,AazB1B,CNiBkC,ALYA,CCF1B,AEM2B,ELRT,CAAK,AKQL,ANKY,AGTA,CKZ1B,AKhBZ,CHSA,CJuByC,AQjCzC,CX6B0C,CJUrB,AIVT,CJUgC,CIVC,CFJN,ADalB,CAAjB,CMLI,AOhCR,AV4BY,CJUS,AW7BrB,AGTA,CdsCQ,AW7BR,AGTA,AV4BkD,CFJN,ASf5C,CIVA,CbyB0B,AazB1B,CbyBQ,AazBR;AfyCQ,AEfH,ACSG,AQvBR,ANgBK,ACMI,ACAD,ACZA,AEIA,AIvBR,ACAA,ACGI,ACLJ,AhBsCI,AGTY,ASfZ,IFHA,EGTJ,ACAA,AEFA,GNWS,CAAT,CV2BW,AYxBA,Eb0BE,CGNC,AKbA,CEIC,AOzBf,CViCgB,AO/BhB,AEIgB,ACNhB,AhBsCgB,CDER,Aa1BJ,Cb0Bc,Ca1Ba,CHWX,AMpBhB,Cb6BiB,AYhCrB,AdoCW,CMLH,AQ/BR,ACKgB,Af+BM,AGTA,CJWd,AOPe,CPOC,AOPA,ACZA,CEIT,CAAW,EVelB,AGNoB,Aa7BxB,AZwBwB,CIRC,AEId,CHQP,AGRsB,AMlBW,Af+BX,CGTR,CGIU,AO/BhC,AV2BgC,CIRR,AEIT,CFJmB,AEI1B,ANI0B,CAAF,EAAK,CIRb,APiBb,AGTqB,CDKxB,AIDA,CO/BR,AV2BsB,CIRmB,AJQzB,CHS0B,MOjBM,EMnBhD,AboCI,CapCJ,CNmBQ,AMnBR;AduCK,AEND,ACCI,AQxBR,ANiBI,ACMI,ACDA,ACZA,ACJI,ACQP,AIrBL,ACII,ACHY,ACAZ,AhBiCH,AGTY,ASfL,MFHF,AGPN,ITwBU,GWvBM,AHSH,CFHU,AHUT,CNaF,ACCG,AEPX,ACMW,CCDC,AQxBA,AEHA,CZsBO,AIXN,AOZD,CFDhB,CAAA,CX+BoB,AGDZ,AS1BJ,ACHY,ACAZ,CNMkC,AEG9B,CEJA,AEHA,AJOc,CJGC,CMPb,ACLM,ACEN,Cd4BK,AIFP,ACZiB,ACJAJ,CNkBC,AQxBH,EEGf,CVqBO,AQxB+B,AFMvB,AIHM,CVqBC,AKdA,CGV9B,AFM+BC,GNkBhB,AKdU,CAAU,AKP3B,CJGe,CQVA,CTcE,ACJaI,CNkBC,AKdA,CLc/B,AYzBA,ENOe,AQVf,ERUI,CMP2C,EPW9B,AObrB,AED+C,CTcH,ACJAb,CMPS,AELrD,EAEiD,ITcE,GAA9B,CAAjB,ACJI,EAAiD;ATyBzD,AEPI,ACCH,AQvBL,ANgBQ,ACMH,ACDG,ACZA,ACJQ,ACSZ,AInBA,ACCY,ACHA,ACAA,ACThB,AjBkCA,AGDS,ASfJ,MFFL,AOhBA,EjBkCA,EUlBA,CAAA,CDcY,CKlBI,ACHA,ACAA,AhByBhB,CCIc,AGNA,AGPA,CRoBC,AUfX,CHOY,AOzBA,AIZhB,AjBkCA,CSJuB,AKlBP,AEHA,ACThB,EFSgB,CT4BR,AO1BJ,ACCY,AEHA,CjBoCZ,ASxBiBS,ARarB,CSJI,AIjBI,AEJQ,ChBoCW,CEPH,AGNA,AKFY,AKlBpB,AEHA,ERYA,EDIY,AQhBZ,Cd6Ba,AGNA,ASrBzB,CLU0BE,CKRP,EZyBC,AGNA,AGPS,CNaC,AGNA,GGPN,CAAU,CCJCH,EPiBf,AGNA,CHMkB,AGNA,CIXZ,CAAd,CDIY,CAAkB,GNaJ,AGNA,IGPI,GNaJ,AGNA,CHMK,AGNA,GGPD,CAAK,MHO3B,CAAhB,KGPoB,CAApB,CNagB,CAAhB;AFQA,AENA,ACpCR,AQyBI,ANII,AC/BR,ACqCQ,ACZA,ACLQ,ACSR,AInBQ,ACNZ,ACII,ACNI,AC0BR,AdIC,ASdD,aHWS,AInBG,ACNZ,AEFQ,CjB0CE,AKbA,CHOC,AMbA,CDYC,AWRA,CJnBA,CHiBZ,ADEI,AKzBJ,CLyBe,CRSC,AY5BJ,AGRJ,CZ6BS,AIXAK,AMhBD,CfwCE,AUfd,CHQA,AGRe,AO3BgB,AJgBnB,CXoBL,AY5BC,AIkBZ,CTRY,AMhBZ,AEFQ,CZ6Bc,AGNA,AEIlB,AQAoC,ClBejB,AENA,CQTC,CDTCF,CJWR,CLaC,AKbS,CLaC,CQnBjB,AEIP,CRSA,CGPA,EGN6B,CCLCH,CTwBhB,CAAkB,ESxBX,CAAb,ITwBwB,CQnBhC,MRmBgC,CAAK,mBAAvB,CAAd;AACA,AENH,ACrCL,AQcY,ANgBJ,AChCR,ACsCK,ACZA,ACLQ,ACSR,AIjBG,ACRI,ACKR,ACNQ,ACyBI,AdcZ,ASxBI,QVjBR,AGFA,AF2CQ,KO3BI,AGHC,ACRD,AEDA,ACyBI,ClBgBF,AKbA,ADWV,CDzCJ,AGFA,AOmBe,CAAC,CTwBF,CDzCd,AGFA,AQaQ,CDMW,EFHP,AGHS,AEHH,AEmBF,EbGO,CMhBA,AIXX,AGwBI,ALVQ,CCNC,CdgCC,AG3C1B,CE8B2B,AU3BD,CJWC,GLhB3B,AWIY,CZ4BoB,AU3BpB,AGwBI,ALVD,Cb0BkB,AchCR,ADMjB,CIfyB,CZ4BN,AY5BO,CjByCR,AKbU,AY5BxB,CjByCyB,EW7BV,CX6BD,AchCL,CdgCoB,AchCV,ETmBY,GLaG,AW7BvB,CAAiB,CGHnB,CAAb,CdgCiC,AKbd,CLawB,AW7B5B,CAAX,ANgBwC,CAAzB,CLaD,AKblB,CLaA;AACA,AELJ,ASxBQ,ANgBJ,AEhCR,AC2BI,ACNK,ACUL,AIlBC,ACRO,ACKJ,ACDA,ACVI,Ad4CJ,ASxBH,SJjB8B,GPsC1B,CSxBG,AIXA,AEIC,ACVD,ClB8CE,AKbA,AWtBA,CRiBC,AJgBA,CYjCC,CLMJ,EOjBA,CPiBO,AKNL,AZiCM,CJEC,AQlBjB,AJgBW,CWtCH,ACKU,AEXD,CV4BM,ASlBnB,ACVI,CPiBW,CIXC,CEIE,AbkCA,CAAX,CYjCD,CXsBe,AU3BD,EfwCG,AW7BR,AP2BQ,CWtCP,CCKS,CDLrB,CV2BuB,CYvB3B,AbkC4B,CYjC5B,AZiCuB,CO3BZ,CAAa,GP2BU,CJErB,AW7BF,ANgBU,ADWrB,CJEoC,AW7BhC,ANgBgC,EAAE,GLazB,AKb4B,CLazC,KKboC,EAAa,GAAG,MAAhB,EAAf,CAArB;ALeA,AENA,ASxBI,ANiBJ,AElCR,AC4BQ,AEIJ,AIjBA,ACHI,ACDA,ACDH,ACVO,Ad4CP,ASvBD,QNrBJ,IOeY,CdgCC,AW9BD,ANiBC,AUtBA,AGZD,ChByCE,AMbA,AQjBA,CTXd,CSWgB,ChBoCR,CAAU,AO/ClB,AMqBkB,CRaV,AalCI,CbkCQ,ASnBhB,ACHI,CCDM,CLMF,AGFgB,AIfP,ClB+Cb,AenCe,ACDA,AEXD,ALqBlB,Cb0BoB,AENA,AGPhB,AalCI,CPiBY,ANiBC,AGNA,AKPM,Gb0BvB,AenCoB,Cb6BC,ASxBD,AKNd,CTXd,AC4B8B,GNaN,CAAU,AMbT,AQjBS,CRiBC,AOhBZ,CAAa,CVsB5B,CGNiB,CAAc,COhBhB,ACDf,Cd8BgB,ASxBI,AILa,Cb6BC,Ga7BnB,CAAf,CPgBiB,CGXD,AHWwB,CNaN,ASxBA,IAAlB,CAAZ,CHW2C,CNab,CAAK,CMbtB,CAAjB,gBNagB,CAAhB;AFOH,AENG,ASxBI,ANiBP,AGNG,ACNAM,ACUJ,AIjBI,AKjBR,AJcQ,ACDA,ACAJ,ACXQ,Ad+CR,AS1BI,MMvBR,EfiDQ,CapCC,INMG,AILC,AGZD,ChByCE,AMbA,AMbA,AEJA,AHUA,CIVV,EAAmB,AboCnB,EejDJ,CfiDiB,CO9BL,AFKS,AKPA,CIfT,CLqB2B,CFJhB,AILf,CDGiB,AEJA,AEXD,ALqBhB,EXoBmB,Aa7BA,CJKA,AHWC,EQjBE,AEXlB,EhByCoB,AY1BP,ACHO,CPgBC,EW9BjC,EjB2C2B,AMbC,CNaU,AMbA,CGXX,AGFN,EAAb,CNaoB,CNae,AiB3C3C,AJc2B,CAAiB,CPgBC,CGXtB,AKNE,Cd8Ba,ASxBE,CILb,ACDnB,CDCyC,Eb6BE,ASxB5B,CAAX,AHWwC,COhBzB,CAAnB,CIdR,CX8BQ,AW9BR,CAAA,IjB2C6D,CAAvB,CAAX,CAAnB;AFxCR,AEyCQ,ASxBI,ANkBR,AGNI,ACPI,ACWR,AIjBI,AKlBR,AJcQ,ACDA,ACAA,ACXJ,Ad+CI,ASzBA,MMxBR,MFaY,AboCA,CO9BA,ANkBC,ASnBA,ACJA,AEDA,ACXT,ALsBS,CXmBC,Ac9BA,CRkBC,AEIH,CDXI,CAAC,AKNT,AV+BS,CapCC,CNMN,AEKO,CCNC,CIhBhB,CPiBiB,AFKCF,AUxBtB,CJcQ,AXmCA,CCZgB,ASnBA,AELA,AEXT,Cd+CU,ASzBjB,CFLiB,AILC,CPiBC,CNYC,Ae9BpB,CZwBqB,AanCzB,ALsByB,CIXC,CHKN,AELO,Ed8BE,CWnBC,CFLT,CFKb,CJaR,ASnBoB,CNahB,ACP8B,AKNP,AKlB/B,CjB2C4B,AGNS,ASnBb,CAAhB,CELgB,Cd8BkB,ASxBrB,AKNqB,AHWlC,CFL4B,CEKQ,CET9B,CIfd,AHawB,CLMH,AKNb,CLMI,EIJO,Eb4BX,SiB3CR,CAAA,CAAA,IJec,CAAuB,IAAvB,CAA4B,IAA5B,CADY,GAEZ,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAFN;AfZR,AE0CQ,ASxBI,ANkBJ,AGNH,ACPW,ACWR,AIjBA,AKlBR,AJgBK,ACFG,ACDI,ACgBJ,AdoBI,ASzBA,AO5BZ,MDIA,ACJA,EpBKA,KWkBY,AGDC,AIWA,ChBcC,AGNA,CLpCd,AUkCe,CIjBP,AEJQ,AIlBhB,CHiBiB,CjBZjB,AWkBY,AEKM,CHWV,AIjBW,AKlBnB,AD6BQ,AdoBW,CAAP,ASzBQ,CFLA,AEKF,CKKI,CLLC,CAAL,CXmBO,ASxBD,ANkBC,AWvBjB,CAAkB,Cd6BlB,AYzBA,AEJA,AEemB,CDhBf,CDCiB,AHUA,CbvB7B,AKoC8B,AWvBtB,EAAwB,AIlBhC,CTuBwB,AOUF,CbQG,AaRS,CbQC,AcrCnC,ANwBmC,EGV3B,CEec,CFfiB,AEeA,ALLV,CFLT,AEKoB,AO5BxC,CTuBkC,CNkBT,CAAkB,AcrC3C,AD6BsB,CAAd,CPVY,AKLZ,CLKI,CEKmC,GRaJ,AQbd,CAAjB,IMxBZ,CAAA,CdqC2C,AcrC3C,CdqCgD,CezChD,CAAA,CAAA,KfyCyB,CAAjB;AHQA,ASzBI,ANkBJ,AGLJ,ACRS,ACWR,AIhBG,AKnBR,AJiBI,ACFI,ACFI,ACgBP,AdoBI,ASzBG,AO5BZ,MDIA,ACJA,OlBgDa,ASzBD,AGAC,AEJA,CXsBC,CUpBF,CIjBZ,CjB4CiB,ASzBL,ASvBZ,CZoCkB,AKRA,CGTC,CLIA,AGAX,ADKY,CXoBC,AYzBA,CZyBb,EAAgB,ASzBD,ANkBC,AGLpB,AKRc,CGTV,CRiBsB,ENYF,AYzBP,CTkBQ,AWtBA,AHSA,EFLN,CQnBvB,CdqCwB,AezCxB,CfyCkC,CSlBb,ADKT,CCLc,CEJlB,Cd6BA,ASzBW,CAAa,AKJO,Cd6BC,AiB5CxC,CdqCwB,AezCxB,CfyC0C,CHOlC,ASzBW,ETyB0B,ASzBP,INkBI,AcrC1C,CRmB2C,AQnB3C,CAAA,IRmBmB,AGAX,CHAI,ANkB8B,AezC1C,CfyC+C,ASlBA,AMvB/C,CNuBQ,AMvBR,SfyCwB,CAAhB;AHQI,ASzBA,ANkBJ,AGLA,AEIJ,AIjBI,AKnBR,AJiBQ,ACFI,ACFH,ACZL,AdiDI,AS1BI,AO5BZ,MDIA,ACJA,EFKQ,IdiDI,CO/BA,ADiBC,AIjBA,AIlBT,AdiDS,CCbC,AUpBA,CPeC,AYpCf,CfyCgB,AUpBA,AGhBH,CCDb,CjB4CkB,AEMA,AS1BA,CFLN,AKJO,CXsBL,AGLM,AMbZ,ACFM,CLmBV,AIjBiB,CHAA,CDiBkB,AUxCvC,CZoCe,AEI4B,CLClB,AGLA,AOfA,ACFb,Cd6Bc,ASzBD,AKJC,EFIL,AV+Bb,AS1BoB,CLQb,AOfP,Cb2BsB,AGPA,ADaA,EIlBE,AKRA,CMxBhC,AHeY,CXsBJ,CMlBiB,AGAJ,CAAK,ADKE,AO5B5B,CAAA,ClBgD8B,CMZS,CKRC,CMxBxC,CRmBqB,CAAe,AHa5B,CMbA,ADKoC,CXoBlB,CYzBU,CZyBxB,ASzBS,CEKT,CFL8B,AGAlC,EKnBR,CAAA,CAAA,CRmB+C,KAA1B,CAAT;AT0BA,ASzBA,ANkBJ,AGLH,ACRO,ACaR,AIlBI,AKlBR,AJgBQ,ACFC,ACDD,ACbA,AdiDI,ASzBA,AO7BZ,MDKA,ACLA,IDKA,CAAA,CFaY,CNKA,AGAC,CTkBC,AUpBA,CGhBC,AELf,CLqBgB,AFQA,CJDCA,ACaH,AOvBG,AboCA,CFNC,AQPC,EClBP,AGAJ,AIlBY,CJkBC,ACFP,EJEQ,CTyBV,Ae9BA,CAAa,CFGC,AGhBlB,ChB2CmB,ASzBD,AP+Bd,ASzBe,CCNN,ECFb,AXiCsB,CCbC,AIbnB,AQVA,AGlBZ,CHkBQ,ERU0B,AQVA,AJWA,CRYC,ASlBd,AV+Bc,CU/BT,CHAA,AEMC,CXmBf,AWnB0B,CJD1B,AW5BZ,ChBsD8B,CAAW,ECbjC,CMlBc,EAAV,AP+BkC,ASzBnB,CTyBG,ASzBiB,ETyBE,GSzBtB,AO7B3B,CNuBQ,AMvBR,ChBsDsD,AgBtDtD,CNuB6C,AV+Bf,CU/BtB,AV+BI,CSzB6C,IAA7C,EAAmD;AXoBnD,AStBJ,ANeA,AGzCR,AC4BY,AC1BZ,AIqBQ,AKPJ,AJMI,ACHH,ACDO,ACbP,AdiDI,ASzBO,AO5BhB,CVCA,WKoBY,CJIC,AGHA,ACDA,CVmBC,CMfN,CQTQ,CjB+BC,Ae9BA,CNQC,AFEAL,AMNA,EDCV,CAAa,AGLT,CNQJ,AQVJ,AFEkB,CFId,AFOe,CXmBX,AiB9BJ,CjB8BiB,AOpBA,AMNA,EVmBE,AIbf,AICI,CCNK,AGLT,AJWgB,EXmBhB,CiBhCR,EAGI,CdsB0B,AQZlB,CCNK,AKJX,CLIgB,KTkBlB,IctBA,ILIA,CKJ8B,CLIG,CKPrC,CLOI,CKJgC;AjB8B5B,ASrBJ,ANcA,AG1CR,AEOI,AIiBI,AKPQ,AJMJ,ACFR,ACFQ,ACbR,AdkDI,AS1BK,AO3Bb,QZHA,AUMQ,GRCJ,CADC,CIkBQ,AKPG,ADXZ,CPsBU,ANcA,AapCA,CVNd,AJwDe,AgBrDV,GZHL,CG4BmB,AQXH,ADXZ,AEHJ,CNqBQ,AVgCY,CFPC,ASrBb,AGJa,AIlBF,CCWH,AHIM,AIlBjB,CfuCkB,EHOX,ASrBa,CTqBC,Ac5BtB,ERrBJ,AMwBqB,AKPL,AHIgB,CLOxB,CP4BA,CFPI,AQ3CP,IIkBgB,CAAK,ITkBc,CKnCpC,CAAA,CLmCmB,GAAuB,ASlBtC,EAA8B,GAA9B,QTkBmD,GAAnD,CKnCJ,WAAA,QAAA;AR2CK,ASrBD,ANeA,AIdI,ACpBR,AIeI,AKJA,AJGC,ACFD,ACFC,ACbD,AdkDH,AS1BI,AO3BL,UAAM,CVMN,CADC,AQFO,CPsBC,ANeA,ASnBA,AKJA,AHCA,IPQI,GKLT,CTmBA,ASnBa,AKJb,ACjBJ,CFGkB,CPsBd,AFCe,ASvBX,CbqCY,AcvBA,CVSCC,ESvBE,CJkBN,AKJO,CVSL,AORf,CAAsB,CPQCC,ACrB1B,ELmC4B,CWtBzB,CFGa,CLKE,AKLG,CIlBW,CTuBCI,ASvBA,CCcV,ADdpB,EbqCgB,AKlCpB,AQHqC,CbqCC,AIdnB,ACpBnB,ELkCwC,AIdhC,EUTY,CduBuB,AcvBN,CVSOb,AKLxC,EAAgC,CKJhB,CLIhB,CTmBkC,AcvBK,EduBQ,GAAG,CId9C,CUTY,CVSqC,AUTrD,ETXJ,CLkCsC,EAAlB,CAAhB,IKlCJ,QAAA;AR0CI,AStBH,ANeA,AIdWO,AClBZ,AIaI,AKJA,AJIA,ACHA,ACDA,ACdI,AdmDR,AS1BI,AO3BJ,QhBqDI,EgBrDE,CVON,CADC,CRwCQ,AY1BA,AKJA,AHCA,CDGC,CEJC,AbqCX,AS1BW,CIXC,Cf8BR,CAAU,AgB5CA,AdmDH,AgBrDG,ENoBV,CLKaC,AKLA,AKJb,AFAa,AJWb,CXmBA,Aa1Bc,AGlBA,ChB4CC,CiB9BC,CVSR,AWzBS,EFEP,CJkBG,AKJO,AJIA,AEJZ,ACdY,CTuBC,AQTA,Cf8BrB,CQxCH,AMWG,Cd6BwB,Ac7BA,EPQEC,CKLb,AGJL,AGhBZ,CNoBsB,AEHlB,ACDA,EAA8B,CRST,AUTD,CjB8BpB,AOrBQ,CClBZ,AKakB,CLblB,AKasC,GGlBG,CCcrB,CAAiB,AJIM,GGlBG,CCc1B,CJIF,AGlBJ,CCc6B,AJIvC,AGlBI,CJkBJ,EAAsC,EAAtC,CKJgB,CAAhB,GTTJ,OAAA,QAAA;ARwCI,ASrBJ,ANeA,AIfY,AChBZ,AIWI,AKJA,AJIA,ACHH,ACDO,ACdH,AdmDD,AS1BH,AO3BD,UAAM,CfwCF,AK/BJ,CADC,AN6CO,CFPC,AY1BA,AKJA,CJIC,CJKF,CTqBJ,Ce9BS,AbqCA,CerCT,CChBW,CNoBX,CLKaA,AKLA,AKJA,EfqCb,CWjCgB,CIJC,AfqCA,CK5BT,AWzBU,ENoBL,ACAO,ENKE,CCjBzB,AKYmB,CAAQ,CIJP,AJIS,ENKCI,AKLd,AGJT,CHIc,ACAW,AEJD,CGhBjB,EXyBW,CAAd,AUTK,AChBmB,CVSpC,ASO+B,AJIO,AKpBtC,CVSA,AOOQ,GEAS,EAAoB,CLIjC,CKJmC,CLIH,ACAR,EAAqB,CDA7C,ECAgD,IIJf,CJIT,CIJX,AJIG,CIJhB,AJIA,CLXJ,YAAA,QAAA;ARuCI,AStBA,ANeA,AIfK,AC/BQ,AI2Bb,AKLA,AJKA,ACHI,ACFH,ACbD,AdkDI,ASzBR,AO3BA,YVP0B,AUOlB,CNoBC,AKLA,AJKA,AGlBA,CbqCC,CHOC,AStBA,ASxBX,CAAY,EP2BE,AO3BA,CDeV,AJKW,AGlBX,AdkDW,CAAP,CYnCiB,CGFP,ADbA,ChB4Cd,AQrDsB,AI2BtB,ACAA,AFOJ,AO3BY,CTwBQ,ADhCvB,CMyBW,AHUqB,AO3BR,CDeC,CJKC,ACHY,AEf/B,CbqCoB,CMfC,EAAE,AEG3B,AO3BY,EfuCiB,AQZc,AO3B3C,CTwBI,AIJA,CILkB,CJKU,CVmBR,CAAU,IcxBhB,CTvBrB,ASuBoC,EdwBT,CAAkB,EcxBJ,CTtBZ,CAAA,EAAT,ASsBgB,CdwBS,AcxBC,IAAV,CAAe,EdwBN,CAAK,AK9CrB,CAAT,ASsBgB,CAAf,CAAd,SdwBoB,CAApB;AHQH,AStBA,ANeG,ASlBA,AKNA,AJKI,ACHJ,ACFH,ACbA,AdkDI,ASzBD,AO1BJ,UAAM,EfsCE,CSlBC,AKNA,AHEA,CHUC,GEPG,CL5BI,AI6Bb,AMpBU,CNoBC,AEJA,GFIX,ADMc,CRYC,ASlBA,CKNf,EHEA,CFIA,AKNmB,CdwBC,AQZA,EGVE,AIhB1B,CDc2B,ANYT,CAAU,EEPpB,AFOsB,CEPC,ACHA,CXsB3B,CQZ6B,EEPzB,IFOoB,EMZD,ANYc,GAAG,IMZrB,CAAoB,AHEjB,CAAwB,AHUtB,EAAV,CMZK,ANYnB,EMZ6C,AHEM,IAAL,CAAU,KAAlC,CAAtB,EAAgE;Ad+BpE,AStBA,ANeI,AIhBI,AKFJ,AKPI,AJKH,ACHG,ACDR,ACbA,AdkDI,AS1BA,AO1BJ,QFEI,EhB4CD,AkB9CG,EHeE,CZwBC,CDaC,AS1BA,CCLC,CV+BC,CYpCC,AEdb,AdkDU,CarCV,CZwBe,AIhBAN,AKFX,AV+BW,CarCO,ACbT,AdkDH,AS1BM,CO1BC,EXuBT,CJgBJ,CWvBI,AZoCa,CYpCC,AHUA,CO1BC,CfuCC,CDapB,AS1BY,CMZU,ANYA,AO1BT,CJgBU,AIhBA,CP0BC,CRaC,CWvBrB,CHUuB,CGVC,EGFE,ACdjB,CfuCb,EAAiC,AQbX,EAAa,AO1BA,CJgBC,CIhBxC,CP0B0C,CGVlC,CGFkB,CHEmB,GHUnB,EAAV,CAAZ;AXqBA,AStBJ,ANeQ,AIhBH,AKFJ,AKTgD,AJOhD,ACHW,ACDR,ACbA,AdkDA,AS1BA,AO1BJ,SDYuB,CAAnB,ACZE,EhBoDE,CFNC,CWpBC,CIXC,ACbA,GhB4CP,CAAW,AkB9CA,CFEC,CdkDC,ECbE,AWvBA,AHUgB,CIXf,CCbT,ALwBP,CXoBA,Ac/ByC,AZqCvB,EgBpDE,ClB8CC,Ae/BA,CCbC,AdkDT,CclDb,AdkDuB,CCbC,EHOxB,CGPe,ADaY,CCbC,AYxBZ,AbqCH,CarCgB,AbqC7B,ICbe,AevCJ,CfuCP,AevC8B,CHelC,aGfW,CAAf;AlB+CI,AStBJ,ANeK,ASjBL,AKRC,AJMD,ACJY,ACDX,ACbA,AdmDG,AS1BA,AO3BJ,UAAM,EhBqDE,CFPC,AWnBA,IXmBL,Aa1BS,AKpBA,ClB8CC,CWnBC,ET0BE,AgBrDA,ClB8Cb,AEOA,CFPe,AYxBH,ACFhB,ACJmB,CZqCC,CWjCkB,AFOlC,GXmBA,CWnBqB,AO3BR,ClB8CS,IWnBI,CXmBC,CkB9ClB,CAAS,ElB8ClB,GWnBA,CO3BS,CP2B2B,CO3BV,SAAA,OAAA,CAAO,EAAP,CAAU,KAAV,EAAiB,MAAjB,CAAjB,EAA2C;AlB+CvD,ASrBD,ANeI,AItD2B,AKoC3B,AKzBJ,AJuBI,ACPyC,ACG7C,ACbA,AdkDQ,AS1BA,AO3BJ,KXdJ,GUWI,ADMA,CDaC,GNSG,ANeA,AUpBA,CIvBR,AHgBQ,CCGR,CNSA,AGHW,CKzBF,AFmBS,CNSD,AILJ,CFOC,CKxBd,CJmBgB,ADKA,AO3BA,CfwCC,AQbH,CKxBC,AdkDG,CS1BC,CAAL,CCLH,CAAW,CV+BC,CWjCnB,AKpBoB,ChBqDhB,AS1BiB,CRajB,AUpBkB,GVoBG,CexCC,EP2BE,CO3BR,CAAU,CP2B1B,GCLG,ETkBP,ASlBA,ETkBsC,CexClB,CAAR;AlBgDR,AStBJ,ANeI,AIjBX,AKDI,AKzBG,AJuBI,ACJH,ACAD,ACbA,AdkDC,AS1BG,AO7BgD,CXlB5D,IWkBiB,CAAb,MlBiDgB,Ee/BN,CNSC,AQ5BA,ADMA,EhB4CH,CWpBM,CXoBa,Aa3BZ,CJKC,AQ5BA,ADMA,EDaE,CZwBC,CUpBX,CJKG,AOtBA,CPsBW,AEEA,CIXC,CEnBZ,CAAc,CDMC,CAAC,CbqCC,AarCxB,CPsBO,CAAmB,AQ5B1B,AFmBc,CAAa,AJWA,EFFpB,CAAP,EMTc,CAAd,CJWkC,ERanB,CAAsB,CQbjC,URaW,CAAX;AHQJ,AStBH,ANeI,ASjBL,AK1BC,AJuBI,ACHD,ACDA,ACbH,AdmDG,AS3BI,AO1BR,WAAO,ChBqDC,EFPE,Ac9BA,ACDA,EbsCE,AgBrDZ,ChBqDQ,CS3BM,CCJF,AMtBG,EhBqDG,EFPd,CAAgB,AkB9CpB,CHeqB,EbsCG,CYrCA,AZqCN,AS3BM,CXoBC,Ce/BC,EbsCG,CFPzB,Ac9ByB,AHUA,CIXR,CAAU,CbsCE,CAA7B,EAAiC,AS3BF,CAAX,IAAgB,GGVhB,EAApB,AHUyC,EIXxB,EAAjB,AJW6C,CAAzB,IAA8B,KAAK,MAAM,CAAzC,IAA8C,KAAK,IAAI,CAAvE;AXqBP,ASrBD,ANeI,AIlBRV,AKAQ,AKXJ,AJSI,ACHA,ACDA,ACbJ,AdkDQ,AS1BA,AO3BR,QXsBIkB,ASnBA,CCQC,EAAE,ACXA,CTyBC,CNeC,AWvBA,ACDA,CHMC,CHGV,AQdK,CLWO,ADKA,CFFO,AQdnB,AJSa,AKpBb,CXsBJ,CJkBQ,Ac7B2B,AFKhB,CZwBC,AarChB,AEHgB,CXsBC,AKAP,CHGV,AP4BkB,CYpCd,AEdY,CPsBgB,AKRZ,CCDhB,CZwBA,ASlBkB,AMtBtB,ChBqDuB,AS1BA,ERaE,AWvBA,ACDA,AbqCjB,CCbJ,AIlBsBA,AKAtB,EELA,CDGA,CAA0B,ACHA,AHUA,GIX1B,AJWmB,CAAW,CIXC,CRMlB,CAAoBV,GMFjC,CCHA,CDGsC,AFOnB,CGVoB,AHUA,GJL1B,CMF8B,CNECW,AIKzB,GJLN,EAAoC,AIKA,IEPjD,CFOI,EAAoD;AX7ChE,AS4CQ,ANeA,AIlBJ,AKAI,AKXA,AJSA,ACHI,ACDA,ACbJ,AdkDC,AS1BO,AO1BZ,SAAK,CXqBCjB,GEGG,ANeA,AevCA,CNqBC,AKXA,CJSC,AGjBA,CbqCP,CevCS,CTwBT,AFHUM,AWrBd,CTwBe,ANeA,AWvBA,ACDA,CCbC,AEFA,GP0BG,CRaC,AevCA,CNqBC,AKXA,CRcjB,AOtBO,CPsBY,ANeR,AYxBP,AJWI,CRaY,AIlBAY,AQNA,AJWA,EFFpB,AGHsB,AKXA,ADRA,CbqCX,AUpBX,AGjBA,CPsBwB,ANeA,AUpBA,AKnB5B,EHe8B,AJWlB,AO1BkB,GTwB1B,ASxBJ,EXqBA,AWrBmC,CfuCpB,CAAX,AYxBiC,EFIjC,AEJoB,CAAhB,CFIiC,CDEpB,AKXA,ELWjB,AKXA,EJS0C,WAA1C;AbvCR,AS6CK,ANgBG,AInBJ,AKCI,AKZA,AJSA,ACLuC,ACCtC,ACbJ,AdmDG,AS3BK,AO1BL,QlBrBR,CcmCQ,CPOEjB,GJmBG,ASlBA,CMtBC,ClBrBd,AawCe,AXkCA,Ce3CC,EjB/BhB,AkBqBkB,CNsBC,AKZX,CAAY,Cd8BZ,ADaA,CCbc,EInBED,AUXhB,CLYA,AMtBU,ClBrBlB,AiB+B0B,GLYG,CTkBrB,AInBsBE,CMFtB,AKnBU,CLmBc,AKnBP,CAAP,EDUiB,ACVP,ENsBpB,EAA+B,ACH/B,CKnBU,CDUV,AJSiC,AKnBjC,CXqBgB,GAAqBF,CMFC,KNEKE,EMF3C,UNEqC,IAAsB,EAA/D;AEKA,ANeC,AInBD,AKCQ,AKXJ,AJQH,ACFA,ACFA,ACND,Ad4CC,AS3BI,AO1BD,UXqBEQ,ESZD,CCEI,CCXC,CTyBF,CGHI,ELDG,AUVX,ACXU,CDWC,GVUGO,CUVd,CAAgB,CVUE,AWrBR,EXqBd,CUVI,GCXU,CAAO,CAAP,CNsBgB,CMtBN,MNsBM,AMtBhB,CAAV,MNsBQ,IAA0B,CAAC,OAAO,OAAtC,EAA+C;AHInD,ANhDR,AI4CI,AKCY,AKXR,AJSI,ACFA,ACFR,ACPI,Ad6CJ,AS3BI,AO3BA,UXqBEH,EMDU,AGXR,CCEC,CCXC,CTyBC,AEEA,EJNG,AMDN,AGXK,Ad6CA,CatCF,CFIsB,CJKjB,CFJCG,AIMb,AO3Ba,CNsBC,AVgClB,Ce3CI,AHOuB,CPGN,ALiCK,CO7Bf,CAAW,AOhBlB,AETkB,CJkBd,CFII,AIbY,CJaC,AEJY,EPGrC,EWrBiB,CTyBN,ASzBmB,CNsBlB,CHGR,OSzB0B,OAAA,CAAO,EAAP,CAAU,CAAV,EAAa,CAAb,CAAb,CAAb;AT0BH,ANjDL,AS8CgB,AKXX,AJSG,ACFA,ACFA,ACPI,Ad6CJ,AS3BH,AO1BG,QfzBR,ID8EY,CWlCC,AKnBA,CJiBC,ACFA,CZxCd,ED8EiB,CC9EjB,AU4CQ,GAAa,GKnBb,CHeiB,AGfA,ChBqDb,EC9EZ,EU4CqB,AEJS,CbsCC,CAAvB,AgBrDiB,EHeA,AbsCS,CYpCC,ACFA,EFId,CAAO,ACFpB,CIjBA,GLmBa,CAAY,IEJR,CFIJ,CAAb,AEJA;ANWJ,AFLAhB,AKCS,AKVT,AJSI,ACHA,ACDA,ACRC,Ad6CG,AShFZ,AO2BK,aTyBQ,AMTA,CFIC,ACHA,EPGEkB,AMAA,CITF,CRcV,CMTe,AbqCA,CO5BiB,AFLhC,AMAU,CNAO,CMAC,GEJd,CbqCkB,EAAP,CYpCU,ACDA,AbqCA,EWjCf,GCHoB,AZoCf,EWjCiB,AXiCA,CarC5B,AbqCW,CAAP,CarC2B,CFI/B,ECHqB,CAAc,QAAd,CAAuB;ALS5C,AFLAV,AKEI,AKXJ,AJSA,ACHI,ACDA,ACPJ,Ad4CC,ASjFT,AO6BI,QP7BJ,CO6BS,IDUI,ADFA,CTWCQ,AMAA,CJKC,AKRA,AH7Cf,CEgDgB,CNDK,CSVb,ALrCR,CCkDmB,AKXX,AFKW,CNSC,CILN,AGXO,AERjB,CFQI,CJaI,ADlDZ,CCkDwB,CHGT,CAAW,AILA,GDEd,AGNA,CFIJ,GCJ4C,CLSrC,CAAoB,KAApB,CAAP;AACH,AFLGP,AKEC,AKXD,AJSA,ACHI,ACDH,ACPD,Ad6CA,AgBrDJ,SAAK,IXiBY,AUPR,ADFA,CHWC,AXkCA,AgBrDV,CJgBW,ODGO,AGXd,Ad6Cc,Ee3Cd,CAAiB,ADFA,Ed6CE,CWlCC,CGXpB,ICEA,Gf2Cc,GAAiB,EWlCjB,CAAoB,EXkClC,GWlCuC,KAAzB,CAAd;AJOJ,AFNII,AKGA,AKZH,AJUG,ACP4C,ACE/C,ACPG,Ad6CA,AgBrDJ,SJayB,AIbpB,CJaD,GDOK,CKpBT,CNsBW,AV+BA,EO5BD,EILK,GXiCG,CU/Bd,ACFA,CXiCO,CAAU,EWjCE,GGZG,Ad6CA,CAAL,CWjCjB,EAAoC,AXiCV,Cc7CC,Id6CpB,Ec7CP,Ad6CiC,KAAK,CAAL,GAAS,KAAnC,CAAP;AO3BA,AFVa,AKOhB,AKXD,AJSQ,ACHJ,ACDJ,ACRC,Ad6CA,AgBrDD,KXeA,IWfK,IJiBI,ELQE,ASzBX,CLoBY,IJKI,CKRZ,CAAc,CCDC,ENSR,CAAW,AILA,CCHC,EDGX,AEJZ,CFI0B,ACHtB,CCD6B,CDCL,EDGhB,CAAJ,CJKG,CILsB,CJK7B,OKRqC,GAAb,CAAiB,KAAK,GAAtB,CAAxB,EAAoD;ALSvD,AGvDL,AKyCI,AJSY,ACHJ,ACDJ,ACPJ,Ad6CA,AgBrDC,WFQG,AERY,EhBqDP,CatCC,CGfT,CHeW,EGfW,CJgBR,AZqCf,EAAuB,CgBrDtB,CHeS,EDA8C,CDIlC,EEJE,IFIZ,AEJR,CFIyB,IAAjB;AJOZ,AFPAV,AKlDJ,AK0CI,AJSS,ACHD,ACDJ,ACPA,Ad6CA,AgBrDP,QNhCD,GLkDWgB,EMDC,AGTC,CDOC,CH/Cd,AVqFe,GUrFf,CCmDmB,ACHA,CZqCC,Ec7CZ,Cd6CO,CAAS,CKnCpB,AQHqB,ACPA,CTUCd,IKlD1B,AG+C8B,ACPtB,Ad6CO,EAAiB,EatCP,CRGrB,AQH+B,ERGEW,GAAjC,CLmCI,CKnCkC,KQHjB,EAAjB;ANWJ,AQdA,AJQY,ACN4C,ACEpD,ACPH,Ad6CA,AgBpDL,QDUQ,CHEA,AIZR,KHcc,EEJV,ECVJ,CDUgB,ECVhB,IHcwC,CFId,CEJlB,EFIQ,CAAc,IAAd;AJOZ,AFPII,AUPA,AJQK,ACHR,ACAG,ACPJ,Ad6CA,AgBrDA,OhBqDG,EAAE,EgBrDE,CFQF,CDOI,AbsCA,CKpCC,CUPC,ACVA,GhBqDG,CatCC,AbsCZ,Ce3Ca,Cf2CC,CgBrDV,CAAY,EHef,AbsCiB,Ce3CV,CAAY,EFKE,CbsCC,CAAvB,EAAH,CgBrD8B,CDU1B,Af2CwC,EatCxC,EAA+B,EGfE,gBAAP,CAAwB,kBAAxB,EAA4C,OAA5C,CAAvB,CAAP;AT0BA,AFRQ,AUPP,AJQI,ACFL,ACDQ,ACPJ,Ad6CA,AgBrDP,OTyBM,MAAH,AKTS,AERA,EPiBU,AP4BR,EYrCX,EPCe,AODQ,ACDR,CbsCC,CYrChB,AERI,Ad6CO,EO5BX,AKTmC,CPCfX,ASTA,CPiBiB,AKRjC,CZoCkB,CAAX,Cc7CP,CTSW,AQFP,CREA,CLoCmB,EYpCf,GZoCoB,CAAL,GYrCQ,EAE/B,AZmCkC,CAAlC,OYnCQ,CAFuB,KAG/B,EAHJ,EAGM;ALOF,AFRC,AUPL,AJSI,ACAA,ACJI,ACPP,Ad6CA,AgBpDL,QDSQ,CVGkC,AWZ1C,ITwBa,AINA,CCAC,EGTV,CAAa,AJST,CAAU,CKlBlB,CTwBQ,CAAa,AMVA,CELjB,ACTJ,CTwBQ,CAAgB,AQfO,AHSP,IDAhB,AEJoB,CDIC,CLMrB,AMVI,ENUoB,EMVE,CDIV,CAAY,ILM5B,CMViC,KDIjB,CAAuB,ECJb,EDIV,ACJZ,CDIJ;ALOH,AQfG,AJSH,ACCG,ACLC,ACNL,Ad6CA,AgBrDA,QhBqDI,EAAE,AgBrDA,CFQF,ECCK,Cf4CC,CAAN,CYlCQ,CZkCC,Ee5CT,CAAY,Cf4CC,AgBrDA,ChBqDb,EAAJ,CYlCI,CZkC+B,Ee5C/B,AHUoB,AInBA,GDSG,EHUvB,GGVA,ACTa,CAAgB,MAAhB,CACZ,MADY,CACL,CADK,EAEZ,KAFY,CAEN,GAFM,EAGZ,MAHY,CAGL,OAHK,EAIZ,GAJY,CAIP,KAAD,IAA8B;ATsBvC,AFTIY,AUPH,AJUO,ACAJ,ACJA,ACPA,Ad6CA,AgBjDI,STqBH,GFTGC,ASRA,EEJM,CTqBd,AINmB,AXkCR,AgBjDK,CJeJ,ACJA,CNUS,AFTjB,ASRS,CEJC,CXYC,CMGP,AEJJ,AGXiB,CHWJ,CFIsB,AXkCrB,EAAP,CO5BX,AP4BqB,AgBjDP,ETqBoB,AKN9B,CEXI,CDOJ,AGX2B,CJeL,AZkCA,CAAL,Cc7CO,Ed6CE,CYlC1B,AZkCO,AgBjD0B,EFIJ,Ad6CA,GgBjDF,CAAY,ChBiDL,CAAL,CgBjDF,CAAvB,ChBiDkC,CAA/B,CAAP,Cc7CA,EAA2C;APkB3C,AFTI,AUNR,AJSI,ACAA,ACJH,ACPO,Ad6CP,AgBjDO,QDMJ,KReK,AQfT,CCNc,EDML,AJSG,ACAA,CPHCT,GEST,AOjBY,AEJI,CTqBH,AFTT,CMGU,EGXV,CPiBJ,AFTiBS,AOGjB,AEXiB,CPiBC,AINlB,GKfyB,CXYrB,EESJ,EAA0B,ASrBV,CAAZ,OTqBJ,aOjBI;APkBP,AFTO,AUNJ,AJSI,ACAJ,AClER,ACuDY,Ad8CR,AgBjDQ,QhBiDJ,EAAE,EgBjDM,EhBiDF,Ce5CC,Af4CP,CYnCQ,CPHCV,AMGA,AGXA,Ad8CA,CgBjDK,EDKF,Cf4CC,AgBjDL,CJcR,AZmCA,AgBjDI,CJcW,CDAX,AXmCR,AgBjDwB,CFGhB,CCEG,Af4CwB,Ce5CZ,CHSC,AEXA,CFWpB,EPHI,AOGmB,CGTvB,ADFI,ETQsB,EOGE,CAA5B,CPHI;AEWR,AFVK,AUNJ,AJSW,ACAR,ACnER,ACwDY,Ad8CJ,AgBjDQ,QHrDhB,OAAA,AbsGe,CYnCC,ECnEhB,AGqDsB,GLcD,CCAb,AZmCc,AgBjDI,CJcH,CZmCR,CWnCC,AXmCS,CWnCC,ACAA,CAAlB,ACnER,AGqDsB,CAAU,CJcH,CZmCC,CAAL,CYnCO,CAAxB,CDAQ,AXmCkB,CAAnB,EWnCsB,AXmCA,CWnCC,IXmCI,CWnCC,AXmCN,GAAS,CWnCR,AXmCvB,AgBjDoC,CLcH,AXmCxC,EgBjD8C,MLctC,gBKd4D,KAAK,MAAM,GAAG,GAApE,CAAN;ATsBZ,AQhBA,AJMI,ACGA,AEXC,Ad8CJ,AgBjDQ,QDKL,KAAJ,CAAU,EHSE,GGTZ,EAAuB,IHSnB;ALQJ,AFrBsC,AUKlC,AJSH,ACAG,AEVA,Ad8CJ,AgBjDQ,KXDR,QUKS,ADDA,Ad8CA,EAAE,AgBjDI,CJaH,AIbK,GDIb,ADDA,Ad8CW,AgBjDA,CDIC,Af6CP,CgBjDa,CJalB,AZoCc,Cc9CC,CEHJ,CDIX,ACJI,ChBiDc,CAAb,Ce7Ce,ADDA,Cd8CxB,EAAwC,Ee7CpC,ADDA;APmBJ,AFXH,AUNI,AJUO,ACDP,AEVG,Ad8CA,AgBjDC,CXdT,IWCqB,CAAjB,ETkCI,KOlBK,EPkBT,AP4BW,GO5BA,GOlBP,CHWsB,AGXR,Ad8CA,EAAP,CAAU,Cc9CjB,CHWI,AGXe,EHWuB,CXmCpB,Cc9CtB,Ad8CiB,Ec9CQ,Cd8CC,CAAnB,EAAsB,KAAK,CAAL,GAAS,CAA/B,CAAP;AO3BA,AQhBJ,AJSI,ACAJ,AEXQ,Ad8CP,AgBhDD,SDIK,ECJE,EDIP,ERgBW,AQhBM,AHSN,AIbA,CLaC,CCAZ,CEXc,AEFP,CJagB,AIbQ,CToBf,EIPE,CGXC,CPkBR,CAAU,AKPrB,CDAI,CCAmC,AIbhC,CAAP,CJcI,GLMA,KKNQ,OAD2B,EAEnC,QAAQ,CAF2B,KAGnC,EAHJ,EAGM;ALKL,AQhBG,AJSI,ACGJ,AEhByB,AdiD7B,AgBjDH,SFAO,AdiDC,EAAE,GYjCG,CGZC,Af6CA,EWpCE,GITG,Af6CA,CAAX,EAAc,CWpCX,ACGY,CGZT,CAAW,Cf6CC,EYjCE,CGZd,CAAgB,Cf6CC,CAAvB,Ee7CM,AHYS,AZiCpB,Ce7CI,AHY4B,CZiCc,SYjC1B,CAAuB,IAAvB,CAAhB;ALMJ,AQjBC,AJSW,ACIR,AEfH,Ad+CG,QO5BA,IAAJ,GAAQ,AP4BG,CYhCC,KDJK,CXoCC,EAAP,CWpCC,ACIR,AZgCiB,CWpCC,ECIE,IZgCH,CYhCjB,CDJQ,CXoCS,CAAI,CWpCQ,CAAC,GXoCJ,CAAL,CWpCc,EXoCL,CAAb,CWpCa,AXoCvB,CWpCiC,CXoCN,OWpC1B,AXoC0B,GAAA,CAAI,KAAK,CAAL,GAAS,CAAb,CAA3B,CAAP;AO3BA,AQhBJ,AJQY,ACIR,AEdI,Ad8CP,Ye5CI,CDFS,EPkBH,CKJC,ILII,IAAL,CAAU,EKJjB,ELIA,CKJsB,KAAtB;ALKH,AQhBG,AJSI,ACGJ,AEdA,Ad+CJ,Yc/CQ,CAAC,ECEE,Af6CH,CYjCI,CDHC,CGXC,ECEE,GJSR,ECGJ,CGZO,CAAY,ADFnB,EAAqB,GCEd,EAAP;ARiBJ,AQhBC,AJSO,ACGJ,AEdI,Ad+CJ,QO7BA,IAAJ,CAAS,EP6BE,CYjCC,CDHC,CJOb,CKJI,CLIU,AKJE,GDHR,ACGW,CAAf,EAAkB,AZiCA,GYjCG,CAArB,CZiCuB,CYjCC,AZiCA,KAAK,CYjC7B,EAAgC,CAAhC,CZiCkC,CYjCC,AZiCA,IAAnC,GYjCmC,GAAnC;ALKA,AQfJ,AJQY,ACGR,AEdC,Ad+CJ,We5CG,EReK,GKJG,CLIR,CAAU,GIPG,CJOb,GAAiB,AIPT,ACGR,CDHkB,IJOlB,CIPQ,GAAkB,CAAC,CAAnB;AJQX,AQfG,AJQQ,ACGR,AEbA,AdtER,eewEe,CHWC,IGXI,CJQC,CCGb,GDHQ,CIRD,AJQW,CIRC,GDFG,CCEf,EAAP,CJQQ,CGVmB,EHUE,IGV7B,CHUQ;AJSZ,AQhBC,AJQW,ACGX,AEZG,AdtEG,OAAA,COuFH,GPvFG,CcsEC,CAAC,CPiBT,APvFc,GOuFJ,COjBI,GdtEO,EAAP,CAAU,CAAV,CcsEV,CdtEuB,CcsEH,AdtEV,CAAP;AOwFH,AQfJ,AJQQ,AChFZ,AEsEY,AdzEZ,QAAA,Ie2ES,GReM,AP1Ff,EWmFiB,AGVA,CdzEjB,EO0FoB,COjBR,EHUA,CJOG,AP1Ff,CO0FyB,MAAjB;AACH,AQfG,AJQI,ACjFZ,AEuES,QFvET,OGyEe,AHzEf,EDiFiB,CCjFjB,EGyEoB,GJQR,GIRG,CAAY,GHzE3B,EGyEe,EAAP;ARgBJ,AQfC,AJQW,AGVX,QPiBG,MAAJ,CAAW,KAAX,CIPiB,CJOD,GIPJ,CAAU,KAAV,GAAkB,CAAC,CAAnB;AJQR,AQdJ,AJOY,AGxFhB,WCiFQ,ERcK,IAAL,CAAU,GIPG,GJOb,CIPQ,CAAU,CJOC,KAAnB,EIPQ,GAAqB,IAArB;AJQX,AQdG,AJOQ,AGzFhB,QAAA,OCkFe,ADlFf,GAAA,ECkFoB,CJOC,IAAL,CIPD,AJOW,CIPC,CDlF3B,EHyFgB,CIPD,EAAP;ARgBJ,AQfC,AJOW,eJQJ;AACJ,AQdJ,AJOQ,eJOG,EIPE,GJOG,GIPR,CJOG,CAAU,QAAV,EAAP;AACH,AQdD,AJOQ,iBAAK,MAAL;AJSR,AQfA,AJOY,YJQP,SIRY,IAAL,CAAU,KAAV,GAAkB,CAAlB;AJSR,AQdJ,AJMY,eJQD,KAAK,CIRC,EIND,CRcL,CAAU,AIRT,CAAU,IJQX,EAAP,EIRQ,GAAqB,IAArB;AJSX,AQdG,AJMQ,eIND,KAAK,CJMC,IAAL,CAAU,EINX,CAAc,CJMb,eIND,EAAP;ARgBJ,AQfC,AJMW;AJUZ,AQdA,AJMQ,YINA,KJMK,GINb,EAAwB,CJMhB;AJSR,AQdI,AJMI,eING,EJME,GING,QAAL,AJMH,CINiB,OAAd,CAAsB,QAAtB,CAAP;ARgBJ,AQfC,AJMW,gBJSA,IAAZ,CITiB,CJS2B,GIThC,CAAU,KAAV,GJS4C,AIT1B,CJS9B,AITY,EJS6C;AACrD,AQdJ,AJKY,aJSH,IAAL,CAAU,CQdF,EJKK,IJSb,AITQ,CJSU,AITA,IJSlB,EAAwB,EIThB,GAAqB,IJS7B,CITQ;AJUX,AQdG,AJKQ,eILD,KAAK,QAAL,CAAc,YAAd,EAAP;ARgBJ,AQfC,AJMO,QJSJ,MAAJ,EAAyB;AACrB,AQdJ,AJKQ,eJSG,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,CAAP;AACH,AQdD,AJ5BI;AJ4CJ,AQfA,AJKC,WJUM,MAAP,EAA4B;AACxB,AQdJ,AJKQ,YJSA,IITY,GILR,EJKJ,EAA6B,OJSX,IAAlB,IAA0B,KAAK,QAAL,CAAc,MAAd,CAA9B,EAAqD;AACjD,AQdJ,AJKA,aILK,AJKA,KAAL,CJSW,EITE,GJST,AQdJ,CAAiB,KJKJ,OILb,AJKa,CILiB,AJKV,IAAP,CILsB,AJKV,KAAZ,CILb,AJKA;AJUC,AQdJ,AJKG,aAAK,IAAL,CAAU,UAAV;AJWA,AQdJ,AJIC,eJUU,KAAK,YAAL,CAAkB,MAAlB,IAA4B,CAAnC;AACH,AQdD,AJ1GJ;AJ0HI,AQfA,AJ3GJ,QAAA,OAAA,EJ0HiB,CI1HjB,KJ0HI,EAAkC,QI1HtC;AJ2HQ,AQdJ,aAAM,CRcI,aAAa,KAAK,IAAL,CAAU,QAAV,CAAmB,MAAnB,CAAnB;AAEA,AQfA,YReI,GQfG,KAAK,QAAL,CAAc,CReC,IAAtB,EAA4B,OQfrB,EAAP;ARgBI,AQfP,mBRec,aAAa,KAAK,aAAL,CAAmB,MAAnB,CAApB;AACH,AQdL,sBAAkB,IAAlB,EAA4B;ARgBxB,AQfA,eReO,AQfA,KAAK,KReZ,GQfO,CAAc,iBAAd,CAAgC,IAAhC,CAAP;ARgBH,AQfA;ARiBD,AQhIJ;ARiII,AQjIJ,QAAA,OAAA,GAAA,IAAA;ARkII;AAEA,qBAAc;AACV,eAAO,KAAK,MAAL,CAAY,cAAZ,EAAP;AACH;AAED,uBAAmB,GAAnB,EAA6B;AACzB,eAAO,KAAK,MAAL,CAAY,kBAAZ,CAA+B,GAA/B,CAAP;AACH;AAED,WAAO,MAAP,EAAmB;AACf,eAAO,KAAK,MAAL,CAAY,MAAZ,CAAmB,MAAnB,CAAP;AACH;AAED,eAAW,MAAX,EAAuB;AACnB,eAAO,KAAK,MAAL,CAAY,UAAZ,CAAuB,MAAvB,CAAP;AACH;AAED,kBAAc,MAAd,EAA0B;AACtB,eAAO,KAAK,MAAL,CAAY,aAAZ,CAA0B,MAA1B,CAAP;AACH;AAED;AACA;AACA;AAEA,cAAU,MAAV,EAAsB;AAClB,aAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB;AACH;AAED,aAAS,MAAT,EAAqB;AACjB,eAAO,KAAK,SAAL,CAAe,QAAf,CAAwB,MAAxB,CAAP;AACH;AAED,eAAW,MAAX,EAAuB;AACnB,eAAO,KAAK,SAAL,CAAe,UAAf,CAA0B,MAA1B,CAAP;AACH;AAED,cAAU,MAAV,EAAsB;AAClB,eAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAP;AACH;AAED,cAAU,MAAV,EAAsB;AAClB,eAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAP;AACH;AAED;AACA;AACA;AAEA,QAAI,GAAJ,GAAO;AACH,eAAO,KAAK,MAAL,CAAY,GAAnB;AACH;AACD,QAAI,GAAJ,CAAQ,KAAR,EAAa;AACT,aAAK,MAAL,CAAY,GAAZ,GAAkB,KAAlB;AACH;AAED,QAAI,QAAJ,GAAY;AACR,eAAO,KAAK,MAAL,CAAY,QAAnB;AACH;AACD,QAAI,QAAJ,CAAa,KAAb,EAAkB;AACd,aAAK,MAAL,CAAY,QAAZ,GAAuB,KAAvB;AACH;AAED,UAAM,KAAN,EAAmB;AACf,eAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,CAAP;AACH;AAED,WAAI;AACA,eAAO,KAAK,MAAL,CAAY,IAAZ,EAAP;AACH;AAED;AACA;AACA;AAEA,SAAK,GAAL,EAAe;AACX,eAAO,KAAK,QAAL,CAAc,IAAd,CAAmB,GAAnB,CAAP;AACH;AAED;AACA;AACA;AAEA,WAAO,OAAP,EAAwC;AACpC,eAAO,KAAK,QAAL,CAAc,MAAd,CAAqB,OAArB,CAAP;AACH;AAhNL;AAAA,QAAA,OAAA,GAAA,IAAA","file":"main.340474f7.map","sourceRoot":"../demo","sourcesContent":["export default class Emitter {\n\n    private listeners = new Map<string, Listener[]>();\n\n    on(signal: string, listener: Listener) {\n        if (!this.listeners.has(signal)) {\n            this.listeners.set(signal, []);\n        }\n\n        this.listeners.get(signal).push(listener);\n    }\n\n    emit(signal: string, argument: any) {\n        const listeners = this.listeners.get(signal);\n\n        if (!listeners) {\n            return;\n        }\n\n        for (const listener of listeners) {\n            listener(argument);\n        }\n    }\n\n}\n\nexport type Listener = (event: any) => void;\n","enum Stat {\n    ESCAPE_ACCELERATION,\n    FRICTION,\n    HUNT_ACCELERATION,\n    MAX_BITE_SIZE,\n    MAX_RADIUS,\n    MITOSIS_MIN_RADIUS,\n    VISION_RANGE,\n    MAX_VELOCITY,\n}\n\nexport default Stat;\n","import Stat from '../stat';\nimport World from '../world';\nimport { IEnergySource } from './diet';\nimport Cell from './index';\n\nexport default class CellBehavior {\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    tick(map: World) {\n        const entities = this.cell.getVisibleEntities(map);\n\n        for (const entity of entities) {\n            if (entity instanceof Cell) {\n                this.interactWithCell(entity);\n            }\n        }\n\n        this.cell.move();\n    }\n\n    interactWithCell(other: Cell) {\n        const isTouching = this.cell.isTouching(other);\n\n        if (this.cell.canEat(other)) {\n            if (isTouching) {\n                this.cell.eat(other);\n            } else {\n                this.hunt(other);\n            }\n        } else if (other.canEat(this.cell)) {\n            this.escapeFrom(other);\n        }\n    }\n\n    hunt(target: Cell) {\n        const force = this.cell.getStat(Stat.HUNT_ACCELERATION);\n        const direction = target.pos.sub(this.cell.pos);\n        const push = direction.setMagnitude(force);\n\n        this.cell.shove(push);\n    }\n\n    escapeFrom(target: Cell) {\n        const force = this.cell.getStat(Stat.ESCAPE_ACCELERATION);\n        const direction = target.pos.sub(this.cell.pos);\n        const push = direction.setMagnitude(force);\n\n        this.cell.shove(push);\n    }\n}\n","export const PI = Math.PI;\nexport const TAU = Math.PI * 2;\n\nexport const abs = Math.abs;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sqrt = Math.sqrt;\nexport const pow = Math.pow;\n\nexport function random(min?: number, max?: number) {\n    if (arguments.length === 0) {\n        return Math.random();\n    } else if (arguments.length === 1) {\n        max = min;\n        min = 0;\n    }\n\n    return Math.round(Math.random() * (max - min)) + min;\n}\n\n//\n// Round\n//\n\nconst roundOperators = [ 1, 10, 100 ];\n\nfunction getRoundOperator(digits: number) {\n    while (roundOperators.length < digits + 1) {\n        roundOperators.push(Math.pow(10, roundOperators.length + 1));\n    }\n\n    return roundOperators[digits];\n}\n\nexport function round(value: number, decimals = 2) {\n    if (decimals === 0) {\n        return Math.round(value);\n    }\n\n    const operator = getRoundOperator(decimals);\n    return Math.round(value * operator) / operator;\n}\n","import { pow, sqrt } from '../math';\nimport Stat from '../stat';\nimport Cell from './index';\nimport CellState from './state';\n\nexport default class CellBody {\n\n    get isAlive() {\n        return this.state.isAlive;\n    }\n\n    get size() {\n        return this.state.size;\n    }\n    set size(value: number) {\n        this.state.size = value;\n\n        if (value === 0) {\n            this.die();\n        }\n    }\n\n    get energy() {\n        return pow(this.state.size, 2) * Math.PI;\n    }\n    set energy(value) {\n        this.state.size = sqrt(value / Math.PI);\n    }\n\n    constructor(\n        private cell: Cell,\n        private state: CellState,\n    ) {\n        this.state.isAlive = true;\n        this.state.size = 1;\n    }\n\n    canMitos() {\n        const minSize = this.cell.getStat(Stat.MITOSIS_MIN_RADIUS);\n\n        return this.size > minSize;\n    }\n\n    mitos() {\n        const minSize = this.cell.getStat(Stat.MITOSIS_MIN_RADIUS);\n        const childCount = Math.floor(this.size / (minSize / 2));\n        const childEnergy = this.energy / childCount;\n        const children = [];\n\n        for (let i = 0; i < childCount; i++) {\n            const child = new Cell();\n            child.energy = childEnergy;\n            this.inherit(child);\n            children.push(child);\n        }\n\n        this.cell.emit('mitos', children);\n        this.die();\n\n        return children;\n    }\n\n    die() {\n        this.state.isAlive = false;\n        this.cell.emit('die', this.cell);\n    }\n\n    private inherit(child: Cell) {\n        child.setParent(this.cell);\n    }\n\n}\n","import { round } from '../math';\nimport Stat from '../stat';\nimport Cell from './index';\n\nexport default class CellDiet {\n\n    private types = new Map<IEnergySourceConstructor, number>();\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    addType(Type: IEnergySourceConstructor, weight: number) {\n        this.types.set(Type, weight);\n    }\n\n    eat(target: IEnergySource) {\n        if (!this.cell.canEat(target)) {\n            throw new Error(`Invalid food source: ${target}`);\n        }\n\n        const selfEnergy = this.cell.energy;\n        const targetEnergy = target.energy;\n        const nutrition = this.consider(target);\n        const maxBitePercent = this.cell.getStat(Stat.MAX_BITE_SIZE);\n        const maxBite = selfEnergy * maxBitePercent;\n        const bite = targetEnergy > maxBite ? maxBite : targetEnergy;\n\n        target.energy -= bite;\n        this.cell.energy += bite * nutrition;\n        this.cell.emit('eat', target);\n\n        return true;\n    }\n\n    consider(target: IEnergySource) {\n        const Type = target.constructor as IEnergySourceConstructor;\n\n        return this.types.get(Type) || 0;\n    }\n\n}\n\nexport interface IEnergySource {\n    energy: number;\n}\n\nexport interface IEnergySourceConstructor {\n    new (): IEnergySource;\n}\n","import { abs } from './math';\n\nexport default class Vector {\n\n    static ZERO = Vector.of(0, 0);\n\n    static of(x: number, y: number) {\n        return new Vector(x, y);\n    }\n\n    static from({ x = 0, y = 0 }: IVectorSetter) {\n        return new Vector(x, y);\n    }\n\n    static apply(action: (...values: number[]) => number, ...vectors: IVector[]) {\n        return Vector.of(\n            action(...vectors.map((vector) => vector.x)),\n            action(...vectors.map((vector) => vector.y)),\n        );\n    }\n\n    static range({ x = 0, y = 0 }: IVectorSetter) {\n        return this.iterate(Vector.of(x, y));\n    }\n\n    static *iterate(vectorA: IVector, vectorB: IVector = new Vector(0, 0)) {\n        const start = this.apply(Math.min, vectorA, vectorB);\n        const end = this.apply(Math.max, vectorA, vectorB);\n\n        for (let x = start.x; x < end.x; x++) {\n            for (let y = start.y; y < end.y; y++) {\n                yield start.add({ x, y });\n            }\n        }\n    }\n\n    constructor(\n        readonly x: number,\n        readonly y: number,\n    ) {\n        if (isNaN(x) || isNaN(y)) {\n            throw new Error(`Creating vector with NaN: ${this}`);\n        }\n    }\n\n    get isZero() {\n        return this.x === 0 && this.y === 0;\n    }\n\n    private _magnitude: number;\n\n    get magnitude() {\n        if (this.isZero) {\n            return 0;\n        }\n\n        if (!this._magnitude) {\n            this._magnitude = Math.hypot(this.x, this.y);\n        }\n\n        return this._magnitude;\n    }\n\n    get radians(): number {\n        if (this.isZero) {\n            return 0;\n        }\n\n        const { x, y } = this;\n        let arctan = Math.atan(y / x);\n\n        if (arctan < 0) {\n            arctan += Math.PI;\n        }\n\n        if (y < 0 || (y === 0 && x < 0)) {\n            arctan += Math.PI;\n        }\n\n        return arctan;\n    }\n\n    setMagnitude(value: number) {\n        if (this.magnitude === 0) {\n            return Vector.of(value, 0);\n        }\n\n        const ratio = this.magnitude / value;\n        return Vector.of(this.x / ratio, this.y / ratio);\n    }\n\n    distance(target: Vector) {\n        return this.sub(target).magnitude;\n    }\n\n    is({ x = this.x, y = this.y }: IVectorSetter) {\n        return this.x === x && this.y === y;\n    }\n\n    sub({ x = 0, y = 0 }: IVectorSetter) {\n        return Vector.of(this.x - x, this.y - y);\n    }\n\n    add({ x = 0, y = 0 }: IVectorSetter) {\n        return Vector.of(this.x + x, this.y + y);\n    }\n\n    multiply({ x = 1, y = 1 }: IVectorSetter) {\n        return Vector.of(this.x * x, this.y * y);\n    }\n\n    diff({ x = this.x, y = this.y }: IVectorSetter) {\n        return Vector.of(abs(this.x - x), abs(this.y - y));\n    }\n\n    toString() {\n        return `[Vector(${this.x}, ${this.y})]`;\n    }\n\n}\n\nexport interface IVector {\n    x: number;\n    y: number;\n}\n\ninterface IXVector {\n    x: number;\n    y?: number;\n}\n\ninterface IYVector {\n    y: number;\n    x?: number;\n}\n\nexport type IVectorSetter = IXVector | IYVector;\n","import Stat from '../stat';\nimport Vector from '../vector';\nimport Cell from './index';\nimport CellState from './state';\n\nexport default class CellPhysic {\n\n    private shoves: Vector[] = [];\n\n    constructor(\n        private cell: Cell,\n        private state: CellState,\n    ) {\n        state.pos = Vector.ZERO;\n        state.velocity = Vector.ZERO;\n    }\n\n    get pos() {\n        return this.state.pos;\n    }\n    set pos(value: Vector) {\n        this.state.pos = value;\n    }\n\n    get velocity() {\n        return this.state.velocity;\n    }\n    set velocity(value: Vector) {\n        this.state.velocity = value;\n    }\n\n    shove(force: Vector) {\n        const maxSize = this.cell.getStat(Stat.MAX_RADIUS);\n        const size = this.cell.size;\n        const weight = 1 - Math.max(size / maxSize, 0);\n        const modification = force.multiply({ x: weight, y: weight });\n\n        this.shoves.push(modification);\n    }\n\n    friction(velocity = this.velocity) {\n        const friction = this.cell.getStat(Stat.FRICTION);\n        const maxSize = this.cell.getStat(Stat.MAX_RADIUS);\n        const { size } = this.cell;\n        const frictionFactor = 1 - friction;\n        const sizeFactor = size / maxSize;\n        const factor = frictionFactor * 0.5 + sizeFactor * 0.5;\n\n        this.velocity = velocity.multiply({ x: factor, y: factor });\n    }\n\n    move() {\n        const maxVelocity = this.cell.getStat(Stat.MAX_VELOCITY);\n        let velocity = this.velocity;\n\n        for (const shove of this.shoves) {\n            velocity = velocity.add(shove);\n        }\n\n        if (velocity.magnitude > maxVelocity) {\n            velocity = velocity.setMagnitude(maxVelocity);\n        }\n\n        this.shoves.length = 0;\n        this.pos = this.pos.add(velocity);\n\n        this.friction(velocity);\n    }\n\n}\n","import Cell from './index';\n\nexport default class CellRelations {\n\n    private parents = new Set<Cell>();\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    setParent(target: Cell) {\n        this.parents.add(target);\n    }\n\n    isFamily(target: Cell) {\n        return (\n            this.isChildOf(target) ||\n            this.isParentOf(target) ||\n            this.isSibling(target)\n        );\n    }\n\n    isParentOf(target: Cell) {\n        return target.isChildOf(this.cell);\n    }\n\n    isChildOf(target: Cell) {\n        return this.parents.has(target);\n    }\n\n    isSibling(target: Cell) {\n        for (const parent of this.parents) {\n            if (target.isChildOf(parent)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n","import { PI, random, TAU } from '../math';\nimport Cell from './index';\n\nexport default class CellRenderer {\n\n    color = '#' + random(0, 0xFFFFFF)\n        .toString(16)\n        .padStart(6, '0');\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    render(context: CanvasRenderingContext2D) {\n        const {\n            pos,\n            velocity,\n            size,\n        } = this.cell;\n\n        /* tslint:disable-next-line:no-bitwise */\n        const radius = size | 0;\n        const padding = radius * 0.;\n\n        context.save();\n        context.translate(pos.x, pos.y);\n        context.rotate(velocity.radians - TAU / 4);\n\n        context.fillStyle = this.color;\n\n        context.beginPath();\n        context.arc(0, 0, radius, 0, TAU);\n        context.fill();\n        context.moveTo(radius, padding);\n        context.lineTo(0, radius * 1.5 + padding);\n        context.lineTo(-radius, padding);\n        context.closePath();\n        context.fill();\n\n        context.restore();\n    }\n\n}\n","import Stat from '../stat';\nimport World from '../world';\nimport Cell from './index';\n\nexport default class CellSenses {\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    getVisionRange() {\n        return this.cell.size + this.cell.getStat(Stat.VISION_RANGE);\n    }\n\n    getVisibleEntities(map: World) {\n        // TODO: Use getVisionRange();\n        const visionRange = this.cell.getStat(Stat.VISION_RANGE);\n        const entities = map.getEntitiesIn(this.cell.pos, visionRange);\n\n        return entities.filter((entry) => entry !== this.cell);\n    }\n\n    canSee(target: Cell) {\n        const borders = this.cell.size + target.size;\n        const distance = this.cell.pos.distance(target.pos);\n        const visionRange = this.cell.getStat(Stat.VISION_RANGE);\n\n        return distance - borders <= visionRange;\n    }\n\n    isTouching(target: Cell) {\n        const distance = this.cell.pos.distance(target.pos);\n        const minDistance = this.cell.size + target.size;\n\n        return distance <= minDistance;\n    }\n\n    considerFight(target: Cell) {\n        return this.cell.size - target.size;\n    }\n\n}\n","exports.buffer = function buffer(Class) {\n    const bufferProps = Class._bufferProps = Class._bufferProps || [];\n\n    Class._isDoubleBuffer = true;\n\n    Object.assign(Class.prototype, {\n\n        getState() {\n            const prev = {};\n\n            for (const { prop, state } of bufferProps) {\n                prev[prop] = this[state];\n            }\n\n            return prev;\n        },\n\n        setState(newState) {\n            this._isBufferDirty = false;\n\n            for (const { prop, state, next } of bufferProps) {\n                this[state] = newState[prop];\n                this[next] = newState[prop];\n            }\n        },\n\n        flushState() {\n            if (!this._isBufferDirty) {\n                return;\n            }\n\n            this._isBufferDirty = false;\n            const prev = {};\n\n            for (const { prop, state, next } of bufferProps) {\n                prev[prop] = this[state];\n                this[state] = this[next];\n            }\n\n            return prev;\n        },\n\n    });\n}\n\nexports.bufferProp = function bufferProp(prototype, key) {\n    const Class = prototype.constructor;\n    const bufferProps = Class._bufferProps = Class._bufferProps || [];\n    const state = `_${key}`;\n    const next = `_${key}_next`;\n\n    bufferProps.push({\n        prop: key,\n        state,\n        next,\n    });\n\n    Object.defineProperty(prototype, key, {\n\n        get() {\n            return this[state];\n        },\n\n        set(value) {\n            this[next] = value;\n            this._isBufferDirty = true;\n        },\n\n    });\n}\n","import Stat from '../stat';\nimport Vector from '../vector';\nimport Cell from './index';\nimport { buffer, bufferProp } from './state-decorators';\n\n@buffer\nexport default class CellState {\n\n    private stats = new Map<Stat, number>();\n\n    @bufferProp\n    isAlive: boolean;\n\n    @bufferProp\n    size: number;\n\n    @bufferProp\n    pos: Vector;\n\n    @bufferProp\n    velocity: Vector;\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    getStat(key: Stat) {\n        return this.stats.get(key);\n    }\n\n    setStat(key: Stat, value: number) {\n        this.stats.set(key, value);\n    }\n\n    //\n    // Methods injected by decorator\n    //\n\n    getState(): IStateScreenshot {\n        return null;\n    }\n\n    setState(newState: IStateScreenshot) {}\n\n    flushState() {}\n\n}\n\nexport interface IStateScreenshot {\n    isAlive: boolean;\n    size: number;\n    pos: Vector;\n    velocity: Vector;\n}\n","import Emitter, { Listener } from '../emitter';\nimport Stat from '../stat';\nimport Vector from '../vector';\nimport World from '../world';\nimport CellBehavior from './behavior';\nimport CellBody from './body';\nimport CellDiet, { IEnergySource, IEnergySourceConstructor } from './diet';\nimport CellPhysic from './physic';\nimport CellRelations from './relations';\nimport CellRenderer from './renderer';\nimport CellSenses from './senses';\nimport CellState, { IStateScreenshot } from './state';\n\nlet id = 0;\nconst cells: Cell[] = (window as any).cells = [];\n\nexport default class Cell {\n\n    private behavior = new CellBehavior(this);\n    private diet = new CellDiet(this);\n    private relations = new CellRelations(this);\n    private renderer = new CellRenderer(this);\n    private senses = new CellSenses(this);\n    private state = new CellState(this);\n    private body = new CellBody(this, this.state);\n    private physic = new CellPhysic(this, this.state);\n    private emitter = new Emitter();\n    id: number;\n\n    constructor() {\n        this.id = id++;\n\n        cells[this.id] = this;\n        this.flushState();\n    }\n\n    toString() {\n        return `[Cell ${this.id}]`;\n    }\n\n    //\n    // STATE\n    //\n\n    getStat(key: Stat) {\n        return this.state.getStat(key);\n    }\n\n    setStat(key: Stat, value: number) {\n        this.state.setStat(key, value);\n    }\n\n    getState() {\n        return this.state.getState();\n    }\n\n    setState(value: IStateScreenshot) {\n        return this.state.setState(value);\n    }\n\n    flushState() {\n        return this.state.flushState();\n    }\n\n    //\n    // SIGNALS\n    //\n\n    on(signal: string, listener: Listener) {\n        this.emitter.on(signal, listener);\n    }\n\n    emit(signal: string, argument: any) {\n        this.emitter.emit(signal, argument);\n    }\n\n    //\n    // BODY\n    //\n\n    get isAlive() {\n        return this.body.isAlive;\n    }\n\n    get size() {\n        return this.body.size;\n    }\n    set size(value) {\n        this.body.size = value;\n    }\n\n    get energy() {\n        return this.body.energy;\n    }\n    set energy(value) {\n        this.body.energy = value;\n    }\n\n    canMitos() {\n        return this.body.canMitos();\n    }\n\n    mitos() {\n        return this.body.mitos();\n    }\n\n    //\n    // DIET\n    //\n\n    setDietType(Type: IEnergySourceConstructor, nutrition = 1) {\n        this.diet.addType(Type, nutrition);\n    }\n\n    eat(target: IEnergySource) {\n        return this.diet.eat(target);\n    }\n\n    canEat(target: IEnergySource) {\n        if (target instanceof Cell && this.isFamily(target)) {\n            return false;\n        }\n\n        return this.considerFood(target) > 0;\n    }\n\n    considerFood(target: IEnergySource) {\n        const dietFactor = this.diet.consider(target);\n\n        if (target instanceof Cell) {\n            return dietFactor * this.considerFight(target);\n        }\n\n        return dietFactor;\n    }\n\n    //\n    // SENSES\n    //\n\n    getVisionRange() {\n        return this.senses.getVisionRange();\n    }\n\n    getVisibleEntities(map: World) {\n        return this.senses.getVisibleEntities(map);\n    }\n\n    canSee(target: Cell) {\n        return this.senses.canSee(target);\n    }\n\n    isTouching(target: Cell) {\n        return this.senses.isTouching(target);\n    }\n\n    considerFight(target: Cell) {\n        return this.senses.considerFight(target);\n    }\n\n    //\n    // RELATIONS\n    //\n\n    setParent(target: Cell) {\n        this.relations.setParent(target);\n    }\n\n    isFamily(target: Cell) {\n        return this.relations.isFamily(target);\n    }\n\n    isParentOf(target: Cell) {\n        return this.relations.isParentOf(target);\n    }\n\n    isChildOf(target: Cell) {\n        return this.relations.isChildOf(target);\n    }\n\n    isSibling(target: Cell) {\n        return this.relations.isSibling(target);\n    }\n\n    //\n    // PHYSIC\n    //\n\n    get pos() {\n        return this.physic.pos;\n    }\n    set pos(value) {\n        this.physic.pos = value;\n    }\n\n    get velocity() {\n        return this.physic.velocity;\n    }\n    set velocity(value) {\n        this.physic.velocity = value;\n    }\n\n    shove(force: Vector) {\n        return this.physic.shove(force);\n    }\n\n    move() {\n        return this.physic.move();\n    }\n\n    //\n    // BEHAVIOR\n    //\n\n    tick(map: World) {\n        return this.behavior.tick(map);\n    }\n\n    //\n    // RENDERER\n    //\n\n    render(context: CanvasRenderingContext2D) {\n        return this.renderer.render(context);\n    }\n\n}\n","import Cell from './cell/index';\n\nexport default Cell;\n","import Cell from './cell';\nimport { IEnergySource } from './cell/diet';\nimport Vector from './vector';\n\nexport default class World {\n\n    private entities = new Set<IWorldEntity>();\n\n    constructor(\n        readonly size: Vector,\n    ) {}\n\n    add(entity: IWorldEntity) {\n        this.entities.add(entity);\n    }\n\n    remove(entity: IWorldEntity) {\n        this.entities.delete(entity);\n    }\n\n    getEntitiesAlive() {\n        return [...this.entities];\n    }\n\n    getEntitiesAt(point: Vector) {\n        const result: IWorldEntity[] = [];\n\n        for (const entity of this.entities) {\n            const { x, y } = point.diff(entity.pos);\n            const { size } = entity;\n            const isInBox = x < size && y < size;\n\n            if (isInBox && entity.pos.distance(point) <= size) {\n                result.push(entity);\n            }\n        }\n\n        return result;\n    }\n\n    getEntitiesIn(point: Vector, radius: number) {\n        const start = point.sub({ x: radius, y: radius });\n        const end = point.add({ x: radius, y: radius });\n        const result: IWorldEntity[] = [];\n\n        for (const entity of this.entities) {\n            const { x, y } = entity.pos;\n            const range = radius + entity.size;\n            const isInBox = x >= start.x && x <= end.x && y >= start.y && y <= end.y;\n\n            if (isInBox && entity.pos.distance(point) <= range) {\n                result.push(entity);\n            }\n        }\n\n        return result;\n    }\n\n}\n\nexport interface IWorldEntity<T = EntityState> extends IEnergySource, StateHolder<T> {\n    id: number;\n    size: number;\n    pos: Vector;\n    tick(map: World): void;\n    render(context: CanvasRenderingContext2D): void;\n}\n\nexport interface StateHolder<T> {\n    getState(): T;\n    setState(state: T): void;\n    flushState(): void;\n}\n\nexport interface EntityState {\n\n}\n","import Cell from '../cell';\nimport { random } from '../math';\nimport Stat from '../stat';\nimport Vector from '../vector';\nimport World from '../world';\nimport Game from './index';\n\nexport default class GameEntities {\n\n    world: World;\n\n    constructor(\n        private game: Game,\n        mapSize: Vector,\n    ) {\n        this.world = new World(mapSize);\n    }\n\n    addCell(position: Vector) {\n        const cell = new Cell();\n\n        cell.size = 4 + random(2);\n        cell.pos = position;\n\n        cell.setStat(Stat.ESCAPE_ACCELERATION, 1);\n        cell.setStat(Stat.FRICTION, 0.3);\n        cell.setStat(Stat.HUNT_ACCELERATION, 1);\n        cell.setStat(Stat.MAX_BITE_SIZE, 10);\n        cell.setStat(Stat.MAX_RADIUS, 200);\n        cell.setStat(Stat.MAX_VELOCITY, 10);\n        cell.setStat(Stat.MITOSIS_MIN_RADIUS, 50);\n        cell.setStat(Stat.VISION_RANGE, 300);\n\n        cell.flushState();\n\n        this.world.add(cell);\n\n        return cell;\n    }\n\n    getEntitiesAlive() {\n        return this.world.getEntitiesAlive();\n    }\n\n    tickEntities() {\n        const { world } = this;\n        const entities = this.getEntitiesAlive();\n\n        for (const entity of entities) {\n            if (entity instanceof Cell && !entity.isAlive) {\n                world.remove(entity);\n                continue;\n            }\n\n            entity.tick(world);\n        }\n\n        return entities;\n    }\n\n}\n","import Cell from '../cell';\nimport Vector from '../vector';\nimport Game from './index';\n\nexport default class GameInteraction {\n\n    mouse: Vector = null;\n    private isListening = false;\n    private inspector = new Set<Cell>();\n    private isHistoryEnabled: boolean;\n\n    constructor(\n        private game: Game,\n        { isHistoryEnabled }: GameInteractionOptions = {},\n    ) {\n        this.onClick = this.onClick.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onKeyPress = isHistoryEnabled\n            ? this.onKeyPressHistory.bind(this)\n            : this.onKeyPress.bind(this);\n    }\n\n    interact() {\n        const { game } = this;\n        const { world } = game;\n\n        if (!this.mouse) {\n            return;\n        }\n\n        const hover = world.getEntitiesAt(this.mouse);\n        const inspect = new Set([ ...this.inspector, ...hover as Cell[] ]);\n\n        for (const cell of inspect) {\n            game.renderCellDetails(cell);\n        }\n    }\n\n    addListeners(canvas: HTMLCanvasElement) {\n        if (this.isListening) {\n            return false;\n        }\n\n        document.addEventListener('keypress', this.onKeyPress);\n        canvas.addEventListener('mousemove', this.onMouseMove);\n        canvas.addEventListener('click', this.onClick);\n    }\n\n    private onClick(event: MouseEvent) {\n        this.mouse = Vector.from(event);\n\n        const { game, inspector } = this;\n        const { world } = game;\n        const hover = world.getEntitiesAt(this.mouse);\n\n        for (const cell of hover as Cell[]) {\n            if (inspector.has(cell)) {\n                inspector.delete(cell);\n            } else {\n                inspector.add(cell);\n            }\n        }\n\n        this.game.updateView();\n    }\n\n    private onKeyPress(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'Space':\n                this.game.isPaused = !this.game.isPaused;\n        }\n    }\n\n    private onKeyPressHistory(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'Space':\n                this.game.isPaused = !this.game.isPaused;\n                break;\n\n            case 'KeyA':\n            case 'KeyJ':\n                this.game.speed = -1;\n                this.game.isPaused = false;\n                break;\n\n            case 'KeyS':\n            case 'KeyK':\n                this.game.speed = -1;\n                this.game.isPaused = true;\n                this.game.step();\n                break;\n\n            case 'KeyD':\n            case 'KeyL':\n                this.game.speed = 1;\n                this.game.isPaused = true;\n                this.game.step();\n                break;\n\n            case 'KeyF':\n            case 'Semicolon':\n                this.game.speed = 1;\n                this.game.isPaused = false;\n                break;\n\n            // default:\n            //     console.log(`KEYPRESS ${event.code}`);\n        }\n    }\n\n    private onMouseMove(event: MouseEvent) {\n        this.mouse = Vector.from(event);\n        this.game.updateView();\n    }\n\n}\n\nexport interface GameInteractionOptions {\n    isHistoryEnabled?: boolean;\n}\n","import Cell from '../cell';\nimport { TAU } from '../math';\nimport Vector from '../vector';\nimport Game from './index';\n\nexport default class GameRenderer {\n\n    constructor(\n        private game: Game,\n        private canvas: HTMLCanvasElement,\n    ) {}\n\n    renderEntities() {\n        const { game, canvas } = this;\n        const { width, height } = canvas;\n        const entities = game.getEntitiesAlive();\n        const context = canvas.getContext('2d');\n\n        context.clearRect(0, 0, width, height);\n\n        for (const entity of entities) {\n            entity.render(context);\n        }\n    }\n\n    renderCellDetails(cell: Cell) {\n        this.renderCellVision(cell);\n        this.renderCellBehavior(cell);\n    }\n\n    private renderCellVision(cell: Cell) {\n        for (const visible of cell.getVisibleEntities(this.game.world)) {\n            this.drawLine(cell.pos, visible.pos, {\n                width: 0.5,\n                color: 'rgba(0, 0, 0, 50)',\n            });\n        }\n\n        const visionRange = cell.getVisionRange();\n\n        this.drawCircle(cell.pos, visionRange, {\n            color: 'red',\n        });\n\n    }\n\n    private renderCellBehavior(cell: Cell) {\n        const velocityMultiplier = 100;\n        const velocityLine = cell.velocity.multiply({\n            x: velocityMultiplier,\n            y: velocityMultiplier,\n        });\n\n        this.drawLine(cell.pos, velocityLine.add(cell.pos), {\n            color: 'blue',\n            width: 2,\n        });\n    }\n\n    drawLine(from: Vector, to: Vector, {\n        color = 'black',\n        width = 1,\n    } = {}) {\n        const context = this.canvas.getContext('2d');\n\n        context.lineWidth = width;\n        context.strokeStyle = color;\n        context.beginPath();\n        context.moveTo(from.x, from.y);\n        context.lineTo(to.x, to.y);\n        context.closePath();\n        context.stroke();\n    }\n\n    drawCircle(at: Vector, radius: number, {\n        color = 'black',\n        width = 1,\n    } = {}) {\n        const context = this.canvas.getContext('2d');\n\n        context.lineWidth = width;\n        context.strokeStyle = color;\n        context.beginPath();\n        context.arc(at.x, at.y, radius, 0, TAU);\n        context.closePath();\n        context.stroke();\n    }\n\n}\n","import Game from './index';\n\nexport default class GameState {\n\n    private history: EntitiesState[] = [];\n    private hasHistory: boolean;\n    private lastCalculatedStep = -1;\n\n    constructor(\n        private game: Game,\n        { hasHistory = false }: GameStateOptions = {},\n    ) {\n        this.hasHistory = hasHistory;\n    }\n\n    tick(cursor: number) {\n        if (!this.hasHistory) {\n            this.processStep();\n            return;\n        }\n\n        if (this.hasStep(cursor)) {\n            this.load(cursor);\n            return;\n        }\n\n        while (!this.hasStep(cursor)) {\n            this.processHistoryStep(cursor);\n        }\n    }\n\n    hasStep(cursor: number) {\n        return cursor < this.history.length;\n    }\n\n    load(index: number) {\n        const state = this.history[index];\n        const entities = this.game.getEntitiesAlive();\n\n        for (const entity of entities) {\n            entity.setState(state[entity.id]);\n        }\n    }\n\n    processStep() {\n        const entities = this.game.tickEntities();\n\n        for (const entity of entities) {\n            entity.flushState();\n        }\n    }\n\n    processHistoryStep(cursor: number) {\n        const { history } = this;\n        const entities = this.game.tickEntities();\n        const newState: EntitiesState = {};\n\n        for (const entity of entities) {\n            entity.flushState();\n            newState[entity.id] = entity.getState();\n        }\n\n        history.push(newState);\n    }\n\n}\n\nexport interface GameStateOptions {\n    hasHistory?: boolean;\n}\n\ninterface EntitiesState {\n    [id: number]: object;\n}\n","export default class GameTicker {\n\n    private _speed = 1;\n    private cursor = -1;\n    private isRunning = false;\n    isPaused = false;\n\n    get speed() {\n        return this._speed;\n    }\n    set speed(value) {\n        if (value !== 1 && value !== -1) {\n            throw new Error(`Invalid speed ${value}`);\n        }\n\n        this._speed = value;\n    }\n\n    get isForward() {\n        return this.speed === 1;\n    }\n\n    get isBackwards() {\n        return this.speed === -1;\n    }\n\n    get isAtBegining() {\n        return this.cursor <= 0;\n    }\n\n    constructor(\n        private callback: GameTickerCallback,\n    ) {\n        this.onTick = this.onTick.bind(this);\n    }\n\n    start() {\n        if (this.isRunning) {\n            return;\n        }\n\n        this.speed = 1;\n        this.isRunning = true;\n        requestAnimationFrame(this.onTick);\n    }\n\n    stop() {\n        this.isRunning = false;\n    }\n\n    pause() {\n        this.isPaused = true;\n    }\n\n    step() {\n        if (this.isBackwards && this.isAtBegining) {\n            console.warn(`Can't go further in history!`);\n            this.isPaused = true;\n            return;\n        }\n\n        this.cursor += this.speed;\n        this.callback.call(null, {\n            turn: this.cursor,\n        });\n    }\n\n    private onTick() {\n        if (!this.isRunning) {\n            return;\n        }\n\n        requestAnimationFrame(this.onTick);\n\n        if (!this.isPaused) {\n            this.step();\n        }\n    }\n\n}\n\nexport type GameTickerCallback = () => void;\n\nexport interface GameTickerParams {\n    turn: number;\n}\n","import Cell from '../cell';\nimport Vector from '../vector';\nimport GameEntities from './entities';\nimport GameInteraction from './interaction';\nimport GameRenderer from './renderer';\nimport GameState from './state';\nimport GameTicker, { GameTickerParams } from './ticker';\n\nexport default class Game {\n\n    private entities: GameEntities;\n    private interaction: GameInteraction;\n    private renderer: GameRenderer;\n    private state: GameState;\n    private ticker: GameTicker;\n\n    get world() {\n        return this.entities.world;\n    }\n\n    constructor(\n        private canvas: HTMLCanvasElement,\n        mapSize: Vector,\n        { hasHistory }: GameOptions = {},\n    ) {\n        this.entities = new GameEntities(this, mapSize);\n        this.renderer = new GameRenderer(this, canvas);\n        this.state = new GameState(this, { hasHistory });\n        this.ticker = new GameTicker(this.tick.bind(this));\n        this.interaction = new GameInteraction(this, {\n            isHistoryEnabled: Boolean(hasHistory),\n        });\n    }\n\n    tick({ turn }: GameTickerParams) {\n        const entities = this.getEntitiesAlive();\n        console.log(turn, entities.length);\n\n        this.state.tick(turn);\n        this.updateView();\n    }\n\n    updateView() {\n        this.render();\n        this.interaction.interact();\n    }\n\n    //\n    // TICKER\n    //\n\n    get isPaused() {\n        return this.ticker.isPaused;\n    }\n    set isPaused(value: boolean) {\n        this.ticker.isPaused = value;\n    }\n\n    get speed() {\n        return this.ticker.speed;\n    }\n    set speed(value: number) {\n        this.ticker.speed = value;\n    }\n\n    goTo(step: number) {\n        return this.state.tick(step);\n    }\n\n    start() {\n        return this.ticker.start();\n    }\n\n    stop() {\n        return this.ticker.stop();\n    }\n\n    pause() {\n        return this.ticker.pause();\n    }\n\n    step() {\n        return this.ticker.step();\n    }\n\n    //\n    // ENTITIES\n    //\n\n    getEntitiesAlive() {\n        return this.entities.getEntitiesAlive();\n    }\n\n    addCell(position: Vector) {\n        return this.entities.addCell(position);\n    }\n\n    tickEntities() {\n        return this.entities.tickEntities();\n    }\n\n    //\n    // INTERACTION\n    //\n\n    addListeners() {\n        this.interaction.addListeners(this.canvas);\n    }\n\n    //\n    // RENDER\n    //\n\n    render() {\n        return this.renderer.renderEntities();\n    }\n\n    renderCellDetails(cell: Cell) {\n        return this.renderer.renderCellDetails(cell);\n    }\n\n}\n\nexport interface GameOptions {\n    hasHistory?: boolean;\n}","import Game from '../src/game/index';\nimport Vector from '../src/vector';\nimport { random } from '../src/math';\nimport Cell from '../src/cell';\n\nmain();\n\nasync function main() {\n    await domLoaded();\n\n    const width = window.innerWidth;\n    const height = window.innerHeight - 4;\n\n    console.log({ width, height });\n\n    const query = parseQuery();\n    const entities = query.get('cells') || 10;\n    const canvas = document.querySelector('canvas#world') as HTMLCanvasElement;\n    const game = new Game(canvas, Vector.of(width, height), {\n        hasHistory: Boolean(query.get('history')),\n    });\n\n    canvas.width = width;\n    canvas.height = height;\n\n    for (let i = 0; i < entities; i++) {\n        const x = random(0, width);\n        const y = random(0, height);\n        const cell = game.addCell(Vector.of(x, y));\n\n        cell.setDietType(Cell);\n    }\n\n    game.addListeners();\n    game.start();\n    game.pause();\n    game.render();\n\n    (window as any).game = game;\n}\n\nfunction domLoaded() {\n    return new Promise(resolve => window.addEventListener('DOMContentLoaded', resolve));\n}\n\nfunction parseQuery() {\n    const keyValue = window.location.search\n        .substr(1)\n        .split('&')\n        .filter(Boolean)\n        .map((entry): [ string, number ] => {\n            const [ key, value ] = entry.split('=');\n            const num = parseInt(value);\n\n            if (isNaN(num)) {\n                throw new Error(`Invalid option \"${key}\" is not a number \"${value}\" \"${num}\"`)\n            }\n\n            return [ key, num ];\n        })\n\n    return new Map<string, number>(keyValue);\n}"]}