{"version":3,"sources":["../src/emitter.ts","../src/stat.ts","../src/cell/behavior.ts","../src/math.ts","../src/cell/body.ts","../src/cell/diet.ts","../src/vector.ts","../src/cell/physic.ts","../src/cell/relations.ts","../src/cell/renderer.ts","../src/cell/senses.ts","../src/cell/state-decorators.js","../src/cell/state.ts","../src/cell/index.ts","../src/world.ts","../src/game/entities.ts","../src/game/interaction.ts","../src/game/renderer.ts","../src/game/state.ts","../src/game/ticker.ts","../src/game/index.ts","persisted-state.ts","main.ts"],"names":["exports","buffer","Class","bufferProps","_bufferProps","_isDoubleBuffer","Object","assign","prototype","getState","prev","prop","state","setState","newState","_isBufferDirty","next","flushState","bufferProp","key","constructor","push","defineProperty","get","set","value"],"mappings":";;;;AAAA,MAAA,OAAA,CAAA;AAAA,kBAAA;AAEY,ACFZ,IAAK,IAAL,KDEY,SAAA,GAAY,IAAI,GAAJ,EAAZ;AAsBX,ACxBD,CAAA,UAAK,IAAL,EAAS;ADIL,ACHA,ODGG,ECHH,IDGA,CCHA,CDGmB,QAAnB,EAAqC,UCHrC,IAAA,CAAA,IAAA,qBAAA;ADII,ACHJ,SAAA,GDGQ,CAAC,CCHT,IDGc,MCHd,GDGS,CAAe,ACHxB,CAAA,EDGS,CAAmB,CCH5B,KDGS,CAAL,EAAiC,ECHrC;ADIQ,AGNC,AFGT,QEHS,CFGT,CEHS,GAAK,CFGd,GDGa,CGNM,EAAV,MHMD,CAAe,GAAf,CAAmB,ECH3B,IDGQ,ACHR,CAAA,CDGmC,EAA3B,CCHR,mBAAA;ACHJ,AFOS,AGNI,AFGT,MCJJ,ECCa,CFGT,EEHS,GAAM,AFGf,CCJJ,ICCwB,EAAL,GAAU,CAAhB,IFGT,ECJJ,EDII,CAAA,IAAA,CCJJ,SAAA,CAAA,CAAA,GDII;ACDJ,AFMQ,AGNK,AFET,MCFJ,ECAa,CFET,EEFS,EHMA,CGNM,AFEf,ECFJ,GCAwB,GHMhB,AGNK,CHMU,GAAf,ACJJ,CDIuB,GCJvB,CAAA,CCFJ,CFMQ,EAA2B,ACJ/B,IDII,CENR,AFMwC,OCJpC,CDII,CENR,CAAA,CAAA;AAEA,AFKK,AGNQ,AFET,MCDJ,ECDa,CFET,EEFS,GAAM,AFEf,ICDJ,CAAA,ACDwB,GAAX,YFET,IAAA,CAAA,IAAA,oBAAA;ACCA,AFKA,AGPS,AFET,QEFS,CHOJ,ACLL,EEFS,GAAM,AFEf,CDKA,CEJY,CFIS,EGPD,CDEpB,EACsB,ACHb,GHOT,EAAkC,CCLlC,IAAA,CAAA,IAAA,cAAA;ACCY,AERhB,AJaQ,AGPK,AFET,MGRJ,EDMa,CFET,GEFS,CDEG,CFKF,ACLV,CGRJ,ADMoB,EDEJ,GAAA,ACFS,GCNzB,CFQgB,ACFH,EHOa,ECLtB,GDK2B,CIb/B,AHQI,CGRJ,AHQI,IAAA,GDKsB,CAAe,GAAf,CAAmB,MAAnB,ACLtB,CDKI;AEJA,AERR,AJcQ,AGRK,AFEZ,AKTD,CLAA,EAAK,GGCL,AEDA,EHOa,GAAA,CHQD,ACfP,CDeQ,CGRM,CCNnB,AEDA,IHOwB,AFPf,EAAJ,CDeG,AGRK,AFPb,CKAA,CNewB,OIdxB,AEDA,CAAA,OFCA,SAAA,CAAA,CAAA;AFUI,AETJ,ACDA,ALeY,AGPZ,AFEA,AKTA,MFAA,ACDA,ACCA,ELSA,CCAS,ACFT,GDEI,AITJ,CAAA,CJSmB,CGVnB,AFQA,AFEA,CGTA,ADOuB,EFER,CEFf,EAAqC,CFErC,EEFA,EAAiD,KERjD,CDCA,OCDA,CDCA,QCDA,CDCA,ACDA,CDCA,ACDA,CDCA;AFUQ,AEPR,ACDA,ALaS,AGPL,AG0BA,MF/BJ,ACDA,EFMQ,MDEM,AEPd,ACDA,CDCA,ACDA,CCiCiB,CADb,CH1Bc,CG4BD,CAFb,EAEsB,EH5BlB,CDEiB,ICFI,CDEC,ACF1B,EAA4B,EDEP,CAAU,kBAAV,CAA6B,GAA7B,CAAjB;AAEA,AEeJ,ACrBA,ALWI,AGRA,AG0BS,aJvBJ,AFKA,AMkBI,CAAA,CH1BF,CCmBC,ACrBA,CC4BC,CAAA,CJvBE,AFKA,CIUf,ACrBA,AFGgB,ECoBJ,ACtBU,GHKlB,CCHO,CCkBX,AJVI,CGRA,CDGqB,AEiBG,EJZD,MELvB,EAA+B,CFK/B,EAAkC;AEJ9B,AEeI,ACrBA,AGNhB,ARiBY,AGRP,AG0BY,KH5Bb,CKPJ,KLSW,ECkBK,ACrBA,AC6BC,CAAA,CH1BF,CDGC,CEeA,ACrBA,AC6BC,CAAA,CEnCjB,CJ2BgB,ACrBA,AGNhB,CRiBqB,GIUL,ACrBA,CFGS,IHQb,EGRG,GDGmB,ECHE,CAAzB,EAA4B,GDGL,OAAtB,EAA4B;AACxB,AEeA,ACzBJ,AENZ,ACOI,ARcK,AGRD,AG2BA,MCxCR,MDwCY,CFTI,ACzBJ,CFOE,CIbd,CCQgB,CLKR,CCkBQ,ACzBJ,ACkCM,CAAN,CEjCR,CNSiB,AEeL,ACzBI,CGEM,EFgCF,CDlCA,CDyBR,ECzBI,EAAR,ACkCkB,CCxC9B,ADwCwB,CAAhB,EAA0B,GJxBlB,CAAsB,CKhBtC,KLgBgB,IKhBhB,CAAA,CAAA;ALiBa,AEgBL,ACvBA,AETR,ACOgB,ACRhB,ATsBK,AGRG,AG2BI,MCxCZ,AEDA,OLiCa,AIzBG,CLMF,CMdd,ANcQ,EIbR,ACOgB,CJyBR,AEQU,CFRC,CIzBH,EFiCM,CGzCtB,CDQgB,EJyBR,CEQU,CAAU,CFRC,GKjC7B,CLiCQ,AGhCR,AEDA,QFCA,WAAA,CAAA,CAAA,GDwCyD,IAAI,EAA3C,CAAN;AJvBH,AEgBD,ACtBJ,AEPJ,ACAY,ACFZ,AEHAA,AXAA,AGeK,AG2BI,MCrCT,AEFM,EEHEC,INYI,CDsBC,AI7BD,CGLZ,ENYI,AEPJ,CAAA,AILiB,CPkCT,ACtBoC,CDsBzB,AK/BA,CDEP,GJ6BJ,AI7Bc,ACFC,CJSnB,EDsBsB,ACtBgC,AITvC,AEHOA,CPkClB,AI7BkB,CCF1B,EDEsB,EAAV,AGLK,CAAgBC,KAAhB,EAAuB;AToBhC,AEeH,ACtBG,AEJJ,ACAI,ACJR,AEJI,AXDJ,AGiBI,AG0BC,MGtCL,ETLA,EWCUC,CRgBC,EDGE,AGPA,ELbb,COUgB,AJOA,CDGR,CAAU,AGPV,AIRR,ATLA,CKamB,AIRnB,CFII,CJQO,CDGH,AGPA,AEFQ,AJMM,CEJC,CMZCD,CXDxB,EKaQ,AEJJ,AJQuB,EEJE,AEFG,CIVFE,GRgBR,EEJd,IFI+B,GQhBf,GAAqBF,ARgBA,GAAvB,CAAX,EQhBwCE,ERgBE,GAAjD,OQhByC,IAAsB,EAA/D;AToBC,AEdD,ACOC,AEJW,ACCZ,ACFA,ANSH,AGZG,QFCI,GEDG,ECIK,ADJZ,CEKU,AFLA,CFCV,AEDA,CGIY,CFAA,ADJS,CFCV,AEDX,ECIY,ACCZ,ACFA,AHH8B,EEKR,ACDA,EFAV;ALaZ,AEfI,ACQJ,AELY,ACCR,ACFQ,AEPZF,ARMJ,AGFQ,QDSA,AFPR,EQNUG,GJQM,ACCH,ACFG,CJMZ,AFPJ,CCDe,AEDA,CDSc,CINb,ANDhB,CIEgB,CDJG,CFCC,AIIZ,ACFQ,CPaK,AKZL,ACCK,ELHrB,CKGQ,ACFQ,CLFD,AIIU,AGTrB,ALIW,CJgBX,AEfsB,AGGV,ADJU,CAAX,CJgBiB,ASpBJ,CLIC,CAAd,CEKP,AFLA,CKJJ,CPKI;AFgBA,AEfH,ACQG,AEVI,ACMP,ACDG,ACZR,APoBA,AGZK,MIRL,MLiBY,CAAC,AEVD,AEKC,CPYC,CQxBd,GLiBkB,AILV,CFLI,EEKS,CJKR,AEVkB,CFUR,CEVX,GLiBe,EGPd,CAAiB,CKjB9B,CRwBgC,COZC,GPYN,AGPd,CHOwB,AGP7B,CIL8B,CJKC,AKjBvC,GDYiC,CAAU,EAAtB,CAAb,CPYmB,CAAqB,AQxBhD,CAAA,CAAA,GRwB2B,CAAnB;AAEA,AEfJ,ACOQ,AELJ,ACEJ,ACFC,ACTL,ACCIC,ARgBJ,AGXI,MINJ,ENOQ,GONGC,ALKA,CJgBC,AEfR,CIIS,CDFC,CHFF,AEDR,CINJ,AJMgB,CJgBC,AKbT,AGTR,ACCI,CNac,AMbAL,ALKA,CEKd,CDFgB,CLaR,AMXa,CNWH,AGRA,ACRA,CAAN,CKLQM,CLKC,EDQP,CHQN,AGRgB,CHQC,AKbT,ADHS,CAAb,EAAZ,CKLA,CTqBQ,AIhBmC,CJgBvC,ASrB2B,CJQf,CLaiB,AKbV,IAAnB,WFK4C,MAAM,EAAxC,CAAN;AHSA,AEfJ,ACOC,AELD,ACEA,ACDJ,ACTA,APgBJ,AGXQ,WGIG,GFDG,CHFC,AIKH,AFNG,CJgBC,AQpBA,EDQZ,CHJe,CFCC,AIKH,ACF2B,ACTxC,EHQI,AGPkB,GNKX,AGEU,ADHV,CJgBH,AEfc,AEDA,CAAX,CJgBa,CMVhB,AFNiB,CFCrB,AIKmB,AFNZ,CAAP,GCGiB,ECGb,KDHa,ACIb,CDJoB,IAAxB,ACIS,UAAL,CAAgB,MAAhB,CADA,IAEA,KAAK,SAAL,CAAe,MAAf,CAHJ;ANYQ,AEfX,ACQG,AENH,ACMA,ACLG,ACTQ,ACARC,ARiBR,AGZK,MHYC,OOjBU,CLcF,AILA,EACF,CCVI,EDSF,AETK,CDAH,CRqBK,AOVT,ENMW,COjBP,APiBS,CDIT,ACJO,CDIG,CGPC,AFGC,EDIZ,AOZF,ANQS,CDIO,COTlB,ANKoB,CEHA,EFGT,CDIP,AOZF,ANQd,CEH2B,CAAU,GIDzB,GJCJ,EIDS,IAJT;APaK,AEfT,ACQI,AELJ,ACMA,ACDI,ACdA,ACAI,ARkBZ,AGZI,QFAI,AGGA,CJSR,EITI,ADHO,CFAP,CFaQ,AEbC,CCQC,AELH,CCMI,CFTX,CAAa,CFAb,AONcC,CTqBC,CEfO,CIStB,EAAuB,AFTvB,EKNqB,ARkBzB,AGZ0D,CHYhC,CQlBd,CLMiD,CDQhC,GFI7B,EAAwC,CGZpC,CDQgC,CCR2C,KDQvE;AHQQ,AEfR,ACQA,AELA,ACMA,ACDA,ACbJ,APiBA,AGZI,AQXR,MAAA,KXuBW,AWvBX,CAAA,CVWa,CCQC,AIAA,CFLC,ACMA,AFTA,GFAP,CAAW,CGGC,CLYC,AQpBH,CFcI,AFTA,CFAd,AKQe,CHRR,CJeC,AKZD,ADFH,CJcc,AEfA,ACQA,AELA,AJSA,GITlB,CEKsB,CPOd,AEfR,ACQuB,AGChB,ACDP,CDCwB,ALGrB,AGXQ,GHWgB,AGXb,EEQe,EHDX,CAAc,CGCzB,CAAP,CFRsB,CHWc,CAAxC,CEJsB,ACPJ,CDOd,AFIuC,AGXZ,MAAD,IAAY,OAAO,CAA/B,CAAV,CADG,EAEH,OAAO,GAAG,QAAQ,GAAR,CAAa,MAAD,IAAY,OAAO,CAA/B,CAAV,CAFG,CAAP;AJgBK,AEdL,ACOA,AQxBR,ANmBK,ACMA,ACDG,ACbA,ACDI,ARkBJ,AGTH,AQXD,MDRJ,MTiBY,ECOE,AIAA,CCbC,CIFE,CHCA,CEVjB,EHWoB,AIHhB,EVSkB,AURO,CVQrB,AOPe,ARkBA,CMJC,ACbT,CNMU,AMNA,ACDAC,ERkBjB,CAAoB,COjBb,ACDQ,ENcQ,AMdAC,CDCC,CDaC,ANIA,CU5BjC,CJwBQ,CJA4B,AMdb,ARkBK,COjBS,APiBA,CQlBzB,CRkBgB,CEJG,CAAU,AKbT,APiBS,CU5BzC,AHW0C,ACDAT,MNcX,CAAkB,AKbjB,CAAkB,GCDtC,CEVZ,CAAA,AFUuD,CNcN,AQxBjD,AV4BwD,COjBN,KPiBT,CEJQ,CAAK,AKbJ,CAAK,APiBU,CAArC,CAApB,UEJuB,AKbC,CLaxB,AKbA;ARqBC,AEdG,ACOJ,AQrBR,ANgBI,ACOA,ACDI,ACdH,ACDWO,ARkBX,AGRD,AQZa,MDLjB,ENgBQ,CLMA,EKNJ,ADCO,CCDC,COXK,CTgBH,AGEA,CNKC,CONC,AHLZ,CFHa,AGEb,ADCa,AQZA,EZuBE,AW5BnB,ANgByB,ADCN,CFHP,AISR,ACDI,AKjBS,CHEIC,CHgBK,CFNH,CDIC,ACJP,AQZA,CZuBQ,ASrBT,CLUU,GKVG,CLUC,CJWX,AIXF,CJWe,CIX5B,CKV8BC,CEPlC,APiBgD,EJWX,AGPA,EMdR,CAAb,CTqBG,CAAJ,CW5Bf,CX4B4C,OGPpC,IQrBR,CAAA,CAAA;AX6BY,AEdH,ACOD,AQrBR,ANgBQ,ACOA,ACDA,ACbJ,ACFS,ACTb,AT4BI,AGTI,AQhBI,MDDZ,ADFA,KT4BW,EIVE,AOfD,CToBE,CQrBd,ALuBe,AFNA,CGKC,CPMC,CKZT,CAAW,CCOC,AFNA,CDIC,ASpBT,CPeJ,CGPe,CIRA,CPeE,AEMjB,CAAkB,ACbtB,APiBsB,CDEd,AMLG,AIzBf,ANmBe,CJWa,AMLA,AEdK,AJQL,AQhBD,EPenB,AEMsB,CItB9B,ALuBe,ACDP,AKrBe,CNsBS,ALGrB,CDEC,AONqB,ANI7B,AWzBQ,EFHZ,ANmBmC,CDIC,CICC,AHLT,CEMb,ACDP,AHL8B,COjBtC,ALuBQ,AFNoB,EAAa,CAAb,CDIP,ACJN,CAAP,EDIsC,CQrB9C,CAAA,CAAA,IRqBqB,EOvBrB,CPuBwD,AOvBxD,YPuBQ;AHQC,AEdJ,ACQG,AQtBR,ANgBK,ACOA,ACDG,ACbA,AETR,AT0BC,AGTI,AQbG,IFJa,ECArB,QHSc,CLaC,AQtBf,CJsBgB,AGtBhB,KPsBQ,CIAA,AGtBR,CHsBuB,EJAE,GKbG,CLapB,EQtBR,ADAA,CHsBgC,AGtBhC,CFSiC,MGTjC,AJsBuB,GAAmB,KItB1C,AHS4B,CGT5B,CAAA,AJsB0C,ACblC,GDakC,GAAM,CAAxC;APOH,AEbD,ACOI,AQtBR,ANiBI,ACOA,ACDI,ACdA,ACFI,ACQR,AGtBJ,AZkCA,AGTI,AQbA,MDLJ,AEPA,EXsBQ,AGEA,AOZA,CXsBR,GGTY,CDIC,CDPT,AISU,AEfA,APkBd,AWtBI,CCZJ,AZkCsB,CIVlB,AEMY,AGPA,AEXY,CVUd,ACON,AQtBR,CRsBkB,CELF,AIVGF,ALWf,CEMA,AITA,ATYJ,AGToB,EEMM,AIRA,ATWW,CQpBzB,CNeJ,CICA,ACdiB,EJSrB,CDIwB,AICA,CCdC,AJSS,ESzBtC,EFOA,AJuBiC,ANIe,CAAhD,CELmC,CFKc,EMJzC,CM9BR,ATyByD,EOlBzD,CHSyB,CAAkB,AJSkB,CDIrD,IKbwC,AKhBhD,CAAA,ATyByD,CSzBzD,ATyBoE,COlBpE,APkByD,COlBzD,AHS2C,CGT3C,AHSqD,AJSkB,CAAd,CAArD,CITqB,CJSgD,CITf,WAAjC,CAAjB;ARqBJ,AEdI,ACOA,AQtBR,ANiBQ,ACOA,ACAA,ACdA,ACHC,ACQO,AGtBhB,AEAA,AdkCI,AGTI,AQbA,MDLR,AEPA,AEAA,EdkCQ,CDEC,AShC0B,INyBtB,AGEA,AITG,AEVH,CRaC,CJWV,AEdW,AGEA,AGPA,AKjBf,AEAA,CR+BgB,CPKK,AGPb,AOPQ,CPOE,CGEC,CKxBnB,ANiBoB,AKFJ,CTYK,AWtBb,CVUO,ACOP,AFKJ,AGTkB,AQbA,CTiBC,AU7BvB,AEAA,CPiBwB,AEKR,ATYQ,CCZT,AGEA,ACOP,ACAA,AKnBA,CVUW,AGEO,AOZA,CRaC,CDInB,CGEqB,CHFC,AKZf,CNKS,AMLQ,CKjBhC,AEAA,AXyBsB,AQbd,CCZR,AEAA,AXyBiC,CCDzB,ACO0B,CJTnB,CCOP,AQtBR,AHU+B,CNKD,CAAf,AEGuB,EIRI,CFclC,AFNc,CFHa,CISQ,AFNA,COlB3C,GTewC,EAAhC,CML4C,AJQ9B,EAA8B,GIRK,EGVzD,CAAA,CAAA,AHUe,AJQO,CIRd,AJQA;AJYA,AEdH,ACQG,AQvBR,ANiBK,ACOO,ACAJ,ACdH,AEXO,AGNZ,ACDA,ACIA,Ad+BQ,AGTA,AQbH,MDLL,AEPA,ACDA,ACIA,OLGY,CV8BE,AIXA,CDKC,AU9Bf,AZkCe,CKHC,ACAA,COhChB,CJOY,AKHZ,CZ2BQ,AQvBR,AJwBQ,AQ5BR,CR4BoB,ANGA,AGTA,CGMZ,AGzBY,CV8BE,CMLC,ACAA,CAAf,CGzBgB,AT4BT,AGTU,CGMC,ANGA,CDEC,CU9BP,EAAR,ANmBQ,CJWE,AapCtB,AZkCe,AGTgB,CJWC,AMLhB,ACAR,ANGA,CKHyB,AQhCjC,CPgCkC,CIxBlC,AJwBQ,CHN4B,CGMC,EPKf,AMLN,AO/BhB,ATyBoB,CJWoB,AML5B,CQhCZ,AV0ByC,CEMC,CKxB1C,CJwBqC,GPKG,AOLhC,CM/BR,ATyBoB,CSzBpB,CAAA,ATyBkD,EU1BlD,CAAA,CdqCwC,AcrCxC,CdqC6C,AW7B7C,CAAA,CAAA,APkBoB,CAAZ,cJWc,CAAd;AACA,AEdJ,ACQC,AQvBL,ANiBI,ACOY,ACAR,ACbJ,ACJIG,ACOA,AGpBR,ACAA,ACGI,Ad8BC,AGRG,AQbJ,MDNJ,AENA,ACAA,EZqBQ,AGEA,GGNG,AILA,ERaE,CJUC,AEdV,CAAW,CGEX,AEOY,AM9BhB,AEIgB,CJEhB,ANiBiB,AGNb,ACJaC,ALYA,AQbb,EJKmB,AILQ,CVS3B,AKSI,AQ3BJ,CDHJ,AVyBqB,CFJD,AGEhB,ASvBJ,ACKgB,CTyBO,CDPO,CIVtB,CTsBkB,CMLV,AGjBW,ALYA,CWtBvB,AXsBI,EWpBiC,AXoBX,ESzB9B,CbmCiC,AW7BjC,CPmBkC,EJUR,CAAW,CIVC,CAA9B,CJUkB,AanC1B,CbmCyC,AW7BzC,APmByC,GAAjC,EJUsC,AIVA,IJUL,AanCzC,CbmCmD,AW7BnD,AENA,CFMA,AENA,CFMA,CX6B0B,CAAlB;AACA,AEdA,ACSJ,AQxBJ,ANiBQ,ACOK,ACAL,ACbA,ACJI,ACQR,AGnBJ,ACII,ACHY,Ad+BZ,AGTQ,AQbJ,MDNR,AEJA,IZgCU,ESbE,CRAC,ACSA,AEPA,AUpBG,AHSH,CZuBC,AQlBA,CEIV,CCfJ,AJwBgB,AOvBA,CZcR,AORSC,ACQI,AKlBL,AXsBC,CCFT,AQrBR,CV4BI,AEPe,AQrBnB,CXmBoB,AYfhB,ACHY,CfgCK,AGLa,AFIb,AGTA,AQbb,CLkBA,AOtBA,AFIc,CLkBC,COtBb,ACLM,CXsBS,EFJL,AGEZ,CGNoB,AILpB,CLkBA,AKlBqB,CPWC,CLYC,AEdX,AKSW,AEjBnB,ALYmB,CFJN,ASfzB,APmBY,CIRqB,CCJC,ALYA,CCF1B,AOXA,GLkBA,ANI8B,AGTA,CKZ1B,CPQqB,ASfjC,AGEQ,EViBkC,CJUrB,AIVT,CJUgC,CEdN,AYbiB,AViBV,CHSxB,CCbD,AMJQ,AMXxB,Ab4BA,CCbI,AEII,CJUS,AW7BrB,AHWQ,AMTiD,Cd2BjD,AW7BR,APmBkD,COnBlD;AX+BQ,AEfH,ACSG,AQvBR,ANgBK,ACOI,ACAD,ACbA,AEIA,AGhBJ,ACCY,ACHA,AEThB,AhBwCI,AGTY,AQbX,IDLD,EMbJ,KhBwCW,EDEE,AW7BA,AGDG,ACHA,CZ2BF,AQvBd,AHUc,CEIC,CHSC,AMxBA,AIZhB,AhBwCgB,CDER,Ac9BQ,AGZhB,CjB0CkB,CejCF,CLkBI,AGhBhB,ACCY,CXwBK,AFIV,CMJH,AMvBA,AEJQ,Ad+BM,AGTA,CJWd,AONe,CPMC,AONhB,AOxBQ,CNWS,AEIV,CHSW,AGTA,EVelB,AGNoB,AY3BZ,AXsBY,CMJb,AGhBX,CLY0B,AEIA,ATaA,CY3BP,ATkBD,CAAU,CMJjB,CFJU,AEIjB,ANI0B,CGKC,ACbA,AJQH,EAAK,CGKX,ACbD,APiBd,AGTqB,CDKxB,AKb+B,CJQjB,CGKmB,AHLzB,CHS0B,KOjBjB,CDajB,ACbwC,EPiB5C,KOjBmD,GAA9B,CAAjB;ARoBH,AEND,ACCI,AQxBR,ANiBI,ACOI,ACDA,ACZA,ACLI,ACQP,AGhBW,ACNZ,ACII,ACTR,AC6BI,AhBWH,AGTY,AQZT,MDNE,AKbN,IX8BU,GQnBM,ACNZ,CHQmB,CTuBX,ACCG,AEPX,ACOW,AEbA,AQxBf,CToCgB,AUNA,CZAO,AIXN,AIRD,CCNZ,EXgCgB,AGAZ,AO1BQ,CFEsB,AGRlB,CP+BZ,CAAe,AEjBA,AOnBvB,AJmBoB,CLiBI,AMzBR,AIkBZ,CdQW,AMlBUJ,AKdrB,CXgCsB,AQxBH,AMiBqB,CTNjB,ELaZ,AQxB+B,AFMvB,CNkBO,AIDtB,CIvBR,AFM+BC,CFiBC,ASpChC,CAAA,CbqCe,EMlBQ,EAAeI,CNkBC,AID/B,CJCA,CKbiC,CCLlB,EAAX,IDKoC,ACLAb,IDKxC,OCLI,EAAiD;ATyBzD,AEPI,ACCH,AQvBL,ANgBQ,ACOH,ACDG,ACZH,ACLW,ACSZ,AGfI,ACRI,ACKR,ACVJ,AC6BgB,AhBGhB,AGDS,AQZD,MDLR,AKdA,EfgCA,EUlBA,CAAA,CDcY,CGfC,ACRD,AGwBI,AhBGhB,CCIc,AGNA,CLaC,AUfX,AM5BJ,AJmBe,CLiBC,ANJhB,AWbgB,CFSO,CGff,CDMW,EZwBf,ASxBiBS,AINA,AEHH,AEmBF,AhBGhB,CSJI,CVeuB,CEPH,AGNA,AKFY,AIvBxB,AGwBI,ALVQ,CLiBhB,AMvBiB,CJMT,CKdU,EZ+BG,AGNA,CIXCE,COnB9B,CFKY,AGwBI,ALVD,CViBS,AGNA,AQjBC,ADMjB,CViB0B,AGNA,KIXKH,AOnBvC,CHaqB,CXuBG,AGNA,AQjBO,CXuBW,AGNA,CIXZ,CAAd,IINK,AGbrB,CdoC0C,AGNA,AQjBlC,AGbR,CAAA,MdoC0C,AGNA,CHMK,AGNA,UAAvB,CAAhB,OHMgB,CAAhB;AFQA,AENA,ACpCR,AQwBI,ANKI,AC9BR,ACoCQ,ACXJ,ACNY,ACSR,AGfH,ACRO,ACKJ,ACPR,ACJY,AbgCP,AQZA,MIhBL,ONyBa,AIvBD,AGNA,CjB4CE,AKbA,AUpBA,Cb2BC,AMZA,AQtBf,CLuBe,AJUC,AQ1BA,ACPhB,ENyBQ,CAAW,AO7BP,CfsCQ,AKDZ,AQ1BM,CJgBM,ANIC,AGLjB,ACNiBK,CTwBC,AUfd,AIvBI,ACKU,AEXD,CT0BM,AEGJ,AO7BX,CfsCG,COlBC,AKdQ,CTyBE,AKFlB,CVemB,AENA,CQTC,AKlBd,CJeV,AFNyBF,AKdD,CTyBP,CLaC,AWjBM,ANIG,CLaC,ActCR,CJuBhB,AKlByB,Cb2BzB,AYhCI,CTyBJ,EUpBA,CNS8BH,CTwBhB,CAAkB,ESxBX,CAAb,ITwBwB,OAAA,CAAK,mBAAvB,CAAd;AACA,AENH,ACrCL,AQyBe,ANKP,AC/BR,ACsCQ,ACZA,ACNK,ACSR,AGdD,ACHI,ACDA,ACMJ,ACjBQ,Ab0CR,AQrBA,QTpBJ,AGDA,AF0CQ,IS3BI,CFWG,AGdF,AGZD,CjB4CE,AKbA,AGLA,AOfA,AX+BV,CDzCJ,AQyBe,AL1Bf,CCsCgB,AQ3BA,ACOA,CZwBF,CDzCd,AQyBe,AL1Bf,AMqBkB,CKrBN,CN0BG,AEXX,ACHI,AEKJ,CDNU,CFIc,AGIpB,ACnBa,CZ+BE,AEOf,AO1Be,ACDA,AEXD,ALqBlB,CIFM,ACnBE,CT0Ba,AILM,CZuBL,AG3C1B,CE8B2B,CSnBC,CCDd,CPegB,CF1B9B,CD+BgC,CLaC,CQlBR,AOfS,ACQ1B,CXYmB,AGLQ,AMdZ,CdgCG,AKbU,ASnBA,CdgCC,CQlBZ,CAAc,AQPI,ChByBjB,AchCH,ACDf,CfiCiC,AchCA,AEKrC,EXcuC,AWZE,EFPtB,CdgCuB,AchCtC,CNciB,CAAuB,ERkBP,AKbd,CLawB,CKbC,CAAzB,CLaD,AKblB,CLaA,AQlB+C,GAA9B,CAAjB;ARmBA,AELJ,ASzBQ,ANiBJ,AEOH,ACZG,ACNC,ACUL,AGfI,AKjBR,AJcQ,ACDA,ACMQ,ACjBJ,Ab0CJ,AQrBA,MMvBR,GTGmC,GPsC1B,CSzBG,AGFC,AEKG,ACjBJ,CjB4CE,AKbA,AGLA,AKXA,AEJA,AHUA,CRqBC,EYzBC,EEnBhB,CFmBgB,AZyBI,CJEC,AW9BT,AECS,AT2BN,Ca1CH,CLqB2B,CDPhB,AGFf,AEKQ,CHFS,AEJA,AEXD,ALqBhB,CRqBkB,CU9BC,AV8BZ,CO5BY,AHYC,CHKC,CUpBC,AEXlB,CjB4CmB,AIFA,CS3BN,ACHO,CNcC,EHKE,AajCnC,Cd4CoC,CIhBR,AJgBG,CIhBO,CGZX,AECN,EAAb,CLWoB,AJgBc,CJErB,AKbQ,AajC7B,AJc2B,AV8BnB,CJEoC,AKbA,ASnBA,CNcC,CGZtB,ANiBuB,AUpBrB,CJGe,CGFb,ACDnB,CfiCa,AKb4B,ASnBA,CdgCzC,CW9Be,CAAX,AHYwC,CMdzB,CAAnB,CTmBoC,AajC5C,CV4BQ,AU5BR,CbiCyD,AajCzD,GbiC4D,MAAhB,EAAf,CAArB;ALeA,AENA,ASzBI,ANkBJ,AEhCR,AC2BQ,AEGJ,AGdI,AKlBR,AJcQ,ACDA,ACRI,ACHR,Ab0CC,AQpBG,MMxBR,OlB+Ca,AW/BD,ANkBC,AQhBA,ACJA,AETD,ACHR,ALsBS,CViBC,Aa5BA,CPgBC,ERkBP,AW/BI,AEEJ,Cb6BU,CKbV,AOVW,CDRA,ANkBC,AQhBA,AGbR,CCHR,CCFJ,ClB+CQ,AcjCA,AETc,ChB0CE,AENA,ASzBD,ANkBf,AQhBgB,AELA,AEXT,CZgCU,AOVjB,CEVkB,CNeC,AQxBD,ChB0ClB,CENqB,AevCzB,ALsByB,CInBP,CLWC,AEEC,AELO,CCRnB,CdoCY,CAAU,AUjBA,GPU1B,AQhBgB,CFFL,AHaX,AKXuB,AKlB/B,CPgBgC,AEER,CAAhB,CXuBgB,Aa5BA,Cb4BkB,Aa5BA,AHWlC,CDRW,CAAP,ACQgC,CET9B,CIfd,AHawB,CAAhB,Eb4BkC,CY1BvB,MZ0BuB,CAAK,IgBzC/C,CAAA,CAAA,IJec,CAAuB,IAAvB,CAA4B,EZ0BlB,CAAhB,CY1BM,CADY,GAEZ,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAFN;AdkCH,AENG,ASzBI,ANkBP,AEjCL,AC4BK,ACPGM,ACUJ,AGdI,AKlBR,AJgBK,ACFG,ACMA,ACSA,AbkBJ,AQvBQ,AO5BZ,MDIA,ACJA,EZKA,AH8CQ,KO/BI,AEEC,AGEA,ACSA,CfYC,CKxCd,CMiBQ,AEJQ,CXiCZ,AenDJ,CZKA,AKuBkB,CCNC,AKlBnB,AD6BQ,CbkBS,AQvBG,CHFC,AGEH,CDRN,AMaU,CDTd,AJIe,CAAL,CDRM,AIFhB,CAAkB,ACMA,CdqBC,AWvBnB,AEJA,AEemB,ENbC,AIFC,AHUA,CLvB7B,AQaQ,Eb2BwB,Aa3BA,CEeV,AEjCtB,CFiCkC,CC7BlC,ANwBmC,CIJ3B,CdqBmB,Aa3BnB,Cb2B8B,AeZhB,CFfiB,AEeA,ALLV,CAAW,CDRZ,AQpB5B,EjB6C2C,AgBzC3C,AD6BsB,CAAd,CFfA,Eb2B8B,AUjBS,CDRvB,CAAkB,CCQb,CViBsB,AUjBvC,EDRY,CAAZ,COhBZ,CAAA,ACJA,CDIA,ACJA,CAAA,GjB6C6D,CAAvB,CAAX,CAAnB;AFxCR,AEyCQ,ASzBI,ANmBR,AEMJ,ACXI,ACRQ,ACWR,AGdI,AKnBR,AJiBI,ACFI,ACKH,ACSA,AbkBG,AQvBI,AO3BZ,MDGA,ECHA,CZ4CA,GHMY,CO/BA,ANmBC,AQhBA,AEJA,Cb0BC,CQRF,AIhBA,AKpBZ,CVyBgB,AStBhB,CTsBiB,ALyBA,CIjBC,AINA,AO3BH,CJkBI,CR0BnB,AKjBoB,CDRR,AJyBS,CEnBCF,AIHd,CNsBR,AMtBuB,AT4Bf,CO/Be,ANmBC,AGLpB,AINc,CLiBa,AQ1BvB,AXgCiB,CIjBK,CKXtB,CXsBoB,ASzBD,CNmBE,AUpBA,AHSA,GMxB7B,ChByCiC,EUjBrB,CHFA,CJaR,AUpBI,CNO8B,CPmBV,ASzBD,ANmBU,AUpBE,CGfvC,EhByC0C,ISzBnB,CAAiB,EOhBxC,CAAA,CPgBuB,AOhBvB,ChByCQ,ASzBI;AXhBZ,AE0CQ,ASzBI,ANmBJ,AEMJ,ACXI,ACRQ,ACWR,AGbA,AKpBR,AJiBQ,ACFI,ACTR,ACLA,Ab8CQ,AQvBA,AQ9BZ,ADII,MDEJ,AENA,EpBKA,AgBOgB,ACLR,CEHC,CZ2CC,CY3CN,ERkBQ,AMfR,AEHe,CjB2CL,AGNA,ASlBA,CdlBd,AQ+Be,AEGA,AGbA,AO1Bf,CNuBgB,AGhBH,CCDb,ClBDA,AYyBkB,CDRN,AJyBO,AGRX,AGbA,AELW,AXgCA,CIjBC,AMbN,AV8BF,EO/BS,AKVjB,ERwBW,CNWU,AGNA,AGLA,AMbA,ACFb,ACTkB,CLUL,AIDC,Cb0BlB,CUjBoB,CJMb,AMbP,CdlBR,AKoC8B,AEMA,Ca/C9B,CZoCgC,AINA,CLiBb,AWzCnB,AHeY,CVoBa,AEMS,CIzBT,ANmBU,CEMhB,AKjBS,CLiBxB,ECXmC,AYpCvC,CR8BwC,CMxBxC,CPgBqB,ANmBI,CMnBW,ANmBO,AGLnC,CINoC,GDRvB,CAAT,ACQA,EPW+B,CanC3C,CAAA,AENA,CFMA,AENA,CAAA,GfyC2C,CAAK,QAAvB,CAAjB;AHQA,AS1BI,ANmBJ,AEOJ,ACZC,ACRQ,ACWR,AGbA,AKlBL,AJeQ,ACFC,ACTD,ACLA,Ab8CC,AQtBG,AQ/BZ,ADIQ,MDIR,AERA,EbgDQ,EWxCR,CAAA,EhBwCa,AS1BD,CNmBE,AEOV,AOzBU,AKnBA,CHQC,ACLA,CVyCC,AOzBA,AFQA,CViBC,AkBhDjB,CTsBY,EMfQ,CfyCC,AS1BD,AGCN,AKnBO,CjB4Cb,AcpCO,EdoCS,AGPA,CMnBA,AKVT,CFWW,AEXP,ACLX,CLwBmB,CViBC,CGPC,AW7BP,CFWd,GHDgB,ANmBA,AezCxB,CfyCkC,AW7BP,AJmBO,AO3BA,GP2BP,CViBnB,AUjB8B,EViBE,AS1BpB,CAAc,ANmBV,AW7BF,AIZtB,ADIqB,CdqCqB,AW7BP,AGRO,CjB4ClC,CiB5Ca,CjB4CwB,AS1BzB,AQlBZ,CRkBI,AKVU,AJmBK,CAAoB,CInBhC,CX6B2B,AW7BlC,GJmBmB,IPUe,AezC1C,CfyC+C,AOVU,AQ/BzD,CAAA,GR+BY,EAAmD,IPUvC,CAAhB;AHQI,AS1BA,ANmBJ,AEOA,AC9CR,AEsCI,AGbA,AKPA,AJII,ACHH,ACTA,ACLA,Ab+CG,AQvBQ,AQ/BhB,ADKQ,MCLR,MNwBY,AV8BA,COhCA,ADkBC,AIhBA,AV8BA,CCbC,CEOC,AMrBA,AO3Bf,ADKe,CdoCC,AapBA,CPCJ,AEKR,CXqBc,AYxBA,AV8BA,CS3BO,CFLN,ANmBL,CEON,AGRJ,CQpBA,ACfkB,CTmCiB,AIhB/B,AFOe,AQ/BvB,CTsBuB,ADkBoB,AQlBnC,CbmBiB,ASjBA,CZwBC,CUjBV,AO1BW,CfiDnB,AQvBoB,EViBE,AGPA,ADaA,COhCP,AOFnB,CCfkB,CDkBd,AClByB,CdoCzB,AOVQ,CMPJ,CExBZ,CAAA,ADKsB,CjB2CQ,AS1BX,CAAa,AQjBO,IRiBpB,ET0BO,AS1BY,CQjBhB,CjB2CV,AiB3CG,CDmBU,EPFkB,AQjBO,CDkB1C,EAEI,CCpBJ,CRiBW,CAAP,GOCJ,KAGiB,EANrB,EAMuB;AhBuBf,AS1BA,ANmBJ,AEOH,AC/CL,AC2BY,ACaR,AGdI,AKPQ,AJIJ,ACFR,ACTA,ACNA,Ab+CQ,AQvBC,AQ/Bb,ADKK,KANU,CCCf,EZCA,AQYgB,ACNR,KNeI,AOFI,ADbZ,CZkCU,AQdA,AIpBA,CTNd,AYDA,EX4BiBA,ACaH,ANaG,CFNC,AM/ClB,AEwCmB,CCnBP,AOFI,ADbZ,EJoBiB,AIpBF,CNeE,AOFL,AHEM,ACTlB,EdmCQ,CWrBa,AGdK,CLSL,AIArB,Cb0BuB,AEMf,CIrDZ,AUmBgB,AHEgB,EXgCF,CCbC,AIbnB,AW5BZ,CP2ByB,EJCS,CENT,ANmBU,ADaA,GFNvB,COpBA,AIDS,AO3BrB,CP2B8B,AT2BA,CAAW,COhCpB,AEKA,CFLe,ANmB5B,AQdA,GT2BsC,COhCzB,APgCS,EOhCY,APgCO,GgBtDjD,CAAA,CTsB+C,APgCO,AgBtDtD,ChBsD8B,CAAlB,GOhCS,CAAT;AT2BA,AS1BA,ANmBJ,AEQJ,AG/CJ,AG0BQ,AKFA,AJFC,ACFD,ACTA,ACNA,Ab+CC,AQvBA,AQ/BT,ADMI,CTJJ,KUFA,GDMS,CZ2CC,EU1CE,CNeA,AEMC,AKFA,AHJA,CVmBC,AcnCV,CHOW,CGPI,CjB0CF,EgBtBT,CPJI,CJ2BS,CMrBb,AKFc,AFbP,ACNO,CNeA,AEMC,AIrBX,CfyCA,CAAa,AcnCV,CAAI,AIbnB,CTsB0B,ANmBC,AQbnB,AIrBmB,CCmBnB,CHJA,ACTc,CdmCV,Aa1BkB,IVmBI,AUnB1B,ACTmB,EToCvB,CI3BsB,AMfW,CAAC,CAA9B,EZkCA,AW5Bc,ACNmB,CDMN,AIbnC,ETsBsB,EAAV,AKTU,EAAP,CAAP,CIbR,mBAAA,CAAA,CAAA;AlBiDY,AStBJ,ANeA,AEQJ,AErBQ,ACtBR,AGuBI,AKHA,AJDA,ACHA,ACTH,ACNO,AbgDJ,AQvBA,AQ/BR,ADKQ,WTAJ,CADC,CQqBQ,AHJA,CJIC,ANeA,AShBA,AKnBA,CZ2CC,AMpBA,AT0BA,AQvBA,EHJE,CFqBb,AU1Cc,CNmBC,AJuBA,AMpBX,AMvBW,CfiDC,CFPC,AStBb,AJuBJ,AWvBI,ANMA,CEPc,AGlBA,CZkCC,AEQA,AErBA,CSFC,ChBsBZ,AStBa,AFEAH,CPoBC,CezCR,CCmBU,AJDA,AGlBA,CNmBpB,CFEe,AL2Bf,CFPI,AKCR,AG5CC,AKiBG,CNMwBI,AMNA,INMT,AMNf,AIhB4B,EVsBxB,CSFgB,CbeY,AcnCA,CTApC,AImBkB,CLGoBb,ACtBtC,AImBsC,CTgBnB,CcnCa,CFCS,CZkCC,AaftB,ACpBL,CDoBsB,AJDM,AKnBvC,GFC0C,CCmB1B,CJDF,AGlBJ,CRqBN,ASFmC,AJDvC,AGlBI,ERqB2C,IJaI,CafnC,CAAhB,CbeA,CKnCJ,WAAA,QAAA;AR2CK,AStBD,ANgBA,AEQJ,AEtBY,ACpBZ,AGqBC,AKHG,AJDA,ACHH,ACDD,ACdK,AbgDJ,AQvBA,AQ9BL,ADIQ,SHeC,ET6BE,AG1CP,CADC,CCmBQ,ANgBA,AahBA,CJDC,AKnBA,CHeV,AInBC,EJmBkB,ET6BnB,AahDJ,EfwCQ,AIdaS,ASFb,ACpBa,CCJhB,CTwBG,CNgBgB,AahBA,AJDA,ELGR,AUtBU,EDoBE,AJDA,ELGE,CCrBzB,AIkBmB,CAAQ,CTiBC,ASjBC,ELGCI,AUtBd,CLmBgB,AKnBD,GVsBN,ASFF,CTEZ,CJcQ,AKlCpB,AIiBsC,AKnBrB,CdoCqB,AKlCtC,ASFI,EdoCoC,EahBpB,CbgBuB,AahBN,GJDT,CICR,CJD6B,CTiBX,AahBK,EbgBQ,ASjBC,GTiBE,CahBlC,CAAhB,AJDwB,CAAR,CAAhB,CJjBJ,CLkCsC,EAAlB,CAAhB,IKlCJ,QAAA;AR0CI,ASvBH,ANgBA,AEQJ,AEtBY,AClBT,AGoBQ,AKJJ,AJAA,ACHI,ACFJ,ACbA,AbgDJ,AQvBA,AQ/BA,ADKI,QfiDA,EgBtDE,CVQN,CADC,AMYO,Cd4BC,AgBvBA,AJAA,AGlBA,CJsBS,CT0BlB,EFPI,Ac5BS,Cd4BC,AWnBN,AKJJ,Ad8BO,AQvBG,CEPC,AGlBX,CJsBwB,CKJX,AHHQ,AKrBzB,ADKiB,CjB0Cb,AezCc,CfyCC,AYvBf,AFOJ,CIZQ,CEKa,AHHb,ACFa,AJYQ,EEPN,ACHY,AEf/B,CEDA,CAAqB,CjB0CrB,CQxCH,AMYO,AJYR,AO1BI,CjB0CwB,Ac5BxB,CEKiB,ANOsB,AO1Bd,CLmBzB,AEL0B,EFKE,CKnB5B,GjB0CA,AgBvBa,CRhBjB,AQgB+B,CRhB/B,GQgBiB,EAAoB,EAAE,UAAF,EAApB,CAAb,CRhBJ,OAAA,QAAA;ARwCI,AStBJ,ANgBA,AEQJ,AEvBS,AChBL,AGkBI,AKJA,AJAI,ACHJ,ACFI,ACbP,AbgDG,AQvBA,AQ9BJ,ADKI,SZ2CR,CahDU,CfwCF,AK/BJ,CADC,AN6CO,CFPC,AWnBA,AKJA,AHHA,AIfA,CPyBC,CDNF,CTsBJ,CYvBS,AELA,AZmCA,AgBrDA,ADKT,EDkBA,AHHW,CFOX,CAAa,CNqBrB,AWzBsB,Cd8Bd,EGLR,AS9BY,AZmCa,AQvBA,CMPC,AHHlB,ACFkB,AIlBA,EP2BL,EEPS,CLZzB,AMU0B,AJYA,GEPnB,AFOa,CCHJ,AKJK,AJAS,ACHA,AHUA,CCHT,CDGW,CIZX,CFKd,AEL2B,AIlBtB,CR8BuB,AQ9BA,CVSpC,CAAA,AQckB,AFLI,CEKW,AFLM,GJYR,AQ9BlB,CAAb,CFuBsC,ANOM,CIZtB,CAAd,CJYuC,CMPd,CAAU,AHHjB,CAAwB,CFO9C,EAAuC,AKJV,ANOF,CCH3B,AKJ4C,CHHO,AHUlC,CAAjB,EMP6B,CRdjC,AQckB,AHHgC,CGG9C,AHHwD,KAAlC,CAAtB,EAAgE,GLXpE,QAAA;ARuCI,ASvBA,ANgBA,AEQJ,AGtDiB,AGiCb,AKJA,AJAC,ACHG,ACFA,ACZR,Ab+CQ,AQvBJ,AQ9BJ,ADKC,KAfU,GFgBP,EV0CE,AahDA,EVNoB,CGiCjB,AKJA,CbiBC,AOVA,CViBC,ASvBA,EIJE,AEdb,CV0Cc,CHKC,CS1BX,AIrBS,Ab+CL,CS1BS,CO3BC,ClB+Cd,AQrDsB,AEoCP,CDNC,AD/BvB,AQ8BO,CXyBU,AQ5BN,CAAc,CGGC,CbiBC,AQbP,CFHQ,ACMA,EDNE,AJwBb,AWzBa,AHHA,AKpBA,CbgDN,AKlBF,CPUU,AEQf,AKlBe,CDNzB,AIJI,CR4BgB,AMrBP,ADGc,CCHT,AEPU,CVoBR,CAAU,AOVA,KLkBpB,AGvDjB,CHuDG,AMrBI,AEPoC,AHUX,AQ9BX,CfwCM,AajBG,AEvBc,CfwCC,AQbV,ADGU,CGVlC,EL1BkB,AGiCtB,AEPyC,AHUA,CFpCnB,EAAT,AQ6BM,CbiBmB,AajBC,ENOd,CQ9BX,CFuBK,ANOJ,AQ9BnB,CR8BI,CMP6C,CbiBP,CAAK,AK9CrB,CAAT,WL8CO,CAApB;AHQH,ASvBA,ANgBG,AEQJ,AExD+B,AImC3B,AKJI,AJAP,ACHW,ACFP,ACZD,Ab+CC,AQvBD,AQ9BJ,ADMA,KVdA,KFwDM,AahDA,CDMC,CdkCC,CQbC,AMrBT,CPwBU,CKxBC,AEAQ,CZ0CP,EGvDK,AUOH,EP2BV,AIrBY,CJqBC,CNqBC,AY1ClB,CdkCmB,AUpBA,AHUgB,COxBD,CFAvB,ALwBP,CGXyC,CKnBtB,CfwCC,AQbP,ENqBL,AWzBc,ADjBA,CV0CC,AU1CvB,EV0CQ,EAAmB,AMrBd,CRab,AQbkB,EKJY,EEvBpB,CAAuB,EbgDzB,CAA4B,CAA5B,EAA+B,CWzBjB,AEvBZ,CAAd,CbgDY,CAAZ,EMrBI,EAAqC,CAArC;AXsBJ,ASvBA,ANgBI,AEQJ,AExBH,AIEO,AKN6C,AJGjD,ACJY,ACDR,ACbH,AbgDG,AQvBA,AQ9BJ,ADKI,CVpBR,QSmC2B,ChB2BpB,AgB3BC,AEpBE,CbgDC,CS9BC,CLMF,ANgBG,AQdA,ADIA,CRuBC,CGLC,CHKC,CU9BC,AV8BH,CGLI,AahDA,CfwCC,ADaA,AQvBA,CLkBf,AMtBI,AT2BM,CS3BO,AGRA,AGbA,ELkBjB,ACJmB,CVqBf,CSjBkC,AV8BjB,AQvBjB,AQ9BiB,CJkBC,EXsBE,AQdP,AMrBb,CfgDA,AQvBqB,AOzBA,IdmCI,COVC,CCJb,AO1BjB,CP0BsB,AMrBlB,EAA8B,CdmC9B,CWtBA,CXsBiC,CWtBC,AJYlC,EAAoC,KCJpC,EAAiC,AMrBU,ENqB3C,KMrB8B,CAAqB,EAArB,CAA9B;AjB2CA,ASvBA,ANgBI,AEQX,AMtBO,AKJH,AJCG,ACPyC,ACErC,ACZR,Ab+CI,AQvBI,AQ9BR,ADKC,KAnBU,GFoBP,EGNE,ENuBE,AV8BA,CFNC,AWrBA,AEVD,EJQJ,CKNQ,CFKC,CZwBT,AUjBU,CViBC,AezCf,AGNe,CP0BX,ADIY,CCJC,AT2BA,CO7Bb,AMlBW,CZkCI,COVL,EViBV,AEMkB,AgBrDA,CJkBC,CLMnB,AEEa,ACHb,AELI,Cd6BiB,ASvBrB,ACMqB,CEPC,AELA,AZmCT,CO5BT,AP4BmB,CCbC,EHOxB,CGPe,AQdF,AT2Bc,AQvBvB,CPUwB,AQdV,AT2BL,CAAb,AgBrDW,CTyBA,ESzBqB,CfwCjB,AexCnB,CfwCQ,EMhBJ,EAAA,AEEA,EFAO,AEAuB,GAA9B,EFAY,QAAL,EAFP,CAAA;ATwBA,ASpBH,ANaI,AIhBThB,AIEQ,AKzBJ,AJsBQ,ACJH,ACDO,ACZR,AbgDA,AQxBI,AQ7BR,ADKA,QVkBIkB,ASvBA,ECKD,EfgDK,AgBrDA,ClB8CC,AWrBA,AKzBT,EDKW,AGLX,CFAS,AEAG,ClB8CR,CAAU,AOvBlB,AGMkB,AQ7BA,CNsBC,CDGX,AIpBY,CRkBC,AIEA,AT4BA,CFPb,AEOA,CFPe,AkB9CP,CNsBJ,AELY,AZoCA,CahDT,AGLU,CR6BC,EViBlB,AWrBa,AGRL,CAAa,Cd6BC,AOvBAA,AQlBA,CAAC,AGLf,CHKR,CGLJ,ElB8C+B,AWrBd,ADIc,CCJT,EDIA,CViBlB,AUjB+B,CHNlB,CAAoBV,AGMA,GAAG,ICJpC,ADI+B,EHNlB,AIEmB,AGRxB,AJYkC,EHNEW,AIE5C,CDI6C,EHNhC,EAAoC,AGMlB,EAAb,CAAd;AVkBP,ASnBD,ANaI,AIjBJ,AIEI,AKzBA,AJsBC,ACHD,ACFK,ACZR,AbgDO,AQxBA,AQ5BR,ADII,QCJA,EXsBEjB,EJiBE,CQfC,CENC,AIdA,CDLC,AECA,GXsBGM,AGMA,ECJV,AKzBY,AECA,CfuCC,AQfA,AMpBA,CfgDC,CgBpDP,CR4BS,CQ5BpB,EhBoDuB,CK9BCY,AIEP,AKzBN,AHmBa,AIdA,CDLC,AdqDjB,CCbA,COXmB,COxBV,CdmCY,AUrBA,AIdA,CDLzB,AN6BgB,CCJH,ADIc,CCJT,CDIW,EHNjC,CGMoC,IPWhC,AOX2B,COxBd,CdmCyB,AOXA,AOxBtC,CJcoB,EAApB,AHUyC,IAAd,CCJ3B,CDIgB,CCJsB,ADIlC,ECJJ;AXuBI,ASpBR,ANaQ,AIjBR,AIEI,AKzBH,AJuBG,ACHA,ACFI,ACZR,Ab+CK,AQxBG,AQ5BR,ADKI,QFAA,ERiBEjB,AWtBA,ElB8CU,AiBzCR,CNmBC,AELA,AIdA,IjByCD,AYxBK,AELA,CJWC,AQ5BA,ADKA,CjByCa,CWtBvB,AInBJ,ALuBgB,CCJC,ADIH,CIXN,CXsBW,AUpBf,AEdY,ALuBG,CHNCD,AMHA,AHSN,AOvBV,EAAkB,ENmBL,CELQ,AHSA,CHNCE,AWtB1B,EfuC4B,AUpBxB,CDGA,CAA0B,ACHA,CFKb,CAAK,ADIU,GAAxB,GHNY,EJiBD,ASjBf,CTiBqC,AIjBAF,AMHrC,CDGsC,CCHC,CFKvC,EAAgC,CJFWE,AKAA,EDE3C,GRee,CAAX,ISjBJ,ELAqC,IAAsB,EAA/D;APyBI,ASpBJ,ANaK,AIjBL,AIGI,AKPJ,AJII,ACHI,ACFH,ACZD,AbgDA,AQzBI,AQ5BR,ADKQ,UViBFQ,AWtBA,CFkBF,CdmCI,CS5BC,CXqBC,CYxBC,AGjBA,CbgDC,CAAJ,CK/BO,AGMD,CGTC,CEdC,CbgDE,AgBrDD,CXsBCO,CPwBd,AWrBA,CXqBgB,COxBE,CQjBX,ALuBW,CHNtB,AL+BwB,AgBrDD,ChBqDL,CFPO,CezCC,AGLT,CNsBb,AGjBA,AGLuB,CNsBC,AV+BC,CFPzB,EUlB2B,CRyBE,CAA7B,CgBrDa,ChBqDoB,GQzBC,CENlC,AMtBmC,ENsBE,AMtBzC,CR4BQ,IENsC,WAA1C;AZyBH,ASnBD,ANaI,AIlBJ,AIII,AKRA,AJIA,ACLuC,ACCvC,ACbH,AbgDO,AQzBA,AQ5BR,ADKK,SJYD,CNKEH,AWtBA,ET2BE,CNaC,AQdA,AKRA,EPST,AGLW,AEJA,CAAC,CLSK,AFLH,CIIV,ADEU,CPYV,AQdW,AO1BA,CfwCC,CIlBCG,AOJA,CHQb,AT2Bc,CS3BC,CJJE,CSJjB,CbsBA,CQdA,AT2BmB,CYnCX,AJUY,AQ5BA,CfwCC,AWtBA,AZmCjB,CCbJ,CIlBJ,AKAI,CAAwB,CFMC,EIVjB,CAAR,EAA8B,CFI9B,AFM+B,CAAX,CENa,AMtBtB,CAAuB,ER4BE,EENE,GFMG,IENzC,AFM6C,CAAzB,EQ5BT,CAAf,CR4BsD,KAAK,MAAM,CAAzC,IAA8C,KAAK,IAAI,CAAvE;AV9CZ,AS8CQ,ANaA,AQdH,AKRG,AJIH,ACFA,ACFO,ACNR,AbyCK,AQxBG,AQ7BR,ADMI,UCNE,GfwCG,AatBA,EPSE,CNaP,AOXQ,AOvBA,CHYC,AIlBA,CFkBT,CbsBW,AatBA,ACZX,CRqBY,AQrBA,CCNC,GfwCG,CMbT,CAAW,CNaP,AOXQ,CPWC,AWtBhB,AIlBS,GfwCF,CAAa,CMbjB,CAAmB,AOT1B,ANW0B,CQ7BjB,CAAS,CT2BX,ACEY,CDFnB,ACE8B,EPWnB,CAAX,CexCS,ADMT,ECN0B,ER6BP,CAAoB,KAApB,CQ7BO,IR6BuB,GQ7BvB,CAAO,CR6B7B,CQ7BsB,CR6B8B,AQ7BpB,KAAV,EAAiB,MAAjB,CAAjB,EAA2C;AlBnB5D,AS+CK,ANcG,AInBJhB,AIKA,AKTI,AJKI,ACFA,ACHH,ACNL,Ab0CI,AQzBQ,AQ7BR,ADOA,QjB3BR,IY2CoB,CTkBP,AavBA,ACXA,EjB3Bb,AE0Ee,CKhCCkB,CKCJ,CZ3CZ,AgBsCQ,CJK6B,AKhBlB,CVef,AWtBgB,CfyCZ,AInBa,ALgCb,CCbc,AclCd,CNoBY,AENW,AHQR,GVjDvB,AkBoB0B,ADOA,CJcd,AHQI,CAAY,CGRa,AKrBrB,CfyCZ,AezCsB,ADOtB,EAAwB,EPsBhB,KQ7BI,CADwC;AT8BxD,ANaC,AInBGV,AIKA,AKTA,AJKA,ACFA,ACHH,ACND,Ab0CC,AQzBQ,AQ7BL,ADOI,YRqBA,COVC,AJKA,CLDCQ,AMDA,CJOV,AEDW,EFCQ,AFPF,CSHb,AJKA,EDIY,AMpBA,CLgBC,CHKjB,CQrBQ,CRqBwB,AQrBZ,CNoBT,CAAW,ICJL,KCFc,AIdA,ELgBd,CAAO,ACFpB,AId8B,INoBvB,ACJM,AKhBT,CLgBqB,CDIzB,ICJa,CAAb;AHMA,ANlDR,AI4CQP,AIKH,AKTG,AJMA,ACHA,ACFJ,ACNA,Ab0CA,AQ1BK,AQhCmD,ADUnD,KCVQ,CAAb,MHgBK,CNeI,AFRQ,ASFR,CJMC,ACHA,EDGE,CV+BC,CO3BT,CAAW,AOVX,CJMM,CELO,CFKC,AV+BlB,EAA0B,EO3BtB,AKTJ,CLSuB,CKTc,CDEZ,CJOrB,CGJM,CHIkB,EIPE,EDGE,CHI5B,GGJA,ECHqB,CAAc,QAAd,CAAuB;AJQ/C,ANnDL,AI6CQI,AIMJ,AKVC,AJMG,ACHI,ACFJ,ACNA,Ab0CA,AQzBA,AQ7BJ,ADMC,KAjCU,GdGf,GewBW,CHYC,Ab0CA,CYpCC,CFKC,CT/Cd,AU4Ce,AHSA,CENC,AMvBZ,CHYa,Ab0CA,CC9EjB,CQmDgB,AO3BG,ENuBL,AFMN,GIXA,AIlBJ,ENuBsB,AGXlB,Ab0CI,CYpCe,CX1C3B,AYoC4B,EHWpB,CV+BuB,CYpCvB,AZoCA,CWnC4C,CXmClB;AOzB9B,AFXiB,AIUb,AKTJ,AJKI,ACHI,ACFJ,ACNI,Ab0CA,AQzBP,AQ7BD,ADOA,KVUA,ISCK,EAAE,AElBA,ADOH,EHWK,CHSC,ACJA,CHKF,AIRG,CFOC,CKTC,AElBb,CJkBI,CZoCW,CgBtDC,CP2BN,AKTL,CJKa,CILlB,EAAqC,CLSf,AT2BA,AgBtDtB,ENuBwB,AV+BT,CAAU,CS3BrB,IT2BW,EAAiB,CAAjB,CAAP,GU/BU,CAAoB,KAAK,KAAzB,CAAd;AHMA,AEDA,AKTA,AJMA,ACP4C,ACC/C,ACNI,Ab0CA,AQjFT,AQ4BI,ADMI,SJUqB,AKhBpB,CLgBD,GDOK,AMvBA,CP0BC,AKTA,ACXA,CRqBC,ES3BE,CAAb,CNuBe,CHIC,AS3BA,CDMC,ELiBb,CMvBgB,CT2BT,AEDU,AKTA,CPUC,CGJC,CKjBC,ENoBE,AKTA,EJMtB,AMvBJ,ADMiB,CAAY,CRqBlB,AGJ6B,AMvBV,ET2B1B,CS3BJ,EAAmC,MDMlB,CNoBI,AKTA,ACXjB,ENoBA,AKTA;APWH,AFPDV,AIOI,AKTA,AJKI,ACHJ,ACFJ,ACNI,Ab0CA,AQnFR,AQ6BQ,ADOA,QPpCR,GHiDWgB,EIOE,AKTA,AHEA,AERA,Cb0CC,AgBtDA,CJkBF,AJ/CZ,AOoCe,CLgBC,EILR,AN/CR,AQ6BkB,CP2BC,AKTA,CCXC,CJaZ,CAAc,AERd,Ab0Cc,CcpCd,AN/CR,CM+CwB,CTEpB,AIOI,AIfiB,AGZP,CXoBQd,AKGA,AKhBX,CJaY,AXkCA,CcpCnB,CLSqB,ACJb,AGXR,AELqB,CLgBC,ACHtB,CKpBU,ADOV,CJawB,AKpBP,CAAP,ADOe,CLgBjB,CLHZ,AKGQ,AMvBgB,ChBsDN,CKlCeW,AIO7B,ACJ6B,EDIE,AT2BA,CKlCnC,AWpBc,CAAV,CXoBkC,ELkClC,CWlCqC,GAAb,CAAiB,KAAK,GAAtB,CAAxB,EAAoD;AJSxD,AEDQ,AKTJ,AJKQ,ACHJ,ACFJ,ACNA,Ab0CA,AgBtDA,ADOI,aRqBC,AOVA,CElBC,CJkBC,AZoCA,CS3BC,AMpBA,ERqBZ,AS5Bc,CLoBC,CJQiB,AKVhB,EZoCE,CcpCd,ACXe,Cf+CR,CWnC6C,AXmCnC,AgBtDP,CNuBQ,CELX,CAAa,AGXA,CAAL,CFKO,Ab0CA,Ae/Cd,CHWD,AZoCU,AgBtDP,ADON,CLgBI,AELgB,AIlBP,CNuBQ,AMvBf,ADOe,CNoBC,AT2BA,Ca1CC,AGZP,ENuBZ,AELqB,EZoCtB,ES3BmB,AIf1B,Ab0CiC,AgBtDvB,CAAV,IhBsDsC,CAAL,CS3BzB,ET2BkC,CYpCnC,CHS2B,AGTlC,CHSoC,ET2B7B,CAAP,IS3BoD,OAAhD,EAAyD;AFE7D,AFRAI,AIOQ,AKRR,AJIK,ACHD,ACFP,ACNA,Ab0CA,AgBtDG,ADOQ,aDYH,AJED,CLDE,AWpBA,CT4BC,IOTP,AJIW,ACHA,CJQC,AOTA,CEnBC,CP2BC,AKRA,GPSP,CAAW,AOTN,AEnBM,EP2BV,AKRY,CLQC,AMpBA,ICPR,CT4BN,AS5BmB,CT4BC,AEDnB,CKRI,EAAZ,CCZQ,CRqBD,AQrByB,CRqBhC,ES5B0B,EDOW,CAAL,CAAxB,GCPkB,CAAO,EAAP,CAAU,CAAV,EAAa,CAAb,CAAb,CAAb;AT6BH,AFRO,AIOI,AKRX,AJIW,ACN4C,ACExD,ACNA,Ab0CA,AgBtDI,ADMK,SJUL,EEJA,CDMC,CZoCI,AgBtDA,MXmBM,ALmCf,EAAuB,GKnCHX,AWnBhB,CAAiB,CNsBC,GLHP,AKGH,CLHJ,AKGkB,EMtBL,ENsBT,KMtBR;AT6BJ,AFTK,AIOI,AKPT,AJGS,ACHR,ACDG,ACNA,Ab0CA,AgBtDH,ADOO,SVQ8B,IOG7B,ACNA,Eb0CE,EO1BD,AOTA,ACZG,Gf+CG,CYpCZ,CAAc,ACNd,AELI,Cf+CG,CAAS,Ca1CC,EDME,GCNnB,Ab0CO,EAAiB,MYpCxB,GZoCA;AOzBA,AEDI,AKRJ,AJGC,ACFL,ACFI,ACNH,Ab0CA,AgBrDD,ADMK,SCNA,IFkBI,AHCA,ACFA,AIjBT,ET2BW,EIRX,EFOe,AKRX,AHCmB,CJQP,AKVZ,CDEJ,ACFiB,EHST,AEP2B,CFOf,CFCT,AIPP,CJOkB,AKVlB,GHSI,IENI,GJOD,EAAP,EIR+B,EAE/B,QAAQ,CAFuB,KAG/B,EAHJ,EAGM;AJML,AFTGY,AIQC,AKRD,AJIA,ACAA,ACLA,ACLJ,Ab0CA,AgBtDA,ADMC,OfgDE,EAAE,GKpCGC,CSAC,AJIA,AELA,AZqCA,CWhCC,GNJN,AKIA,CAAU,AVgCA,CKpCC,ALoCZ,CYrCC,CAAa,AZqCA,CgBtDjB,EFkBI,AHIgB,ACLhB,CECiB,AFDA,AZqCA,CYrCjB,EFKA,AELoB,CDKC,AKtBzB,ChBsD0B,AgBtDpB,ChBsDH,EcpCC,AFDyB,AZqC7B,CgBtDA,CLsBoB,AXgCwB,AgBtDjC,CLsBqB,IKtBhB,IJiBZ,EDKgB,CAAuB,CKtBhC,EAAX,CLsBoB,CAAhB;AJOJ,AFVQ,AISJ,AKTH,AJIA,ACCG,ACNH,ACLD,Ab0CI,AgBtDJ,ADxCW,CAAf,cNmEe,AT2BA,CW/BC,CNLCT,GLoCG,CKpCR,ALoCG,CgBtDX,CP2BI,EJTiBS,AMKjB,CX+BkB,CAAX,CW/Ba,CKvBxB,CXkBQ,AWlBF,ChBsDqB,EW/BvB,AKvBJ,GhBsDgC,CAAL,KAAW,CAAlC;AOzBJ,AFVQ,AISP,AKRD,AJIQ,ACAJ,ACLJ,ACNA,Ab0CC,AgBrDD,ADOJ,QCPQ,CAAC,ADOT,GHUY,GFKW,AMtBR,CLsBC,AIfhB,CVUiBV,AUVA,CHUb,AIjBK,CAAU,CNsBP,AELc,AGV1B,ELe2C,AKfrB,ICPb,CLsBD,AKtBJ,ADOJ,ECP6B,ADOF,CJeG,CNLlB,GAAsB,CMK1B,GNLI;AEWR,AFVK,AIvDT,AKwDI,AJII,ACAA,ACLA,ACLJ,Ab0CA,AgBtDI,ADOJ,Qf+CI,Ae/CA,Ef+CE,Ca1CF,EGZK,ChBsDC,CYrCC,AZqCP,Ae/CO,CLeC,ACAA,CXgCC,AgBtDT,GJiBY,AGVZ,Cf+Ca,CUhCC,AVgCd,EAAJ,CWhCI,AIfiB,CLejB,AVgC+B,CYrCxB,CAAa,GAAb,CAAiB,CGVxB,IAA6B,CHUtB,AGVuB,CHU9B,KGVoC,KAAxC,EAA+C;ARsB/C,AEnEJ,AKyDI,AJIQ,ACAJ,ACLH,ACLG,Ab0CA,AgBtDH,ADOG,ORqBD,CEnEP,KFmEI,AMhBS,ENgBU,AEnEvB,AT6Fe,Ae/CA,CJeC,CDAC,CD7DjB,AImDQ,EELA,CFKa,CFUb,AEVA,Ab0Cc,CO1BlB,AINmB,CDAX,AVgCG,CO1B0B,AP0BhB,GWhCG,CAApB,CF7DR,AT6F8B,CWhCC,AXgCN,GAAS,CAAnB,CWhCqB,CAA5B,AXgC6B,KAAK,CAAL,GAAS,CAA/B,CAAP;AOzBA,AFtBkC,ASatC,AJGY,ACAR,ACJJ,ACNI,Ab0CH,AgBrDD,ADMC,KVDD,GSaI,GElBG,ET2BE,AMhBA,GCOT,AHGY,CKrBZ,CAAc,CFkBF,CPSR,CAAa,AGNA,AGVb,CFUA,ACJW,CLUX,AINe,CJMC,AMhBA,AGXpB,CNqBY,CAAU,ACAA,AKrBA,CLqBlB,EAAqB,AEVrB,CNgBA,EAAwB,AINA,CAAxB,CDAQ,GAAqB,CAAC,EHM9B,GGNmC,IAAL,CAAU,QAAhC;AHOX,AFXJ,ASEO,AJAA,ACGA,ACJA,ACNA,Ab2CJ,AgBtDI,ADOJ,CVfJ,OL8DQ,Ae/CA,Ef+CE,EgBvDgB,CHYb,CDMC,AZqCA,Ae/CA,CDWC,AdoCP,CWjCQ,CXiCC,Ca3CT,CEJA,CDWY,CdoCC,CAAb,EAAJ,Ae/CoB,CJchB,ACJiB,CECV,AdoCwB,CcpCZ,GFDG,EGV1B,EHUqB,AGVS,CDW1B,AFD2B,YAAV,EAAjB;ALYJ,AOVC,AJGA,ACAG,ACJA,ACNH,Ab2CG,AgBtDA,ADOA,SRqBC,KKXK,CLWV,AP0BW,Ae/CA,CJcC,AKrBA,CT4BS,KIPjB,ACJ6B,AZqCf,EYrCd,AZqCO,Ae/CA,CRqBX,AP0BqB,EO1Ba,GP0BR,CAAL,Ae/CV,CAAO,Ef+CY,AgBtDlB,ChBsDD,Ce/CA,Cf+CsB,Ae/CV,ICPX,ChBsD0B,AgBtDpB,ADOP,Cf+CsB,Ae/C7B,Gf+CsC,CAA/B,CAAP,AgBxDkB;AT+BlB,AOVJ,AJIQ,ACDP,ACHG,ACNJ,Ab0CC,AgBtDG,ADOH,QDWG,KPUK,AKVA,AIlBA,EHYD,AGZJ,CFkBJ,CAAa,AElBM,EJkBJ,CLUX,CAAa,COVjB,AJI0B,EIJC,CPUvB,AKVA,CLUkB,CGNd,EAAsC,AEJrB,GLUrB,EAA0B,GKV1B,EAA+B,GLU/B;AACH,AOVG,AJIA,ACAJ,ACJQ,ACNJ,Ab2CJ,AgBvDQ,ADQR,WAAO,EDUE,ADNA,Ab2CA,EWjCE,AXiCA,CUjCC,AKdZ,CJcA,AKtBa,CJkBC,ACNV,CCMA,AHImB,AXiCR,CcrCC,AdqCP,Ca3CQ,CHUC,AGVA,Ab2CA,Ca3Cd,EFUJ,ACJqB,AIlBb,CNsBJ,AViCkB,AgBvDA,CLsBiB,ACJ/B,AZqCC,CcrCL,CHKA,AXgCJ,EcrC2B,AFAA,AZqCa,KcrCpC,CHKQ,CCLsB,MDIK,AKtBjB,ELwBlB,ACNuB,EAAnB,GIlBc,CAAM,ELwBhB,CAF2B,CKtBjB,CAAW,EAAX,CLyBlB,AKzBI,ELsBR,EAGM;AJKN,AOXC,AJIO,ACGJ,ACPC,ACND,Ab2CA,AgBvDI,ADQX,aFIY,CFaC,CX8BC,EUjCE,AMtBA,IHYT,Cb2Cc,CgBvDV,CNsBA,ACGY,AEbA,Ab2CT,CAAU,IW9BI,AEbrB,Cb2CsB,CAAL,GAAS,CW9BV,AX8BT,CW9BqB,CX8BC,KAAK,CAAL,GW9Bb,AX8BsB,CW9BC,AX8BhC,CAAP,GW9BgB,CAAhB;AJKJ,AOVA,AJGY,ACIR,ACPA,ACPA,Ab2CH,AgBvDI,ADST,QDUQ,CCVR,GAAA,CDUI,AFAS,ACPA,AEHA,GDUA,AHOG,EEdR,AEHR,EAA4B,CLaP,GEHb,CFGQ,ACIR,CDJkB,AKb1B,CHU2B,CDOC,AIjBc,IHUlC,CDOA,CDJQ,GAAqB,CAAC,KAAK,IAAL,CAAU,QAAhC;AHQZ,AOVI,AJGQ,ACIR,ACPA,ACPH,Ab4CD,AgB/DsB,ADgBtB,KChBA,IhB+DK,EAAE,Ae/CC,EHUC,EEAE,AdqCA,CW9BC,ECPR,AGVW,EDUC,AdqCA,CAAX,EAAc,Ae/CX,EAAsB,CDUnB,CAAY,AHOnB,AX8BmB,GW9BG,EGPtB,AdqCwB,CAAvB,Ae/CG,CAA+B,CJiBnC,AX8BJ,EAA8C,Ge/CtC,EAAuC,GAAvC,CAAR;ARsBA,AOXC,AJIO,ACGJ,ACPH,ACND,Ab2CI,AgBvDJ,ADQH,QRqBO,GMjBA,EGZJ,ET6BA,AP0BW,CW9BC,CDHC,CHOF,CS7BX,CAAgB,EhBuDE,AgBvDA,CNsBV,CViCG,CW9BP,AX8BiB,CgBvDL,EAAQ,IhBuDH,GAAA,CAAI,AgBvDT,EAAhB,EAAoD,ChBuDtB,CAAL,GAAS,CAAb,CAAV,EAA2B,OAAA,GAAA,CAAI,KAAK,CAAL,GAAS,CAAb,CAA3B,CAAP;AOzBA,AOXJ,AJIQ,ACGJ,ACNJ,ACPI,Ab2CH,AgBvDG,ADSR,QDSQ,CCTR,IDSI,AFCS,ACPA,CCMC,AElBA,CT6BC,CIJC,CDHC,CEHb,ACPI,CCMJ,AHOI,CJIY,AIJA,ACNa,AInBb,CFkBO,ADNN,CAAb,CHUI,ACGW,CJIR,AIJP,CJIiB,AS7BA,ADSzB,CJgB0B,AIhBA,ECTN,CLyBS,CAArB,AKzBA,CDSR,CRoBQ,AIJwB,CIhBK,KJgB7B,EAAgC,CAAhC,EAAmC,OAAA,GAAnC;AJKH,AOXG,AJIQ,ACGR,ACNA,ACPA,Ab4CJ,AgBxDI,ADSJ,UAAM,GDSG,ADNA,CDOC,AInBA,ChBwDF,CW/BI,CIhBC,EDST,CAAY,CJIC,AGVb,CGZc,CDSC,CFGC,CCMhB,AJIQ,ACGR,ACNiB,CFGC,EIJE,ADNpB,AGZoB,EJmBE,EInBtB,CFkBA,CJIQ,AEHS,AGVR,CHUkB,CGV/B,eHUqB,EAAjB;ALYJ,AOZC,AJIW,ACGR,ACNA,ACPA,Ab4CA,AgBvDA,ADQJ,QRqBI,EQrBE,ERqBN,CMlBS,CDOC,CLWF,AP0BG,AgBvDA,CLwBC,EKxBR,ADQU,EHUE,ACPZ,EFaA,AIhBc,EHUE,EZqCE,CYrCN,CAAQ,AGVA,Gf+CG,CAAC,GYrCG,CGVb,Cf+Ce,EYrCT,CAAY,CGVC,Cf+CC,Ae/CxB,Cf+CyB,Ce/CC,CHUhB,AGVV,CAAd,CHU2C,AZqCvC,GYrCoB,CAAuB,MAAvB,CAAR,CAAZ;ALYA,AOXJ,AJIQ,ACEP,ACLG,ACRH,Ab4CA,AgBvDG,ADQJ,SDUK,CCVC,GDUN,AFCS,CInBC,CT6BC,AOXM,EJIJ,AKdA,EHWE,CLUC,CQrBC,ELcT,AMtBJ,CT6BO,CAAU,AKVjB,CInBkB,CDQC,ERqBnB,AKVqB,IInBI,CDQZ,EAAJ,CHWT,AInBkB,CAAlB,ADQ8B,CHWC,AGXtB,CAAb;ARsBC,AOXG,AJII,AChFZ,AC6EY,ACPR,Ab4CA,AgBxDI,ADQJ,UAAM,GfgDA,EctCK,ADNH,EHUK,AKdA,CHWC,AInBA,EFkBE,CCVC,ELcT,EIJG,CAAW,CElBlB,ADQmB,GDUZ,AElBe,CFkBC,CFCC,GEDjB,ACVM,CDUb,CElB6B,ADQpB,CHWqB,CGXC,CAAtB,CAAb,IHWyC,CInBC,CJmBd,CAApB,IInBkB,CAAtB;AT8BJ,AOXC,AJIW,ACjFhB,AC8EY,ACPJ,Ab4CA,AgBxDA,ADQJ,QRqBI,AIxFR,EImEU,ERqBN,CAAS,AMjBA,AGZA,EL3Db,AXmHe,CYrCC,ELUZ,AIxFJ,AEuEQ,ENiBU,AQrBE,CLcC,AGVA,CDOT,ACPU,AGZd,CJmBe,ACPf,CEJgB,CLcR,AMtBS,CNsBC,ICjF1B,AC8E8B,AGXA,EHWlB,AInBoB,ENsBhB,KMtBgB,CDQR,EAAJ,ECRY,ADQY,CCRN,ADQlB,CAAhB,MCRyC,KAAb,EAAoB,CAApB,CAAP,CAAjB;AT8BA,AOVJ,AJGY,AEFJ,ACRJ,Ab4CI,AgBxDP,ADQD,UAAM,EDWD,CPUI,AMjBA,GDQG,CLSR,CAAU,CP2BC,CehDC,CFIZ,CNiBA,EMjBgB,AEJA,CRqBC,EKTb,AZmCG,Ca3CP,CDQqB,CLSrB,AQrBsB,UAAN,EAAJ,EAAwB,CAAxB,CAAhB;ARsBC,AOVG,AJII,AEHI,ACRR,Ab4CI,AgBxDX,ADQG,UAAM,GFIG,ECOE,AdqCA,EUjCE,GIJG,ADPZ,Ab4CY,CAFL,EU/BH,AEHW,EGZE,CDWV,CAAY,ECXE,EHYb,CEDD,AFCiB,EEDxB,CCX2B,GHYG,OAAO,EAAb,CAAhB,EGZa,EAAJ,EAA6B,CAA7B,CAArB;ARuBA,AOXC,AJIO,AEHC,ACRR,Ab4CO,AgBvDZ,ADQI,QRqBI,CS7BR,EDQW,EHSC,CLYR,AQrBU,Cf+CC,EO1BD,AGPG,CMtBjB,ADQkB,CHWC,CZoCC,CgBvDpB,CDQsB,CLcV,AEHW,IGXI,IAAI,IAAI,IAAI,EHWE,EGXE,IAAI,CHWN,MGXa,CHWnC,EAA4B,CGXW,OAAO,IAAI,YAAY,EAA7E;ARsBI,AOVJ,AJGY,AEHA,ACPZ,AbuCW,AgBnDX,ADQH,Sf2CO,EchCA,AEnBG,CHYF,GNiBM,AS7BA,KT6BK,CGPC,CMtBV,CJmBY,AInBA,CT6BR,CAAU,AGPT,CAAU,AEHV,IFGA,CHOR,GS7B0B,OAAO,gBAAP,CAAwB,kBAAxB,EAA4C,OAA5C,CAAvB,CAAP;AT8BC,AOVG,AJGQ,AEHH,ACPL,Ab2CH,AgBvDJ,ADSD,SAAA,IFGa,ECOE,ACVf,CAAgB,IDUI,CDPZ,AEHR,EAA6B,CFGL,ECOT,CAAY,CDPnB,GCOO,EAAP;APWJ,AOVC,AJIO,AEJH,ACPJ,AbjFL,AgBsEA,ADQI,QRoBI,CS5BR,EDQW,GRoBP,CAAW,EGNE,EMtBjB,CT4BI,EAAgB,AS5BpB,CNsBY,KKdgB,IAAI,IAAJ,CAAS,KAAT,CAAjB,MAAsC,KAA7C;ARqBI,AOTJ,AJGQ,AEHJ,ACPJ,AbjFO,AgBqEP,ADQH,Of7EU,GgBqED,CFmBF,AdxFG,EOiGE,AKTA,CZxFK,GOiGV,AGNS,CHMC,CKTC,EAAX,AZxFiB,AgBqEJ,EhBrEH,COiGV,APjGoB,CYwFH,AZxFP,EOiGS,APjGI,CU2FnB,AEHJ,AZxFU,AgBqEU,ChBrEjB,CYwFmB,ELStB,IS5Ba,CAAgB,MAAhB,CACZ,MADY,CACL,CADK,EAEZ,KAFY,CAEN,GAFM,EAGZ,MAHY,CAGL,OAHK,EAIZ,GAJY,CAIP,KAAD,IAA8B;ATyBtC,AOTG,AJGQ,AEHJ,ACPR,AbpFJ,AgB4EY,QhB5EZ,MgB4EkB,CFeH,Ad3Ff,AgB4EoB,GJeF,AZ3FlB,AgB4EkB,EFeE,AEfK,CNkBJ,GV9FrB,CU8FgB,AEHS,AIfP,CFeH,AJGW,CIHC,EEfQ,CNkBnB,AEHc,CEAf,EAAP,CFAiB,CAAU,AIfM,KAAN,CAAY,GAAZ,CJeV,AIfb,CJekC,EAArB,CAAb;ALWR,AOVC,AJGW,AEFJ,ACRR,AGRQ,cAAM,CTyBN,EKTK,GIhBO,KJgBZ,CAAc,GIhBO,GJgBD,EAAN,AIhBF,CJgBZ,AIhBA;AT0BJ,AOTJ,AJGQ,AEHH,ACPG,AGRA,YAAI,EHQG,CNgBJ,AOTH,GEfU,ETwBF,CSxBJ,CAAJ,ETwBG,ASxBa,CTwBH,QAAV,EAAP;AACH,AOTG,AJGI,AEHP,ACPG,AGRQ,YHQJ,GCOG,EDPE,CGRK,EFeF,EEfM,IFeX,CAAY,AEfL,CHQV,AGRoB,IHQA,GCOjB,EAAP,ADP6B,UGRc,EHQ3C,CGR8C,CHQH,qBGRyB,KAAK,MAAM,GAAG,GAApE,CAAN;AT0BZ,AOVC,AJxBG,AEyBI,ACRA,AGRC,YTyBJ,MKTc,ECRH,IAAR,CAAa,8BAAb;ANkBJ,AOTJ,AJEC,AEFG,ACRI,AGPA,YFeH,EFAK,CLSC,ASxBI,CAAE,CHOJ,EGPE,CTwBC,CSxBM,GTwBX,ASxBI,CTwBM,AKTA,ACRb,AGPA,GHOgB,ENiBb,AKTe,ELStB,AMjBI,EDQa,CAAU,YAAV,EAAjB;ALUH,AOTG,AJGI,AEHJ,ACRI,AGPH,KAbY,CAAjB,QJ4BU,CEAC,CJGS,IIHJ,CJGR,EAA6B,EEHD,CEAzB,CAAY,AFAnB,KEAO,EAAP;APWJ,AOVC,AJGG,AEFA,ACTC,AGNL,UTwBG,CSxBI,ENiBE,AEFA,EIfE,GNiBP,AMjBG,CJeQ,AIfgB,ENiBd,IEFb,EIfG,CAAP,CJeyB,CFER,OAAA,AEFb,CFEoB,CEFW,GFElB,CAAY,KAAZ,CAAb;AHQA,AOTJ,AJEI,AEFI,ACRJ,AGPP,WFeO,EJEK,AGVA,ENiBE,EGPP,CAAU,CEFC,ACRX,CNiBY,GMjBG,CNiBR,CAAU,GAAV,AGPP,AGVoB,CDQhB,CLSJ,GMjBA;ANkBH,AOTG,AJEH,AEFO,ACRJ,aAAK,ECQE,KAAK,CFAC,ACRb,CAAc,ICQP,ADRP,CCQmB,ADRA,CDQC,EAAhB,CEAG,ADRP,ECQA,ADRyB,CDQC,OAAO,QAAP,EAAtB;ALWR,AOVC,AJtGL,AEsGS,ACRG,kBAAM,KAAK;ANmBnB,AOTA,AJxGJ,AEwGQ,ACXyB,QH7FjC,CG6FQ,IDWK,EEAD,AJxGZ,GAAA,GEwGQ,CAAc,QAAd,GFxGR;AHkHI,AOTI,AFAH,ACTA,eCSU,KAAK,MAAL,CAAY,QAAZ,EAAP;APWJ,AOVC,AFCO,ACTA,aDSS,ACTH,GNkBF,IAAZ,CKTQ,CLSoC,CKTJ,WLSgB,CAAxD,EAAyD;AACrD,AOTJ,AFAI,ACTA,YAAI,CNkBC,AMlBA,CDSC,EAAE,CLSR,CAAU,AMlBA,KDSJ,ELSN,CAAkB,CMlBlB,CDSoB,CCTC,CNkBrB,EAAwB,AKTxB,SLSA;AACH,AOTD,AFCI,ACVI,gBDUI,GAAR,CAAY,KAAK,cAAL,GAAsB,CAAlC,EAAqC,QAArC;ALUJ,AOVA,AFEI,ACXC,QNmBD,IKRI,ELQR,EAAyB,IKRT,IAAR,GAAe,KAAK,UAAxB,EAAoC;ALSpC,AOTJ,AFCQ,ACVJ,eNkBO,KAAK,AKRA,GEDA,CPSL,CAAU,CKRb,CAAe,CLQZ,CAAc,CMlBC,EDUE,GLQjB,AMlBoB,CNkB3B,KMlBA,KDUI;ALSP,AOTG,AFCC,ACTD,YAAI,CAAC,ECQE,GDRG,ECQE,MDRZ,ECQO,ADRa,CCQC,gBAAd,EAAP;APWJ,AOVC,AFCA,ACTO,WNkBD,MAAP,AMlBa,ENkBe,KMlBpB;ANmBJ,AOTJ,AFlHJ,ACyGS,YNkBG,AOTA,QAAR,EAAwB,QPSE,IAAlB,IAA0B,KAAK,QAAL,CAAc,MAAd,CAA9B,EAAqD;AACjD,AOTJ,AFnHR,AC0GK,QD1GL,OEmHe,AFnHf,GAAA,CL4HmB,COTC,IPSR,GK5HZ,CEmHe,CAAc,OAAd,CAAsB,QAAtB,CAAP;APUC,AOTJ,AD1HL;ANqIQ,AOTJ,AD5HJ,QAAA,ONqIe,AOTA,AD5Hf,EC4HI,CD5HJ,CC4HyB,CPSL,QMrIpB,INqIe,CAAkB,MAAlB,IAA4B,CAAnC;AACH,AOTG,eAAO,KAAK,QAAL,CAAc,UAAd,CAAyB,EAAzB,CAAP;APWJ,AOVC,iBPUY,MAAb,EAAkC;AAC9B,AOTJ,cPSU,KOTE,QPSW,KAAK,IAAL,CAAU,QAAV,CAAmB,MAAnB,CAAnB;AAEA,AOVA,YPUI,GOVG,KAAK,QAAL,CAAc,CPUC,IAAtB,EAA4B,KOVrB,EAAP;APWI,AOVP,mBPUc,aAAa,KAAK,aAAL,CAAmB,MAAnB,CAApB;AACH,AOTL;APWI,AOVJ,ePUW,UAAP;AACH,AOVD;APYA,AOVA,mBAAY;APWZ,AOVI,aAAK,WAAL,CAAiB,YAAjB,CAA8B,KAAK,MAAnC;APWJ,AOVC;APYD,AOVA,qBPUc;AACV,AOVJ,ePUW,KAAK,MAAL,CAAY,cAAZ,EAAP;AACH,AOVD;APYA,AOVA,eAAQ,QPUW,GAAnB,EAA6B;AACzB,AOVA,ePUO,AOVA,KPUK,AOVA,KAAL,CPUA,AOVW,CPUC,OOVZ,EAAP,SPUO,CAA+B,GAA/B,CAAP;AACH,AOVA;APYD,AOVA,WPUO,EOVE,IPUT,COVA,CPUmB,COVU;APWzB,AOVA,ePUO,AOVA,KPUK,AOVA,KAAL,CPUA,AOVW,CPUC,MAAZ,CAAmB,MAAnB,CAAP,COVO,CAA4B,KAA5B,CAAP;APWH,AOVA;APYD,AOVA,ePUW,MAAX,EAAuB;AACnB,AOVJ,ePUW,KAAK,MAAL,CAAY,UAAZ,CAAuB,MAAvB,CAAP;AACH,AOVD;APYA,AOVA,aAAM,KPUQ,MAAd,EAA0B;AACtB,AOVA,ePUO,AOVA,KPUK,AOVA,MPUL,CAAY,COVZ,CAAc,WPUd,CAA0B,EOV1B,EAAP,EPUO,CAAP;AACH,AOVA;APYD,AOVA,sBAAkB,IAAlB,EAA4B;APW5B,AOVI,eAAO,KAAK,QAAL,CAAc,iBAAd,CAAgC,IAAhC,CAAP;APWJ,AOVC;APYD,AOrKJ,cPqKc,MAAV,EAAsB;AAClB,AOtKR,QAAA,KPsKa,EOtKb,GAAA,IPsKQ,AOtKR,CPsKuB,SAAf,CAAyB,MAAzB;AACH;AAED,aAAS,MAAT,EAAqB;AACjB,eAAO,KAAK,SAAL,CAAe,QAAf,CAAwB,MAAxB,CAAP;AACH;AAED,eAAW,MAAX,EAAuB;AACnB,eAAO,KAAK,SAAL,CAAe,UAAf,CAA0B,MAA1B,CAAP;AACH;AAED,cAAU,MAAV,EAAsB;AAClB,eAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAP;AACH;AAED,cAAU,MAAV,EAAsB;AAClB,eAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAP;AACH;AAED;AACA;AACA;AAEA,QAAI,GAAJ,GAAO;AACH,eAAO,KAAK,MAAL,CAAY,GAAnB;AACH;AACD,QAAI,GAAJ,CAAQ,KAAR,EAAa;AACT,aAAK,MAAL,CAAY,GAAZ,GAAkB,KAAlB;AACH;AAED,QAAI,QAAJ,GAAY;AACR,eAAO,KAAK,MAAL,CAAY,QAAnB;AACH;AACD,QAAI,QAAJ,CAAa,KAAb,EAAkB;AACd,aAAK,MAAL,CAAY,QAAZ,GAAuB,KAAvB;AACH;AAED,UAAM,KAAN,EAAmB;AACf,eAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,CAAP;AACH;AAED,WAAI;AACA,eAAO,KAAK,MAAL,CAAY,IAAZ,EAAP;AACH;AAED;AACA;AACA;AAEA,SAAK,GAAL,EAAe;AACX,eAAO,KAAK,QAAL,CAAc,IAAd,CAAmB,GAAnB,CAAP;AACH;AAED;AACA;AACA;AAEA,WAAO,OAAP,EAAwC;AACpC,eAAO,KAAK,QAAL,CAAc,MAAd,CAAqB,OAArB,CAAP;AACH;AA1NL;AAAA,QAAA,OAAA,GAAA,IAAA","file":"main.38f521b3.map","sourceRoot":"../demo","sourcesContent":["export default class Emitter {\n\n    private listeners = new Map<string, Listener[]>();\n\n    on(signal: string, listener: Listener) {\n        if (!this.listeners.has(signal)) {\n            this.listeners.set(signal, []);\n        }\n\n        this.listeners.get(signal).push(listener);\n    }\n\n    emit(signal: string, argument: any) {\n        const listeners = this.listeners.get(signal);\n\n        if (!listeners) {\n            return;\n        }\n\n        for (const listener of listeners) {\n            listener(argument);\n        }\n    }\n\n}\n\nexport type Listener = (event: any) => void;\n","enum Stat {\n    ESCAPE_ACCELERATION,\n    FRICTION,\n    HUNT_ACCELERATION,\n    MAX_BITE_SIZE,\n    MAX_RADIUS,\n    MITOSIS_MIN_RADIUS,\n    VISION_RANGE,\n    MAX_VELOCITY,\n}\n\nexport default Stat;\n","import Stat from '../stat';\nimport World from '../world';\nimport { IEnergySource } from './diet';\nimport Cell from './index';\n\nexport default class CellBehavior {\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    tick(map: World) {\n        const entities = this.cell.getVisibleEntities(map);\n\n        for (const entity of entities) {\n            if (entity instanceof Cell) {\n                this.interactWithCell(entity);\n            }\n        }\n\n        this.cell.move();\n    }\n\n    interactWithCell(other: Cell) {\n        const isTouching = this.cell.isTouching(other);\n\n        if (this.cell.canEat(other)) {\n            if (isTouching) {\n                this.cell.eat(other);\n            } else {\n                this.hunt(other);\n            }\n        } else if (other.canEat(this.cell)) {\n            this.escapeFrom(other);\n        }\n    }\n\n    hunt(target: Cell) {\n        const force = this.cell.getStat(Stat.HUNT_ACCELERATION);\n        const direction = target.pos.sub(this.cell.pos);\n        const push = direction.setMagnitude(force);\n\n        this.cell.shove(push);\n    }\n\n    escapeFrom(target: Cell) {\n        const force = this.cell.getStat(Stat.ESCAPE_ACCELERATION);\n        const direction = target.pos.sub(this.cell.pos);\n        const push = direction.setMagnitude(force);\n\n        this.cell.shove(push);\n    }\n}\n","export const PI = Math.PI;\nexport const TAU = Math.PI * 2;\n\nexport const abs = Math.abs;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sqrt = Math.sqrt;\nexport const pow = Math.pow;\n\nexport function random(min?: number, max?: number) {\n    if (arguments.length === 0) {\n        return Math.random();\n    } else if (arguments.length === 1) {\n        max = min;\n        min = 0;\n    }\n\n    return Math.round(Math.random() * (max - min)) + min;\n}\n\n//\n// Round\n//\n\nconst roundOperators = [ 1, 10, 100 ];\n\nfunction getRoundOperator(digits: number) {\n    while (roundOperators.length < digits + 1) {\n        roundOperators.push(Math.pow(10, roundOperators.length + 1));\n    }\n\n    return roundOperators[digits];\n}\n\nexport function round(value: number, decimals = 2) {\n    if (decimals === 0) {\n        return Math.round(value);\n    }\n\n    const operator = getRoundOperator(decimals);\n    return Math.round(value * operator) / operator;\n}\n","import { pow, sqrt } from '../math';\nimport Stat from '../stat';\nimport Cell from './index';\nimport CellState from './state';\n\nexport default class CellBody {\n\n    get isAlive() {\n        return this.state.isAlive;\n    }\n\n    get size() {\n        return this.state.size;\n    }\n    set size(value: number) {\n        this.state.size = value;\n\n        if (value === 0) {\n            this.die();\n        }\n    }\n\n    get energy() {\n        return pow(this.size, 2) * Math.PI;\n    }\n    set energy(value) {\n        this.size = sqrt(value / Math.PI);\n    }\n\n    constructor(\n        private cell: Cell,\n        private state: CellState,\n    ) {\n        this.state.isAlive = true;\n        this.state.size = 1;\n    }\n\n    canMitos() {\n        const minSize = this.cell.getStat(Stat.MITOSIS_MIN_RADIUS);\n\n        return this.size > minSize;\n    }\n\n    mitos() {\n        const minSize = this.cell.getStat(Stat.MITOSIS_MIN_RADIUS);\n        const childCount = Math.floor(this.size / (minSize / 2));\n        const childEnergy = this.energy / childCount;\n        const children = [];\n\n        for (let i = 0; i < childCount; i++) {\n            const child = new Cell();\n            child.energy = childEnergy;\n            this.inherit(child);\n            children.push(child);\n        }\n\n        this.cell.emit('mitos', children);\n        this.die();\n\n        return children;\n    }\n\n    die() {\n        this.state.isAlive = false;\n        this.cell.emit('die', this.cell);\n    }\n\n    private inherit(child: Cell) {\n        child.setParent(this.cell);\n    }\n\n}\n","import { round } from '../math';\nimport Stat from '../stat';\nimport Cell from './index';\n\nexport default class CellDiet {\n\n    private types = new Map<IEnergySourceConstructor, number>();\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    addType(Type: IEnergySourceConstructor, weight: number) {\n        this.types.set(Type, weight);\n    }\n\n    eat(target: IEnergySource) {\n        if (!this.cell.canEat(target)) {\n            throw new Error(`Invalid food source: ${target}`);\n        }\n\n        const selfEnergy = this.cell.energy;\n        const targetEnergy = target.energy;\n        const nutrition = this.consider(target);\n        const maxBitePercent = this.cell.getStat(Stat.MAX_BITE_SIZE);\n        const maxBite = selfEnergy * maxBitePercent;\n        const bite = targetEnergy > maxBite ? maxBite : targetEnergy;\n\n        target.energy -= bite;\n        this.cell.energy += bite * nutrition;\n        this.cell.emit('eat', target);\n\n        return true;\n    }\n\n    consider(target: IEnergySource) {\n        const Type = target.constructor as IEnergySourceConstructor;\n\n        return this.types.get(Type) || 0;\n    }\n\n}\n\nexport interface IEnergySource {\n    energy: number;\n}\n\nexport interface IEnergySourceConstructor {\n    new (): IEnergySource;\n}\n","import { abs } from './math';\n\nexport default class Vector {\n\n    static ZERO = Vector.of(0, 0);\n\n    static of(x: number, y: number) {\n        return new Vector(x, y);\n    }\n\n    static from({ x = 0, y = 0 }: IVectorSetter) {\n        return new Vector(x, y);\n    }\n\n    static apply(action: (...values: number[]) => number, ...vectors: IVector[]) {\n        return Vector.of(\n            action(...vectors.map((vector) => vector.x)),\n            action(...vectors.map((vector) => vector.y)),\n        );\n    }\n\n    static range({ x = 0, y = 0 }: IVectorSetter) {\n        return this.iterate(Vector.of(x, y));\n    }\n\n    static *iterate(vectorA: IVector, vectorB: IVector = new Vector(0, 0)) {\n        const start = this.apply(Math.min, vectorA, vectorB);\n        const end = this.apply(Math.max, vectorA, vectorB);\n\n        for (let x = start.x; x < end.x; x++) {\n            for (let y = start.y; y < end.y; y++) {\n                yield start.add({ x, y });\n            }\n        }\n    }\n\n    constructor(\n        readonly x: number,\n        readonly y: number,\n    ) {\n        if (isNaN(x) || isNaN(y)) {\n            throw new Error(`Creating vector with NaN: ${this}`);\n        }\n    }\n\n    get isZero() {\n        return this.x === 0 && this.y === 0;\n    }\n\n    private _magnitude: number;\n\n    get magnitude() {\n        if (this.isZero) {\n            return 0;\n        }\n\n        if (!this._magnitude) {\n            this._magnitude = Math.hypot(this.x, this.y);\n        }\n\n        return this._magnitude;\n    }\n\n    get radians(): number {\n        if (this.isZero) {\n            return 0;\n        }\n\n        const { x, y } = this;\n        let arctan = Math.atan(y / x);\n\n        if (arctan < 0) {\n            arctan += Math.PI;\n        }\n\n        if (y < 0 || (y === 0 && x < 0)) {\n            arctan += Math.PI;\n        }\n\n        return arctan;\n    }\n\n    setMagnitude(value: number) {\n        if (this.magnitude === 0) {\n            return Vector.of(value, 0);\n        }\n\n        const ratio = this.magnitude / value;\n        return Vector.of(this.x / ratio, this.y / ratio);\n    }\n\n    distance(target: Vector) {\n        return this.sub(target).magnitude;\n    }\n\n    is({ x = this.x, y = this.y }: IVectorSetter) {\n        return this.x === x && this.y === y;\n    }\n\n    sub({ x = 0, y = 0 }: IVectorSetter) {\n        return Vector.of(this.x - x, this.y - y);\n    }\n\n    add({ x = 0, y = 0 }: IVectorSetter) {\n        return Vector.of(this.x + x, this.y + y);\n    }\n\n    multiply({ x = 1, y = 1 }: IVectorSetter) {\n        return Vector.of(this.x * x, this.y * y);\n    }\n\n    diff({ x = this.x, y = this.y }: IVectorSetter) {\n        return Vector.of(abs(this.x - x), abs(this.y - y));\n    }\n\n    toString() {\n        return `[Vector(${this.x}, ${this.y})]`;\n    }\n\n    toJSON() {\n        return {\n            $type: 'vector',\n            x: this.x,\n            y: this.y\n        };\n    }\n\n}\n\nexport interface IVector {\n    x: number;\n    y: number;\n}\n\ninterface IXVector {\n    x: number;\n    y?: number;\n}\n\ninterface IYVector {\n    y: number;\n    x?: number;\n}\n\nexport type IVectorSetter = IXVector | IYVector;\n","import Stat from '../stat';\nimport Vector from '../vector';\nimport Cell from './index';\nimport CellState from './state';\n\nexport default class CellPhysic {\n\n    private shoves: Vector[] = [];\n\n    constructor(\n        private cell: Cell,\n        private state: CellState,\n    ) {\n        state.pos = Vector.ZERO;\n        state.velocity = Vector.ZERO;\n    }\n\n    get pos() {\n        return this.state.pos;\n    }\n    set pos(value: Vector) {\n        this.state.pos = value;\n    }\n\n    get velocity() {\n        return this.state.velocity;\n    }\n    set velocity(value: Vector) {\n        this.state.velocity = value;\n    }\n\n    shove(force: Vector) {\n        const maxSize = this.cell.getStat(Stat.MAX_RADIUS);\n        const size = this.cell.size;\n        const weight = 1 - Math.max(size / maxSize, 0);\n        const modification = force.multiply({ x: weight, y: weight });\n\n        this.shoves.push(modification);\n    }\n\n    friction(velocity = this.velocity) {\n        const friction = this.cell.getStat(Stat.FRICTION);\n        const maxSize = this.cell.getStat(Stat.MAX_RADIUS);\n        const { size } = this.cell;\n        const frictionFactor = 1 - friction;\n        const sizeFactor = size / maxSize;\n        const factor = frictionFactor * 0.5 + sizeFactor * 0.5;\n\n        this.velocity = velocity.multiply({ x: factor, y: factor });\n    }\n\n    move() {\n        const maxVelocity = this.cell.getStat(Stat.MAX_VELOCITY);\n        let velocity = this.velocity;\n\n        for (const shove of this.shoves) {\n            velocity = velocity.add(shove);\n        }\n\n        if (velocity.magnitude > maxVelocity) {\n            velocity = velocity.setMagnitude(maxVelocity);\n        }\n\n        this.shoves.length = 0;\n        this.pos = this.pos.add(velocity);\n\n        this.friction(velocity);\n    }\n\n}\n","import Cell from './index';\nimport CellState from './state';\n\nexport default class CellRelations {\n\n    private parents = new Set<Cell>();\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    setParent(target: Cell) {\n        this.parents.add(target);\n    }\n\n    isFamily(target: Cell) {\n        return (\n            this.isChildOf(target) ||\n            this.isParentOf(target) ||\n            this.isSibling(target)\n        );\n    }\n\n    isParentOf(target: Cell) {\n        return target.isChildOf(this.cell);\n    }\n\n    isChildOf(target: Cell) {\n        return this.parents.has(target);\n    }\n\n    isSibling(target: Cell) {\n        for (const parent of this.parents) {\n            if (target.isChildOf(parent)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n","import { random, TAU } from '../math';\nimport Cell from './index';\n\nconst colorCache = new Map<number, string>();\n\nexport default class CellRenderer {\n\n    private color: string;\n\n    constructor(\n        private cell: Cell,\n    ) {\n        this.color = getColorFor(this.cell.id);\n    }\n\n    render(context: CanvasRenderingContext2D) {\n        const {\n            pos,\n            velocity,\n            size,\n        } = this.cell;\n\n        /* tslint:disable-next-line:no-bitwise */\n        const radius = size | 0;\n        const padding = radius * 0.;\n\n        context.save();\n        context.translate(pos.x, pos.y);\n        context.rotate(velocity.radians - TAU / 4);\n\n        context.fillStyle = this.color;\n\n        context.beginPath();\n        context.arc(0, 0, radius, 0, TAU);\n        context.fill();\n        context.moveTo(radius, padding);\n        context.lineTo(0, radius * 1.5 + padding);\n        context.lineTo(-radius, padding);\n        context.closePath();\n        context.fill();\n\n        context.restore();\n    }\n\n}\n\nfunction getColorFor(id: number) {\n    const cached = colorCache.get(id);\n\n    if (cached) {\n        return cached;\n    }\n\n    const newColor = generateColor();\n    colorCache.set(id, newColor);\n\n    return newColor;\n}\n\nfunction generateColor() {\n    const value = random(0, 0xFFFFFF);\n    const hex = value.toString(16).padStart(6, '0');\n\n    return `#${hex}`;\n}\n","import Stat from '../stat';\nimport World from '../world';\nimport Cell from './index';\n\nexport default class CellSenses {\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    getVisionRange() {\n        return this.cell.size + this.cell.getStat(Stat.VISION_RANGE);\n    }\n\n    getVisibleEntities(map: World) {\n        const visionRange = this.getVisionRange();\n        const entities = map.getEntitiesIn(this.cell.pos, visionRange);\n\n        return entities.filter((entry) => entry !== this.cell);\n    }\n\n    canSee(target: Cell) {\n        const visionRange = this.getVisionRange();\n        const distance = this.cell.pos.distance(target.pos);\n\n        return distance <= visionRange + target.size;\n    }\n\n    isTouching(target: Cell) {\n        const distance = this.cell.pos.distance(target.pos);\n        const minDistance = this.cell.size + target.size;\n\n        return distance <= minDistance;\n    }\n\n    considerFight(target: Cell) {\n        return this.cell.size - target.size;\n    }\n\n}\n","exports.buffer = function buffer(Class) {\n    const bufferProps = Class._bufferProps = Class._bufferProps || [];\n\n    Class._isDoubleBuffer = true;\n\n    Object.assign(Class.prototype, {\n\n        getState() {\n            const prev = {};\n\n            for (const { prop, state } of bufferProps) {\n                prev[prop] = this[state];\n            }\n\n            return prev;\n        },\n\n        setState(newState) {\n            this._isBufferDirty = false;\n\n            for (const { prop, state, next } of bufferProps) {\n                this[state] = newState[prop];\n                this[next] = newState[prop];\n            }\n        },\n\n        flushState() {\n            if (!this._isBufferDirty) {\n                return;\n            }\n\n            this._isBufferDirty = false;\n\n            for (const { state, next } of bufferProps) {\n                this[state] = this[next];\n            }\n        },\n\n    });\n}\n\nexports.bufferProp = function bufferProp(prototype, key) {\n    const Class = prototype.constructor;\n    const bufferProps = Class._bufferProps = Class._bufferProps || [];\n    const state = `_${key}`;\n    const next = `_${key}_next`;\n\n    bufferProps.push({\n        prop: key,\n        state,\n        next,\n    });\n\n    Object.defineProperty(prototype, key, {\n\n        get() {\n            return this[state];\n        },\n\n        set(value) {\n            this[next] = value;\n            this._isBufferDirty = true;\n        },\n\n    });\n}\n","import Stat from '../stat';\nimport Vector from '../vector';\nimport Cell from './index';\nimport { buffer, bufferProp } from './state-decorators';\n\n@buffer\nexport default class CellState {\n\n    private stats = new Map<Stat, number>();\n\n    @bufferProp\n    isAlive: boolean;\n\n    @bufferProp\n    size: number;\n\n    @bufferProp\n    pos: Vector;\n\n    @bufferProp\n    velocity: Vector;\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    getStat(key: Stat) {\n        return this.stats.get(key);\n    }\n\n    setStat(key: Stat, value: number) {\n        this.stats.set(key, value);\n    }\n\n    //\n    // Methods injected by decorator\n    //\n\n    getState(): IStateScreenshot {\n        return null;\n    }\n\n    setState(newState: IStateScreenshot) {}\n\n    flushState() {}\n\n}\n\nexport interface IStateScreenshot {\n    isAlive: boolean;\n    size: number;\n    pos: Vector;\n    velocity: Vector;\n}\n","import Emitter, { Listener } from '../emitter';\nimport Stat from '../stat';\nimport Vector from '../vector';\nimport World from '../world';\nimport CellBehavior from './behavior';\nimport CellBody from './body';\nimport CellDiet, { IEnergySource, IEnergySourceConstructor } from './diet';\nimport CellPhysic from './physic';\nimport CellRelations from './relations';\nimport CellRenderer from './renderer';\nimport CellSenses from './senses';\nimport CellState, { IStateScreenshot } from './state';\n\nlet lastId = 0;\nconst cells: Cell[] = (window as any).cells = [];\n\nexport default class Cell {\n\n    private behavior = new CellBehavior(this);\n    private diet = new CellDiet(this);\n    private relations = new CellRelations(this);\n    private renderer = new CellRenderer(this);\n    private senses = new CellSenses(this);\n    private state = new CellState(this);\n    private body = new CellBody(this, this.state);\n    private physic = new CellPhysic(this, this.state);\n    private emitter = new Emitter();\n\n    constructor(\n        public id = lastId++,\n    ) {\n        cells[this.id] = this;\n        this.flushState();\n    }\n\n    toString() {\n        return `[Cell ${this.id}]`;\n    }\n\n    toJSON() {\n        return {\n            $type: 'cell',\n            ...this.getState(),\n        }\n    }\n\n    //\n    // STATE\n    //\n\n    getStat(key: Stat) {\n        return this.state.getStat(key);\n    }\n\n    setStat(key: Stat, value: number) {\n        this.state.setStat(key, value);\n    }\n\n    getState() {\n        return this.state.getState();\n    }\n\n    setState(value: IStateScreenshot) {\n        return this.state.setState(value);\n    }\n\n    flushState() {\n        return this.state.flushState();\n    }\n\n    //\n    // SIGNALS\n    //\n\n    on(signal: string, listener: Listener) {\n        this.emitter.on(signal, listener);\n    }\n\n    emit(signal: string, argument: any) {\n        this.emitter.emit(signal, argument);\n    }\n\n    //\n    // BODY\n    //\n\n    get isAlive() {\n        return this.body.isAlive;\n    }\n\n    get size() {\n        return this.body.size;\n    }\n    set size(value) {\n        this.body.size = value;\n    }\n\n    get energy() {\n        return this.body.energy;\n    }\n    set energy(value) {\n        this.body.energy = value;\n    }\n\n    canMitos() {\n        return this.body.canMitos();\n    }\n\n    mitos() {\n        return this.body.mitos();\n    }\n\n    die() {\n        return this.body.die();\n    }\n\n    //\n    // DIET\n    //\n\n    setDietType(Type: IEnergySourceConstructor, nutrition = 1) {\n        this.diet.addType(Type, nutrition);\n    }\n\n    eat(target: IEnergySource) {\n        return this.diet.eat(target);\n    }\n\n    canEat(target: IEnergySource) {\n        if (target instanceof Cell && this.isFamily(target)) {\n            return false;\n        }\n\n        return this.considerFood(target) > 0;\n    }\n\n    considerFood(target: IEnergySource) {\n        const dietFactor = this.diet.consider(target);\n\n        if (target instanceof Cell) {\n            return dietFactor * this.considerFight(target);\n        }\n\n        return dietFactor;\n    }\n\n    //\n    // SENSES\n    //\n\n    getVisionRange() {\n        return this.senses.getVisionRange();\n    }\n\n    getVisibleEntities(map: World) {\n        return this.senses.getVisibleEntities(map);\n    }\n\n    canSee(target: Cell) {\n        return this.senses.canSee(target);\n    }\n\n    isTouching(target: Cell) {\n        return this.senses.isTouching(target);\n    }\n\n    considerFight(target: Cell) {\n        return this.senses.considerFight(target);\n    }\n\n    //\n    // RELATIONS\n    //\n\n    setParent(target: Cell) {\n        this.relations.setParent(target);\n    }\n\n    isFamily(target: Cell) {\n        return this.relations.isFamily(target);\n    }\n\n    isParentOf(target: Cell) {\n        return this.relations.isParentOf(target);\n    }\n\n    isChildOf(target: Cell) {\n        return this.relations.isChildOf(target);\n    }\n\n    isSibling(target: Cell) {\n        return this.relations.isSibling(target);\n    }\n\n    //\n    // PHYSIC\n    //\n\n    get pos() {\n        return this.physic.pos;\n    }\n    set pos(value) {\n        this.physic.pos = value;\n    }\n\n    get velocity() {\n        return this.physic.velocity;\n    }\n    set velocity(value) {\n        this.physic.velocity = value;\n    }\n\n    shove(force: Vector) {\n        return this.physic.shove(force);\n    }\n\n    move() {\n        return this.physic.move();\n    }\n\n    //\n    // BEHAVIOR\n    //\n\n    tick(map: World) {\n        return this.behavior.tick(map);\n    }\n\n    //\n    // RENDERER\n    //\n\n    render(context: CanvasRenderingContext2D) {\n        return this.renderer.render(context);\n    }\n\n}\n","import Cell from './cell';\nimport { IEnergySource } from './cell/diet';\nimport Vector from './vector';\n\nexport default class World {\n\n    private entities = new Set<IWorldEntity>();\n\n    constructor(\n        readonly size: Vector,\n    ) {}\n\n    add(entity: IWorldEntity) {\n        this.entities.add(entity);\n    }\n\n    remove(entity: IWorldEntity) {\n        this.entities.delete(entity);\n    }\n\n    getEntitiesAlive() {\n        return [...this.entities];\n    }\n\n    getEntitiesAt(point: Vector) {\n        const result: IWorldEntity[] = [];\n\n        for (const entity of this.entities) {\n            const { x, y } = point.diff(entity.pos);\n            const { size } = entity;\n            const isInBox = x < size && y < size;\n\n            if (isInBox && entity.pos.distance(point) <= size) {\n                result.push(entity);\n            }\n        }\n\n        return result;\n    }\n\n    getEntitiesIn(point: Vector, radius: number) {\n        const rawStart = point.sub({ x: radius, y: radius });\n        const rawEnd = point.add({ x: radius, y: radius });\n        const result: IWorldEntity[] = [];\n\n        for (const entity of this.entities) {\n            const { size } = entity;\n            const start = rawStart.sub({ x: size, y: size });\n            const end = rawEnd.add({ x: size, y: size });\n            const { x, y } = entity.pos\n            const range = radius + entity.size;\n            const isInBox = x >= start.x && x <= end.x && y >= start.y && y <= end.y;\n\n            if (isInBox && entity.pos.distance(point) <= range) {\n                result.push(entity);\n            }\n        }\n\n        return result;\n    }\n\n}\n\nexport interface IWorldEntity<T = EntityState> extends IEnergySource, StateHolder<T> {\n    id: number;\n    size: number;\n    pos: Vector;\n    tick(map: World): void;\n    render(context: CanvasRenderingContext2D): void;\n}\n\nexport interface StateHolder<T> {\n    getState(): T;\n    setState(state: T): void;\n    flushState(): void;\n}\n\nexport interface EntityState {\n\n}\n","import Cell from '../cell';\nimport { random } from '../math';\nimport Stat from '../stat';\nimport Vector from '../vector';\nimport World from '../world';\nimport Game from './index';\n\nexport default class GameEntities {\n\n    world: World;\n\n    constructor(\n        private game: Game,\n        mapSize: Vector,\n    ) {\n        this.world = new World(mapSize);\n    }\n\n    addCell(position: Vector) {\n        const cell = new Cell();\n\n        cell.size = 4 + random(2);\n        cell.pos = position;\n\n        this.setUpCell(cell);\n\n        return cell;\n    }\n\n    reviveCell(id: number) {\n        const cell = new Cell(id);\n\n        this.setUpCell(cell);\n\n        return cell;\n    }\n\n    private setUpCell(cell: Cell) {\n        cell.setStat(Stat.ESCAPE_ACCELERATION, 1);\n        cell.setStat(Stat.FRICTION, 0.3);\n        cell.setStat(Stat.HUNT_ACCELERATION, 1);\n        cell.setStat(Stat.MAX_BITE_SIZE, 10);\n        cell.setStat(Stat.MAX_RADIUS, 200);\n        cell.setStat(Stat.MAX_VELOCITY, 10);\n        cell.setStat(Stat.MITOSIS_MIN_RADIUS, 50);\n        cell.setStat(Stat.VISION_RANGE, 300);\n\n        cell.flushState();\n\n        this.world.add(cell);\n    }\n\n    getEntitiesAlive() {\n        return this.world.getEntitiesAlive();\n    }\n\n    tickEntities() {\n        const { world } = this;\n        const entities = this.getEntitiesAlive();\n\n        for (const entity of entities) {\n            if (entity instanceof Cell && !(entity as Cell).isAlive) {\n                world.remove(entity);\n                continue;\n            }\n\n            entity.tick(world);\n        }\n\n        return entities;\n    }\n\n}\n","import Cell from '../cell';\nimport Vector from '../vector';\nimport Game from './index';\n\nexport default class GameInteraction {\n\n    mouse: Vector = null;\n    private isListening = false;\n    private inspector = new Set<Cell>();\n    private isHistoryEnabled: boolean;\n\n    constructor(\n        private game: Game,\n        { isHistoryEnabled }: GameInteractionOptions = {},\n    ) {\n        this.onClick = this.onClick.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onKeyPress = isHistoryEnabled\n            ? this.onKeyPressHistory.bind(this)\n            : this.onKeyPress.bind(this);\n    }\n\n    interact() {\n        const { game } = this;\n        const { world } = game;\n\n        if (!this.mouse) {\n            return;\n        }\n\n        const hover = world.getEntitiesAt(this.mouse);\n        const inspect = new Set([ ...this.inspector, ...hover as Cell[] ]);\n\n        for (const cell of inspect) {\n            game.renderCellDetails(cell);\n        }\n    }\n\n    addListeners(canvas: HTMLCanvasElement) {\n        if (this.isListening) {\n            return false;\n        }\n\n        document.addEventListener('keypress', this.onKeyPress);\n        canvas.addEventListener('mousemove', this.onMouseMove);\n        canvas.addEventListener('click', this.onClick);\n    }\n\n    private onClick(event: MouseEvent) {\n        this.mouse = Vector.from(event);\n\n        const { game, inspector } = this;\n        const { world } = game;\n        const hover = world.getEntitiesAt(this.mouse);\n\n        for (const cell of hover as Cell[]) {\n            if (inspector.has(cell)) {\n                inspector.delete(cell);\n            } else {\n                inspector.add(cell);\n            }\n        }\n\n        this.game.updateView();\n    }\n\n    private onKeyPress(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'Space':\n                this.game.isPaused = !this.game.isPaused;\n        }\n    }\n\n    private onKeyPressHistory(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'Space':\n                this.game.isPaused = !this.game.isPaused;\n                break;\n\n            case 'KeyA':\n            case 'KeyJ':\n                this.game.playback()\n                break;\n\n            case 'KeyS':\n            case 'KeyK':\n                this.game.stepback();\n                break;\n\n            case 'KeyD':\n            case 'KeyL':\n                this.game.step();\n                break;\n\n            case 'KeyF':\n            case 'Semicolon':\n                this.game.play();\n                break;\n\n            // default:\n            //     console.log(`KEYPRESS ${event.code}`);\n        }\n    }\n\n    private onMouseMove(event: MouseEvent) {\n        this.mouse = Vector.from(event);\n        this.game.updateView();\n    }\n\n}\n\nexport interface GameInteractionOptions {\n    isHistoryEnabled?: boolean;\n}\n","import Cell from '../cell';\nimport { TAU } from '../math';\nimport Vector from '../vector';\nimport Game from './index';\n\nexport default class GameRenderer {\n\n    constructor(\n        private game: Game,\n        private canvas: HTMLCanvasElement,\n    ) {}\n\n    renderEntities() {\n        const { game, canvas } = this;\n        const { width, height } = canvas;\n        const entities = game.getEntitiesAlive();\n        const context = canvas.getContext('2d');\n\n        context.clearRect(0, 0, width, height);\n\n        for (const entity of entities) {\n            entity.render(context);\n        }\n    }\n\n    renderCellDetails(cell: Cell) {\n        this.renderCellVision(cell);\n        this.renderCellBehavior(cell);\n    }\n\n    private renderCellVision(cell: Cell) {\n        for (const visible of cell.getVisibleEntities(this.game.world)) {\n            this.drawLine(cell.pos, visible.pos, {\n                width: 0.5,\n                color: 'rgba(0, 0, 0, 50)',\n            });\n        }\n\n        const visionRange = cell.getVisionRange();\n\n        this.drawCircle(cell.pos, visionRange, {\n            color: 'red',\n        });\n\n    }\n\n    private renderCellBehavior(cell: Cell) {\n        const velocityMultiplier = 100;\n        const velocityLine = cell.velocity.multiply({\n            x: velocityMultiplier,\n            y: velocityMultiplier,\n        });\n\n        this.drawLine(cell.pos, velocityLine.add(cell.pos), {\n            color: 'blue',\n            width: 2,\n        });\n    }\n\n    drawLine(from: Vector, to: Vector, {\n        color = 'black',\n        width = 1,\n    } = {}) {\n        const context = this.canvas.getContext('2d');\n\n        context.lineWidth = width;\n        context.strokeStyle = color;\n        context.beginPath();\n        context.moveTo(from.x, from.y);\n        context.lineTo(to.x, to.y);\n        context.closePath();\n        context.stroke();\n    }\n\n    drawCircle(at: Vector, radius: number, {\n        color = 'black',\n        width = 1,\n    } = {}) {\n        const context = this.canvas.getContext('2d');\n\n        context.lineWidth = width;\n        context.strokeStyle = color;\n        context.beginPath();\n        context.arc(at.x, at.y, radius, 0, TAU);\n        context.closePath();\n        context.stroke();\n    }\n\n}\n","import Game from './index';\nimport { min, max } from '../math';\nimport Cell from '../cell';\nimport { IStateScreenshot } from '../cell/state';\nimport { IWorldEntity } from '../world';\n\nexport default class GameState {\n\n    private history = new Map<number, EntitiesState>();\n    private maxHistory: number;\n    private initialStep: EntitiesState;\n\n    private get olderStepSaved() {\n        return min(...this.history.keys());\n    }\n\n    private get newerStepSaved() {\n        return max(...this.history.keys());\n    }\n\n    constructor(\n        private game: Game,\n        { maxHistory }: GameStateOptions = {},\n    ) {\n        this.maxHistory = maxHistory;\n    }\n\n    tick(cursor: number) {\n        if (this.hasStep(cursor)) {\n            this.setState(this.history.get(cursor));\n            return;\n        }\n\n        if (cursor < this.olderStepSaved) {\n            if (cursor !== 0) {\n                console.warn('Wiped saved history');\n            }\n\n            this.reset();\n        }\n\n        while (!this.hasStep(cursor)) {\n            this.processStep();\n        }\n    }\n\n    loadForeignState(state: EntitiesState) {\n        this.initialStep = state;\n        this.reset();\n    }\n\n    getState() {\n        return this.history.get(this.newerStepSaved);\n    }\n\n    reset() {\n        this.setState(this.initialStep);\n        this.history.clear();\n        this.history.set(0, this.initialStep);\n    }\n\n    hasStep(cursor: number) {\n        return this.history.has(cursor);\n    }\n\n    saveInitialStep() {\n        const entities = this.game.tickEntities() as IWorldEntity<IStateScreenshot>[];\n        const state: EntitiesState = {};\n\n        for (const entity of entities) {\n            state[entity.id] = entity.getState();\n        }\n\n        this.initialStep = state;\n        this.reset();\n    }\n\n    setState(state: EntitiesState) {\n        const entities = this.game.getEntitiesAlive();\n        const ids = new Set(Object.keys(state).map(Number));\n\n        for (const entity of entities) {\n            const entityState = state[entity.id];\n            ids.delete(entity.id);\n\n            if (entityState) {\n                entity.setState(state[entity.id]);\n            } else if (entity instanceof Cell) {\n                entity.die();\n            }\n        }\n\n        for (const id of ids) {\n            const cell = this.game.reviveCell(id);\n\n            cell.setState(state[id]);\n        }\n    }\n\n    private processStep() {\n        const entities = this.game.tickEntities() as IWorldEntity<IStateScreenshot>[];\n        const newState: EntitiesState = {};\n\n        for (const entity of entities) {\n            entity.flushState();\n            newState[entity.id] = entity.getState();\n        }\n\n        this.saveStep(newState);\n    }\n\n    private saveStep(newState: EntitiesState) {\n        const { history } = this;\n\n        history.set(this.newerStepSaved + 1, newState);\n\n        if (history.size > this.maxHistory) {\n            history.delete(this.olderStepSaved);\n        }\n    }\n\n}\n\nexport interface GameStateOptions {\n    maxHistory?: number;\n}\n\nexport interface EntitiesState {\n    [id: number]: IStateScreenshot;\n}\n","export default class GameTicker {\n\n    private _speed = 1;\n    private cursor = -1;\n    private isRunning = false;\n    isPaused = false;\n\n    get speed() {\n        return this._speed;\n    }\n    set speed(value) {\n        if (value !== 1 && value !== -1) {\n            throw new Error(`Invalid speed ${value}`);\n        }\n\n        this._speed = value;\n    }\n\n    get isForward() {\n        return this.speed === 1;\n    }\n\n    get isBackwards() {\n        return this.speed === -1;\n    }\n\n    get isAtBegining() {\n        return this.cursor <= 0;\n    }\n\n    constructor(\n        private callback: GameTickerCallback,\n    ) {\n        this.onTick = this.onTick.bind(this);\n    }\n\n    //\n    // Timer execution\n    //\n\n    start() {\n        if (this.isRunning) {\n            return;\n        }\n\n        this.isRunning = true;\n        requestAnimationFrame(this.onTick);\n    }\n\n    stop() {\n        this.isRunning = false;\n    }\n\n    //\n    // Flow control\n    //\n\n    play() {\n        this.speed = 1;\n        this.isPaused = false;\n        this.start();\n    }\n\n    playback() {\n        this.speed = -1;\n        this.isPaused = false;\n        this.start();\n    }\n\n    step() {\n        this.speed = 1;\n        this.isPaused = true;\n        this.execute();\n    }\n\n    stepback() {\n        this.speed = -1;\n        this.isPaused = true;\n        this.execute();\n    }\n\n    pause() {\n        this.isPaused = true;\n    }\n\n    //\n    // Implementation details\n    //\n\n    private execute() {\n        if (this.isBackwards && this.isAtBegining) {\n            console.warn(`Can't go further in history!`);\n            this.isPaused = true;\n            return;\n        }\n\n        this.cursor += this.speed;\n        this.callback.call(null, {\n            turn: this.cursor,\n        });\n    }\n\n    private onTick() {\n        if (!this.isRunning) {\n            return;\n        }\n\n        requestAnimationFrame(this.onTick);\n\n        if (!this.isPaused) {\n            this.execute();\n        }\n    }\n\n}\n\nexport type GameTickerCallback = () => void;\n\nexport interface GameTickerParams {\n    turn: number;\n}\n","import Cell from '../cell';\nimport Vector from '../vector';\nimport GameEntities from './entities';\nimport GameInteraction from './interaction';\nimport GameRenderer from './renderer';\nimport GameState, { EntitiesState } from './state';\nimport GameTicker, { GameTickerParams } from './ticker';\nimport { IWorldEntity, EntityState } from '../world';\n\nexport default class Game {\n\n    private entities: GameEntities;\n    private interaction: GameInteraction;\n    private renderer: GameRenderer;\n    private state: GameState;\n    private ticker: GameTicker;\n    private onTick: (params: GameOnTickParams) => void;\n\n    get world() {\n        return this.entities.world;\n    }\n\n    constructor(\n        private canvas: HTMLCanvasElement,\n        mapSize: Vector,\n        {\n            maxHistory = 100,\n            onTick,\n        }: GameOptions = {},\n    ) {\n        this.onTick = onTick;\n        this.entities = new GameEntities(this, mapSize);\n        this.renderer = new GameRenderer(this, canvas);\n        this.state = new GameState(this, { maxHistory });\n        this.ticker = new GameTicker(this.tick.bind(this));\n        this.interaction = new GameInteraction(this, {\n            isHistoryEnabled: Boolean(maxHistory),\n        });\n    }\n\n    init() {\n        this.addListeners();\n        this.state.saveInitialStep();\n        this.start();\n        this.pause();\n        this.render();\n    }\n\n    tick({ turn: tick }: GameTickerParams) {\n        const entities = this.getEntitiesAlive();\n\n        this.state.tick(tick);\n        this.updateView();\n\n        this.onTick({ tick, entities });\n    }\n\n    updateView() {\n        this.render();\n        this.interaction.interact();\n    }\n\n    //\n    // TICKER\n    //\n\n    get isPaused() {\n        return this.ticker.isPaused;\n    }\n    set isPaused(value: boolean) {\n        this.ticker.isPaused = value;\n    }\n\n    get speed() {\n        return this.ticker.speed;\n    }\n    set speed(value: number) {\n        this.ticker.speed = value;\n    }\n\n    goTo(step: number) {\n        return this.state.tick(step);\n    }\n\n    start() {\n        return this.ticker.start();\n    }\n\n    stop() {\n        return this.ticker.stop();\n    }\n\n    play() {\n        return this.ticker.play();\n    }\n\n    playback() {\n        return this.ticker.playback();\n    }\n\n    pause() {\n        return this.ticker.pause();\n    }\n\n    step() {\n        return this.ticker.step();\n    }\n\n    stepback() {\n        return this.ticker.stepback();\n    }\n\n    //\n    // ENTITIES\n    //\n\n    getEntitiesAlive() {\n        return this.entities.getEntitiesAlive();\n    }\n\n    addCell(position: Vector) {\n        return this.entities.addCell(position);\n    }\n\n    reviveCell(id: number) {\n        return this.entities.reviveCell(id);\n    }\n\n    tickEntities() {\n        return this.entities.tickEntities();\n    }\n\n    //\n    // INTERACTION\n    //\n\n    addListeners() {\n        this.interaction.addListeners(this.canvas);\n    }\n\n    //\n    // STATE\n    //\n\n    getState() {\n        return this.state.getState();\n    }\n\n    setState(value: EntitiesState) {\n        return this.state.loadForeignState(value);\n    }\n\n    //\n    // RENDER\n    //\n\n    render() {\n        return this.renderer.renderEntities();\n    }\n\n    renderCellDetails(cell: Cell) {\n        return this.renderer.renderCellDetails(cell);\n    }\n\n}\n\nexport interface GameOptions {\n    maxHistory?: number;\n    onTick?(params: GameOnTickParams): void;\n}\n\nexport interface GameOnTickParams {\n    tick: number;\n    entities: IWorldEntity<EntityState>[];\n}","import Vector from '../src/vector';\n\nexport default {\n\n    load(id: string) {\n        const json = localStorage.getItem(id);\n\n        return json ? JSON.parse(json, reviver) : null;\n    },\n\n    save(state: any) {\n        const id = getFormattedDate(new Date());\n        const json = JSON.stringify(state)\n\n        localStorage.setItem(id, json);\n\n        this.trim();\n    },\n\n    rename(id: string, newName: string) {\n        localStorage.setItem(newName, localStorage.getItem(id));\n    },\n\n    log() {\n        const keys = Object.keys(localStorage);\n\n        if (!keys.length) {\n            return;\n        }\n\n        console.log(`Found stored states:`);\n\n        for (const key of keys) {\n            console.log(`  load(\"${key}\")`);\n        }\n    },\n\n    trim() {\n        const keys = Object.keys(localStorage);\n\n        while (keys.length > 10) {\n            if (isDate(keys[0])) {\n                localStorage.removeItem(keys[0]);\n            }\n\n            keys.shift();\n        }\n    }\n\n};\n\nfunction reviver(key, value) {\n    if (typeof value !== 'object' || !value.$type) {\n        return value;\n    }\n\n    if (value.$type === 'vector') {\n        return Vector.from(value);\n    }\n\n    return value;\n}\n\nfunction pad(value: number, length: number) {\n    return (String(value) as any).padStart(length, '0');\n}\n\nfunction getFormattedDate(value: Date) {\n    const year = value.getFullYear();\n    const month = pad(value.getMonth() + 1, 2);\n    const date = pad(value.getDate(), 2);\n    const hour = pad(value.getHours(), 2);\n    const minutes = pad(value.getMinutes(), 2);\n    const seconds = pad(value.getSeconds(), 2);\n    const milliseconds = pad(value.getMilliseconds(), 3);\n\n    return `${year}-${month}-${date} ${hour}:${minutes}:${seconds}.${milliseconds}`;\n}\n\nfunction isDate(value: string) {\n    return getFormattedDate(new Date(value)) === value;\n}","import Game, { GameOnTickParams } from '../src/game';\nimport Vector from '../src/vector';\nimport { random, round } from '../src/math';\nimport Cell from '../src/cell';\nimport state from './persisted-state';\n\nmain();\n\nasync function main() {\n    await domLoaded();\n\n    const $fps = document.querySelector('#fps');\n    const $entities = document.querySelector('#entities');\n    const $tick = document.querySelector('#tick');\n\n    const width = window.innerWidth;\n    const height = window.innerHeight - 4;\n\n    console.log({ width, height });\n\n    let prev = Date.now();\n    const query = parseQuery();\n    const entities = query.get('cells') || 10;\n    const canvas = document.querySelector('canvas#world') as HTMLCanvasElement;\n    const game = new Game(canvas, Vector.of(width, height), {\n        maxHistory: query.get('history'),\n        onTick,\n    });\n\n    canvas.width = width;\n    canvas.height = height;\n\n    for (let i = 0; i < entities; i++) {\n        const x = random(0, width);\n        const y = random(0, height);\n        const cell = game.addCell(Vector.of(x, y));\n\n        cell.setDietType(Cell);\n    }\n\n    game.init();\n    state.save(game.getState());\n    state.log();\n\n    if (!query.get('pause')) {\n        game.play();\n    }\n\n    Object.assign(window, {\n        game,\n        rename: state.rename,\n        load(id: string) {\n            game.setState(state.load(id));\n            game.render();\n        },\n    });\n\n    function onTick({ tick, entities }: GameOnTickParams) {\n        const now = Date.now();\n        const delta = now - prev;\n\n        prev = now;\n        $tick.innerHTML = String(tick);\n        $entities.innerHTML = String(entities.length);\n        $fps.innerHTML = String(round(1000 / delta, 0));\n    }\n}\n\nfunction domLoaded() {\n    return new Promise(resolve => window.addEventListener('DOMContentLoaded', resolve));\n}\n\nfunction parseQuery() {\n    const keyValue = window.location.search\n        .substr(1)\n        .split('&')\n        .filter(Boolean)\n        .map((entry): [ string, number ] => {\n            const [ key, value ] = entry.split('=');\n            const num = parseInt(value);\n\n            if (isNaN(num)) {\n                throw new Error(`Invalid option \"${key}\" is not a number \"${value}\" \"${num}\"`)\n            }\n\n            return [ key, num ];\n        })\n\n    return new Map<string, number>(keyValue);\n}"]}