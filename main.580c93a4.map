{"version":3,"sources":["../src/emitter.ts","../src/stat.ts","../src/cell/behavior.ts","../src/math.ts","../src/cell/body.ts","../src/cell/diet.ts","../src/vector.ts","../src/cell/physic.ts","../src/cell/relations.ts","../src/cell/renderer.ts","../src/cell/senses.ts","../src/cell/state-decorators.js","../src/cell/state.ts","../src/cell/index.ts","../src/cell.ts","../src/world.ts","../src/game/entities.ts","../src/game/interaction.ts","../src/game/renderer.ts","../src/game/state.ts","../src/game/ticker.ts","../src/game/index.ts","main.ts"],"names":["exports","buffer","Class","bufferProps","_bufferProps","_isDoubleBuffer","Object","assign","prototype","getState","prev","prop","state","setState","newState","_isBufferDirty","next","flushState","bufferProp","key","constructor","push","defineProperty","get","set","value"],"mappings":";;;;AAAA,MAAA,OAAA,CAAA;AAAA,kBAAA;AAEY,ACFZ,IAAK,IAAL,KDEY,SAAA,GAAY,IAAI,GAAJ,EAAZ;AAsBX,ACxBD,CAAA,UAAK,IAAL,EAAS;ADIL,ACHA,ODGG,ECHH,IDGA,CCHA,CDGmB,QAAnB,EAAqC,UCHrC,IAAA,CAAA,IAAA,qBAAA;ADII,ACHJ,SAAA,GDGQ,CAAC,CCHT,IDGc,MCHd,GDGS,CAAe,ACHxB,CAAA,EDGS,CAAmB,CCH5B,KDGS,CAAL,EAAiC,ECHrC;ADIQ,AGNC,AFGT,QEHS,CFGT,CEHS,GAAK,CFGd,GDGa,CGNM,EAAV,MHMD,CAAe,GAAf,CAAmB,ECH3B,IDGQ,ACHR,CAAA,CDGmC,EAA3B,CCHR,mBAAA;ACHJ,AFOS,AGNI,AFGT,MCJJ,ECCa,CFGT,EEHS,GAAM,AFGf,CCJJ,ICCwB,EAAL,GAAU,CAAhB,IFGT,ECJJ,EDII,CAAA,IAAA,CCJJ,SAAA,CAAA,CAAA,GDII;ACDJ,AFMQ,AGNK,AFET,MCFJ,ECAa,CFET,EEFS,EHMA,CGNM,AFEf,ECFJ,GCAwB,GHMhB,AGNK,CHMU,GAAf,ACJJ,CDIuB,GCJvB,CAAA,CCFJ,CFMQ,EAA2B,ACJ/B,IDII,CENR,AFMwC,OCJpC,CDII,CENR,CAAA,CAAA;AAEA,AFKK,AGNQ,AFET,MCDJ,ECDa,CFET,EEFS,GAAM,AFEf,ICDJ,CAAA,ACDwB,GAAX,YFET,IAAA,CAAA,IAAA,oBAAA;ACCA,AFKA,AGPS,AFET,QEFS,CHOJ,ACLL,EEFS,GAAM,AFEf,CDKA,CEJY,CFIS,EGPD,CDEpB,EACsB,ACHb,GHOT,EAAkC,CCLlC,IAAA,CAAA,IAAA,cAAA;ACCY,AERhB,AJaQ,AGPK,AFET,MGRJ,EDMa,CFET,GEFS,CDEG,CFKF,ACLV,CGRJ,ADMoB,EDEJ,GAAA,ACFS,GCNzB,CFQgB,ACFH,EHOa,ECLtB,GDK2B,CIb/B,AHQI,CGRJ,AHQI,IAAA,GDKsB,CAAe,GAAf,CAAmB,MAAnB,ACLtB,CDKI;AEJA,AERR,AJcQ,AGRK,AFEZ,AKTD,CLAA,EAAK,GGCL,AEDA,EHOa,GAAA,CHQD,ACfP,CDeQ,CGRM,CCNnB,AEDA,IHOwB,AFPf,EAAJ,CDeG,AGRK,AFPb,CKAA,CNewB,OIdxB,AEDA,CAAA,OFCA,SAAA,CAAA,CAAA;AFUI,AETJ,ACDA,ALeY,AGPZ,AFEA,AKTA,MFAA,ACDA,ACCA,ELSA,CCAS,ACFT,GDEI,AITJ,CAAA,CJSmB,CGVnB,AFQA,AFEA,CGTA,ADOuB,EFER,CEFf,EAAqC,CFErC,EEFA,EAAiD,KERjD,CDCA,OCDA,CDCA,QCDA,CDCA,ACDA,CDCA,ACDA,CDCA;AFUQ,AEPR,ACDA,ALaS,AGPL,AG0BA,MF/BJ,ACDA,EFMQ,MDEM,AEPd,ACDA,CDCA,ACDA,CCiCiB,CADb,CH1Bc,CG4BD,CAFb,EAEsB,EH5BlB,CDEiB,ICFI,CDEC,ACF1B,EAA4B,EDEP,CAAU,kBAAV,CAA6B,GAA7B,CAAjB;AAEA,AEeJ,ACrBA,ALWI,AGRA,AG0BS,aJvBJ,AFKA,AMkBI,CAAA,CH1BF,CCmBC,ACrBA,CC4BC,CAAA,CJvBE,AFKA,CIUf,ACrBA,AFGgB,ECoBJ,ACtBU,GHKlB,CCHO,CCkBX,AJVI,CGRA,CDGqB,AEiBG,EJZD,MELvB,EAA+B,CFK/B,EAAkC;AEJ9B,AEeI,ACrBA,AGPhB,ARkBY,AGRP,AG0BY,KH5Bb,CKRJ,KLUW,ECkBK,ACrBA,AC6BC,CAAA,CH1BF,CDGC,CEeA,ACrBA,AC6BC,CAAA,CEpCjB,CJ4BgB,ACrBA,AGPhB,CRkBqB,GIUL,ACrBA,CFGS,IHQb,EGRG,GDGmB,ECHE,CAAzB,EAA4B,GDGL,OAAtB,EAA4B;AACxB,AEeA,ACzBJ,AENZ,ACMI,AReK,AGRD,AG2BA,MCxCR,MDwCY,CFTI,ACzBJ,CFOE,CIbd,CCOgB,CLMR,CCkBQ,ACzBJ,ACkCM,CAAN,CElCR,CNUiB,AEeL,ACzBI,CGCM,EFiCF,CDlCA,CDyBR,ECzBI,EAAR,ACkCkB,CCxC9B,ADwCwB,CAAhB,EAA0B,GJxBlB,CAAsB,CKhBtC,KLgBgB,IKhBhB,CAAA,CAAA;ALiBa,AEgBL,ACvBA,AETR,ACMgB,ACPhB,ATsBK,AGRG,AG2BI,MCxCZ,AEDA,OLiCa,AI1BG,CLOF,CMdd,ANcQ,EIbR,ACMgB,CJ0BR,AEQU,CFRC,CI1BH,EFkCM,CGzCtB,CDOgB,EJ0BR,CEQU,CAAU,CFRC,GKjC7B,CLiCQ,AGhCR,AEDA,QFCA,WAAA,CAAA,CAAA,GDwCyD,IAAI,EAA3C,CAAN;AJvBH,AEgBD,ACtBJ,AEPJ,ACDY,ACDZ,AEHAA,AXAA,AGeK,AG2BI,MCrCT,AEFA,EEHQC,INYI,CDsBC,AI9BD,CGJZ,ENYI,AEPJ,CAAA,AILiB,CPkCT,ACtBoC,AIT5C,CL+BmB,AK/BnB,CDCY,GJ8BJ,AI9Bc,CHQlB,EDsBsB,ACtBgC,AMZhCA,CPkClB,AI9BkB,GAAJ,EAAV,AGJK,CAAgBC,KAAhB,EAAuB;AToBhC,AEeH,ACtBG,AEJJ,ACDI,ACCJ,AERA,AXDJ,AGiBI,AG0BC,QN3CL,EWCUC,CRgBC,EDGE,AGPA,ELbb,COUgB,AEAA,ANOA,CDGR,CAAU,AGPV,ALbR,CKamB,CEJf,AEAA,CNQO,CDGH,AGPA,AEFQ,AEDU,ANOJ,CEJC,CMZCD,CXDxB,EKaQ,AEJJ,AJQuB,EEJE,AEFG,CIVFE,GRgBR,EEJd,IFI+B,GQhBf,GAAqBF,ARgBA,GAAvB,CAAX,EQhBwCE,ERgBE,GAAjD,OQhByC,IAAsB,EAA/D;AToBC,AEdD,ACOC,AEJW,ACAZ,ACAY,ANQf,AGZG,QFCI,GEDG,ECIK,AEAA,AHJZ,CEIU,AFJA,CFCV,AEDA,ECIY,AEAA,AHJS,CFCV,AEDX,ECIY,ACAZ,ACAY,AHJkB,EEIR,EDAV,AEAA;APaZ,AEfI,ACQJ,AELY,ACAR,ACNJ,AEFAF,ARMJ,AGFQ,QDSA,AFPR,EQNUG,GJQM,ACAH,ACNT,CJWA,AFPJ,CCDe,AEDA,CDSc,CFP7B,CIEgB,AENZ,CHEe,CFCC,AIGZ,CNYa,AKZL,ACAK,ACNT,ENIZ,CKEQ,CJHO,AIGU,AGRrB,ALIW,CJgBX,AEfsB,AGGV,ADJU,CGFR,AHEH,CJgBiB,ASpBJ,CLIC,CAAd,CEIP,AFJA,CKJJ,CPKI,CKHU,MAAA,CAAO,CAAP,EAAU,QAAV,EACT,QADS,CACA,EADA,EAET,QAFS,CAEA,CAFA,EAEG,GAFH,CAAd;APmBI,AEfH,ACQG,AEVI,ACKP,ACDG,ACXR,APoBA,AGZK,MIRL,MLiBY,CAAC,AEVD,CLiBE,CQxBd,GLiBkB,CEVN,GFUC,AEVkB,CFUR,CEVX,GLiBe,EGPd,CAAiB,CKjB9B,CRwBgC,IAAL,AGPd,CHOwB,AGP7B,EAA+B,AKjBvC,QRwB2B,CAAqB,AQxBhD,CAAA,CAAA,GRwB2B,CAAnB;AAEA,AEfJ,ACOQ,AELJ,ACCJ,ACDA,ACTJ,ACCIC,ARgBJ,AGXI,MINJ,ENOQ,GKEG,AERAC,ALKA,CJgBC,AEfR,CIGS,CDDC,CHFF,AEDR,CINJ,AJMgB,CJgBC,AKbT,AGTR,ACCI,CNac,AILd,AERcL,ALKA,CEId,CDDgB,AEAwB,CPahC,AMZa,CNYH,AGRA,ACRA,CAAN,CKLQM,CLKC,EDQP,CHQN,AGRgB,CHQC,AKbT,ADHS,CAAb,EAAZ,CKLA,CTqBQ,AIhBmC,CJgBvC,ASrB2B,CJQf,CLaiB,AKbV,IAAnB,WFK4C,MAAM,EAAxC,CAAN;AHSA,AEfJ,ACOC,AELD,ACCA,ACDA,ACRJ,APgBJ,AGXQ,cCGM,AEAA,CLFC,AIIH,AFLG,CJgBC,AOZJ,ACRI,GDOF,AHHK,CFCC,AIIH,AEVb,CDUQ,CFFJ,AGPkB,GNKX,AGEU,ADHV,CJgBH,AEfc,AEDA,CAAX,CJgBa,CMXhB,ACFE,AHHe,CFCrB,AIImB,AFLZ,CGMH,AHNJ,GCGiB,CEAX,CDEF,ICEA,CFJa,ACGb,CDHoB,GEIf,CFJT,ACGS,GCHT,ODGI,CAAgB,MAAhB,CADA,IAEA,KAAK,SAAL,CAAe,MAAf,CAHJ;ANaQ,AEfX,ACQG,AENH,ACKA,ACAG,ACbQ,ACARC,ARiBR,AGZK,MHYC,OOjBU,CLcF,GKdE,ECAG,CDAH,CRqBK,ECJE,COjBP,APiBS,CDIT,ACJO,CDIG,CGPC,AFGC,EDIZ,ACJO,CDIO,CCJE,CEHA,EFGT,CDIP,ACJhB,CEH2B,CAAU,MAA7B;AHQK,AEfT,ACQI,AELJ,ACKA,ACDI,ACbA,ACAI,ARkBZ,AGZI,QFAI,AGGA,CJSR,EITI,ADHO,CFAP,CFaQ,AEbC,CCQC,AELH,AEIG,CDCC,CFRX,CAAa,CFAb,AONcC,CTqBC,CEfO,CIQtB,EAAuB,ACDJ,AHPnB,EKNqB,ARkBzB,AGZ0D,CHYhC,CQlBd,CLMiD,CDQhC,CIDC,CAAtB,CNKR,EAAwC,CGZpC,CDQgC,CCR2C,KDQvE;AHQQ,AEfR,ACQA,AELA,ACKA,ACDA,ACZJ,APiBA,AGZI,WHYG,ECZE,CCQC,AIDA,CFJC,ACKA,AFRA,GFAP,CAAW,CGGC,CLYC,AQpBH,CFaI,AFRA,CFAd,CKOgB,AHPT,CJeC,AKZD,ADFH,CJcc,AEfA,ACQA,AELA,AJSA,GITlB,ELYQ,AEfR,ACQuB,AGAhB,CAAiB,ALIrB,AGXQ,CGMc,EAAzB,ANK2B,AGXb,EEOe,EHAX,CAAc,CGAzB,CAAP,CFPsB,CHWc,CAAxC,CEJsB,ACPJ,CDOd,AFIuC,AGXZ,MAAD,IAAY,OAAO,CAA/B,CAAV,CADG,EAEH,OAAO,GAAG,QAAQ,GAAR,CAAa,MAAD,IAAY,OAAO,CAA/B,CAAV,CAFG,CAAP;AJgBK,AEdL,ACOA,AQxBR,ANmBK,ACKA,ACAG,ACbA,ACDI,ARkBJ,AGTH,MOnBL,MTiBY,ECOE,CKbC,CDaC,CEdC,CEVjB,CJwBQ,CAAY,ACbA,ENME,CAAd,AOPe,ARkBA,COjBR,CNMU,AMNA,ACDAC,ERkBjB,CAAoB,COjBb,ACDQ,CFcf,CJAuB,AMdAC,CFcC,ACbA,CPiBC,CU5BjC,ERwBoC,AMdb,ARkBK,COjBS,APiBA,CQlBzB,CRkBgB,CEJG,AIAvB,CJAiC,AKbT,APiBS,CU5BzC,AHW0C,ACDAT,MNcX,CAAkB,AKbjB,CAAkB,GCDtC,CEVZ,CAAA,AFUuD,CNcN,AQxBjD,AV4BwD,COjBN,KPiBT,CEJQ,CAAK,AKbJ,CAAK,APiBU,CAArC,CAApB,UEJuB,AKbC,CLaxB,AKbA;ARqBC,AEdG,ACOJ,AQrBR,ANgBI,ACMA,ACAI,ACdH,ACDWO,ARkBX,AGRD,ASjBJ,MFAA,AEAA,ERgBQ,CLMA,EKNJ,ADCO,ASjBX,CRgBY,AQhBZ,EVqBc,AGCA,CNMC,CONC,AHLZ,CFHa,AGEb,ADCa,EJWE,AW5BnB,ANgByB,ADCN,CFHP,AIQR,ACAI,CEfaC,CHeK,CFLH,CDIC,ACJP,CJWQ,ASrBT,CLUU,GKVG,CLUC,CJWX,AIXF,CJWe,CIX5B,CKV8BC,CEPlC,APiBgD,EJWX,AGPA,EMdR,CAAb,CTqBG,CAAJ,CW5Bf,CX4B4C,OGPpC,IQrBR,CAAA,CAAA;ACJA,AZiCY,AEdH,ACOD,AQrBR,ANgBQ,ACMA,ACAA,ACbJ,ACFS,ACTb,AT4BI,AGTI,ASdJ,MDRJ,ADKA,ADFA,KT4BW,EIVE,CFKC,CQrBd,ALsBe,AFLA,CQtBf,AL2BgB,AMlBC,CbwBA,CKZT,CAAW,CCMC,AFLA,ASdhB,CVkBiB,CELb,AQZqB,CLKN,EHOE,AEMjB,CAAkB,ACbtB,APiBsB,CDEd,AMNG,AIxBf,ANmBe,CJWa,AMNA,AEbK,AJQL,ECDpB,AEMsB,CItB9B,ALsBe,ACAP,CK3BR,AN2BgC,ALIrB,CDEC,AONqB,ANI7B,ES5BJ,ANmBmC,CDIC,CICC,AHLT,CEKb,ACAP,AHL8B,COjBtC,ALsBQ,AFLoB,CQtB5B,CRsByC,CAAb,CDIP,ACJN,CAAP,EDIsC,CQrB9C,CAAA,CAAA,IRqBqB,CS1BrB,CAAA,AFGA,CEHA,AT0BwD,AOvBxD,YPuBQ;ASxBR,AZgCS,AEdJ,ACQG,AQtBR,ANgBK,ACMA,ACAG,ACbA,AETR,AT0BC,AGTI,ASdY,IHHI,ECArB,ECJA,KCOiB,EDPjB,AT0Be,AQtBf,CJsBgB,AGtBhB,CGGiB,CDPF,ECOE,CVmBT,CIAA,AGtBR,CHsBuB,CMnBN,CVmBQ,CS1BV,GT0BP,EQtBR,ADAA,CHsBgC,AGtBhC,CEJA,MDIA,AJsBuB,GAAmB,KItB1C,CAAA,CAAA,AJsB0C,GAAA,GAAM,CAAxC;APOH,AEbD,ACOI,AQtBR,ANiBI,ACMA,ACAI,ACdA,ACFI,ACQR,ATYJ,AGTI,ASnBQ,MFCZ,ETeQ,AGEA,CJUR,GGTY,CDIC,AUvBD,CXgBR,AIQU,AEdA,APkBd,CAAsB,CIVlB,AEMY,AGPA,CRDF,ACON,AQtBR,CRsBkB,CELF,AIVGF,ALWf,CEKA,AIRA,ATYJ,AGToB,CSnBR,CPwBc,AIPA,ATWW,CQpBzB,CNeJ,AUvBe,CNwBf,EHLJ,CDIwB,AICA,ACdA,AKVD,CTmBW,ESnBf,EFCvB,AJuBiC,ACdA,APkBe,AY5BpC,CZ4BZ,CELmC,CFKc,COlBrB,CDcpB,ACd8B,CJSmB,EOlBzD,EPkB6D,CDIrD,CKboB,CAAkB,GJSW,CAAW,COlBpE,APkByD,COlBzD,CAAA,AHS8C,AJSyB,CAAd,CAArD,EAAqE,GIT3B,CAAK,YAAvB,CAApB;ARqBJ,AEdI,ACOA,AQtBR,ANiBQ,ACMA,ACCA,ACfA,ACFC,ACQO,ATYZ,AGTI,AShBA,MFFR,EV2BQ,CDEC,AShC0B,INyBtB,AGCA,AIRG,CFNF,AJSA,CJWV,AEdW,AGEA,CEOC,CPKK,AGPb,AOPQ,CPOE,CGCC,CKvBnB,ANiBoB,AKFJ,CTYK,CCZN,ACOP,AFKJ,AGTkB,CDIC,COPP,ATYQ,CCZT,AGEA,ACMP,ACCA,ACfiB,CNMN,AGEO,CDCC,CDInB,CGCqB,AEdA,CLaC,CDPN,CEGF,CAAW,CCDzB,ACM0B,EJRf,ACOX,AQtBR,CTe8B,CEGQ,GFHvB,AIQP,AFLc,CITG,CNMW,AIQO,AEdA,AJSA,CFH5B,ASff,ITeyC,AMNO,EJS1B,EITqB,AJSS,CFHN,AMNO,ENM7C,CMNiB,CGTzB,CAAA,AHS0D,CGT1D,APkBsB,CAAd,SITiB,CAAjB;ARqBA,AEdH,ACQG,AQvBR,ANiBK,ACMO,ACCJ,ACdA,AEXI,AIRZ,AboCQ,AGTA,ASfJ,MFHJ,AGTA,EDYQ,KHJI,CV8BE,AIXA,ASfV,CVoBW,AKbA,AMnBf,AboCe,CKJC,ACCA,AMrBY,EHJhB,CPwBJ,AQvBR,AJwBQ,CAAY,ANGA,AGTA,CGMZ,AGzBY,CV8BE,CMNC,ACCA,CAAf,ACdgB,CEXA,AT4BT,AGTU,CGMC,ANGA,CDEC,CU9BP,EFWL,AEXH,ANmBQ,CJWE,AQnBU,AMnBhC,AboCe,AGTgB,CJWC,AMNhB,ACCR,ANGA,CKJyB,CCCC,CIxBlC,AJwBQ,CCduB,AJQK,CGMC,EPKf,AMNN,AQhChB,AV2BoB,CJWoB,AMN5B,AEb8B,CJQD,CEKC,CKvB1C,CJwBqC,GPKG,AOLhC,COjCR,AV2BoB,CU3BpB,CNmBoD,AMnBpD,AV2BkD,IJWV,CAAK,AW7B7C,AHUyD,CGVzD,CAAA,APkBoB,CAAZ,CIRO,CAAP,YRmBc,CAAd;AACA,AEdJ,ACQC,AQvBL,ANiBI,ACMY,ACCR,ACdH,ACHGG,ACOA,AIvBR,AEAA,AfoCK,AGRG,AShBA,MFHR,AGTA,AEAA,EdwBQ,AGEA,KDEK,AShBA,Cb0BC,AEdV,CAAW,AYxBf,AEAA,CX0BI,AEOY,CIxBhB,ANiBiB,AIVAC,ALYA,GFJb,AKSI,CHLa,AShBb,CXYY,AGEhB,AQdkB,CPoBC,AQhCvB,AEAA,CX0B8B,CIVtB,AIJA,Cb0BkB,Aa1BA,CPoBV,AGhBW,ALYA,CAAnB,EAAsB,EU5B9B,AEAA,AHYQ,Cb0ByB,AW7BjC,AGTA,AEAA,CZ4BkC,EJUR,CAAW,CIVC,CAA9B,CJUkB,CAAe,AW7BzC,APmByC,GAAjC,EJUsC,AIVA,IJUL,CAAU,AW7BnD,CAAA,CAAA,CX6B0B,CAAlB;AACA,AEdA,ACSJ,AQxBJ,ANiBQ,ACMK,ACCL,ACbJ,ACJQ,ACQR,AIxBJ,ACDA,ACIA,AfkCI,AGTQ,AShBP,MFHL,AGTA,ACDA,ACIA,IfkCU,COjBC,CEIC,CRAC,ACSA,AEPA,CLYC,CUdV,AIxBJ,CHSA,AJwBgB,CCbZ,ACJaC,ACQI,AKzBrB,AX6BiB,CFJT,AGEA,AWvBR,CdqBmB,ACSf,AEPe,AGNI,AQjBvB,EhBmCqB,AGLa,AFIb,AGTA,CGKb,CLTA,AKSe,EHLE,CFJC,CGElB,EEOA,CFPsB,CLYC,AOLA,AEjBnB,AKhBZ,AV4B+B,COnB/B,APmBY,CFJc,AazB1B,CNiBkC,ALYA,CCF1B,EHFkB,CAAK,AKSvB,ANI8B,AGTA,CKZ1B,AKhBZ,CHSA,CIVA,CX6B0C,CJUrB,AIVT,CJUgC,CIVC,CFJN,ADalB,CAAjB,CarCJ,AV4BY,CJUS,AW7BrB,AGTA,CdsCQ,AW7BR,AGTA,AV4BkD,CFJN,ASf5C,CIVA,CbyB0B,AazB1B,CbyBQ,AazBR;AfyCQ,AEfH,ACSG,AQvBR,ANgBK,ACMI,ACCD,ACbA,AEIA,AIvBR,ACAA,ACGI,ACLJ,AhBsCI,AGTY,ASfZ,IFHA,EGTJ,ACAA,AEFA,GNWS,CAAT,CV2BW,AYxBA,Eb0BE,CGNC,AKbA,CEIC,AOzBf,CVkCgB,AOhChB,AEIgB,ACNhB,AhBsCgB,CDER,Aa1BJ,Cb0Bc,Ca1Ba,CHWX,AMpBhB,Cb6BiB,AYhCrB,AdoCW,CMJH,AQhCR,ACKgB,Af+BM,AGTA,CJWd,AONe,CPMC,AONhB,ACbgB,CEIT,CHSW,AGTA,EVelB,AGNoB,Aa7BxB,AZwBwB,CIRC,AEId,CAAe,AMlBW,Af+BX,CGTR,CU3BtB,AV2BgC,CIRR,AEIT,CFJmB,AEI1B,ANI0B,CGKC,AHLH,EAAK,CGKX,ACbF,APiBb,AGTqB,CDKxB,CWhCR,AV2BsB,CGKmB,ACbA,AJQzB,CHS0B,MMJlC,ACbwC,EMnBhD,AboCI,CapCJ,CNmBQ,AMnBR;AduCK,AEND,ACCI,AQxBR,ANiBI,ACMI,ACAA,ACbA,ACJI,ACQP,AIrBL,ACEI,ACDY,ACFZ,AhBmCH,AGTY,ASfL,MFHF,AGPN,ITwBU,GWvBM,AHSH,CFHU,AHUT,CNaF,ACCG,AEPX,ACMW,CCAC,AQ3BA,AEHA,CZwBO,AIXN,AOZD,CFDhB,CAAA,CX+BoB,AGDZ,AS5BJ,ACDY,ACFZ,CNQkC,AEG9B,CNoBA,AQ3BkB,AEHA,AJUJ,CNoBC,AEjBA,CFiBC,AS7BR,Cb8BD,AKdU,ACJAJ,CNkBC,AQxBH,EEGf,CVqBO,AQxB+B,AFMvB,AIHM,CVqBC,AIDtB,ACbsB,CGV9B,AFM+BC,CFiBC,EJCjB,AKdU,CAAU,AKP3B,CJGe,EDIE,ACJaI,CNkBC,AID/B,ACb+B,CLc/B,EMlBe,EAAX,GDIa,CAAuB,ACJAb,ODIO,GAA9B,CAAjB,ACJI,EAAiD;ATyBzD,AEPI,ACCH,AQvBL,ANgBQ,ACMH,ACAG,ACbA,ACJQ,ACSZ,AInBA,ACDY,ACDA,ACFA,ACPhB,AjBkCA,AGDS,ASfJ,MFFL,AOhBA,EjBkCA,EUlBA,CAAA,CDcY,CKpBI,ACDA,ACFA,AhB2BhB,CCIc,AGNA,AGPA,CRoBC,AUfX,CHQY,AO1BA,AIZhB,AjBkCA,CSJuB,AKpBP,AEHA,ACPhB,EFSgB,CFEZ,ACDY,AEHA,CjBsCZ,ASxBiBS,ARarB,CSJI,AIjBI,AEJQ,ChBoCW,CEPH,AGNA,AKFY,AKpBpB,AEHA,CV+BR,CEjBQ,EDIY,AQhBZ,Cd6Ba,AGNA,ASrBzB,CLU0BE,CKRP,EZyBC,AGNA,AGPS,CNaC,AGNA,GGPN,CAAU,CCJCH,EPiBf,AGNA,CHMkB,AGNA,CIXZ,CAAd,CDIY,CAAkB,GNaJ,AGNA,IGPI,GNaJ,AGNA,CHMK,AGNA,GGPD,CAAK,MHO3B,CAAhB,KGPoB,CAApB,CNagB,CAAhB;AFQA,AENA,ACpCR,AQyBI,ANII,AC/BR,ACqCQ,ACZA,ACLQ,ACSR,AInBQ,ACNZ,ACII,ACNI,AC0BR,AdIC,ASdD,aHWS,AInBG,ACNZ,AEFQ,CjB0CE,AKbA,CHOC,AMbA,CDYC,AWRA,CJnBA,CHiBZ,ADEI,AKzBJ,CLyBe,CRSC,AKDZ,AO3BQ,AGRJ,CZ6BS,AIXAK,AMhBD,AFcF,Cb0BI,AUfd,CAAe,AO3BgB,CfoCxB,AY5BC,AIkBZ,CTRY,AMhBZ,AEFQ,CZ6Bc,AGNA,AEIlB,AQAoC,ClBejB,AENA,CQTC,CDTCF,CJWR,CLaC,AKbS,CLaC,CQnBjB,AEIP,CRSA,CGPA,EGN6B,CCLCH,CTwBhB,CAAkB,ESxBX,CAAb,ITwBwB,CQnBhC,MRmBgC,CAAK,mBAAvB,CAAd;AACA,AENH,ACrCL,AQcY,ANgBJ,AChCR,ACuCQ,ACbH,ACLQ,ACSR,AIjBG,ACRI,ACKR,ACJI,ACuBQ,AdcZ,ASxBI,QVjBR,AGFA,AF2CQ,KO3BI,AGHC,ACRD,AGwBI,ClBgBF,AKbA,ADWV,CDzCJ,AGFA,AOmBe,CNoBC,AMpBA,CTwBF,CDzCd,AGFA,AQaQ,CDMW,EFHP,AGHS,AEHH,AEmBF,EbGO,AEOf,CIvBe,AIXX,AGwBI,ALVQ,CCNC,CdgCC,AG3C1B,CE8B2B,AU3BD,CJWC,GLhB3B,CDgCgC,AU3BpB,AGwBI,ALVD,Cb0BkB,AchCR,ADMjB,ERamB,CLaD,AKbU,CLaC,EW7BV,CX6BD,AchCL,CdgCoB,AchCV,ETmBY,GLaG,AW7BvB,CAAiB,CGHnB,CAAb,CdgCiC,AKbd,CLawB,AW7B5B,CAAX,ANgBwC,CAAzB,CLaD,AKblB,CLaA;AACA,AELJ,ASxBQ,ANgBJ,AEOH,ACZD,ACNK,ACUL,AIlBC,ACJG,ACCA,ACHJ,ACRQ,Ad4CJ,ASxBH,SJjB8B,AQK1B,GfiCA,CSxBG,AIPC,AGVD,ClB8CE,AKbA,AWtBA,CRiBC,ASpBX,AboCW,CYjCC,CLMJ,AMTW,ECRX,CPiBO,AKNL,AZiCM,CJEC,AQlBjB,AJgBW,CYjCO,AEXD,CV4BM,AOlBnB,AGVI,CPiBW,EIPG,AXkCA,CAAX,CYjCD,CXsBe,ELaE,AW7BR,AIPQ,AXkCA,EYjCE,EXsBE,CDWC,CYjC5B,AZiCuB,CO3BZ,CAAa,EIPN,CAAgB,AXkCA,CJErB,AW7BF,ANgBU,ADWrB,CJEoC,AW7BhC,ANgBgC,EAAE,AUvBpB,CAAqB,EfoC1B,AKb4B,CLazC,CepCkB,CAAlB,GVuBoC,EAAa,GAAG,MAAhB,EAAf,CAArB;ALeA,AENA,ASxBI,ANiBJ,AElCR,AC4BQ,AEIJ,AIjBA,ACLI,ACCA,ACHA,ACRI,Ad4CP,ASvBD,YCNQ,AGPA,CjBuCC,AW9BD,ANiBC,AUxBA,AGVD,ChByCE,AMbA,AQjBA,EAAE,ChBoCR,AiBvCS,CjBuCC,Aa1BA,CRaV,AalCI,CbkCQ,ASnBhB,CEJU,CLMF,AGFgB,AIfP,ClB+Cb,AgBpCe,AEXD,ALqBlB,Cb0BoB,AENA,AGPhB,AUxBA,AEFI,ACRA,CPiBY,ANiBC,AGNA,ASpBA,AJaM,EEXJ,CfqCnB,CENqB,ASxBD,AKNd,CRiBgB,CSpBlB,CFEoB,AEFxB,CfiCgB,CAAU,AMbT,AQjBS,ACHA,CToBC,EHM3B,CGNiB,CAAc,CQjB/B,Cd8BgB,ASxBI,CTwBc,Ca/Bf,CAAiB,GPkBnB,CGXD,AHWwB,AOlBrB,Cb+Be,ASxBA,AIPO,IJOzB,AIPG,CJOf,AIPJ,CPkB+C,CNab,CAAK,CMbtB,CAAjB,gBNagB,CAAhB;AFOH,AENG,ASxBI,ANiBP,AEnCL,AC6BQ,ACNAM,ACUJ,AIjBI,AKjBR,AJYK,ACCG,ACHI,ACRA,Ad+CR,AS1BI,MMvBR,EZCA,AHgDQ,KO9BI,AOjBA,ChByCE,AMbA,AMbA,AEJA,AHUA,CNtBd,EUSiB,AbuCb,CGhDJ,CYDA,CfiDiB,CO9BL,AFKS,AKPA,AGPT,CAAU,ACRV,CLqB2B,CFJhB,CGFE,AEJA,AEXD,ALqBhB,EXoBmB,CSxBA,AHWC,ASpBhB,EVTZ,ASY8B,AEXlB,EhByCoB,AY1BP,CNaQ,EW9BjC,EjB2C2B,AMbC,CNaU,AMbA,CGXX,AGFN,EAAb,AEJiB,CRiBG,CNae,AiB3C3C,AHaQ,ERiBqC,CGXtB,CTwBe,ASxBE,ITwBW,ASxB5B,CAAX,AHWwC,GW9BpD,CX8BQ,AW9BR,CAAA,IjB2C6D,CAAvB,CAAX,CAAnB;AFxCR,AEyCQ,ASxBI,ANkBR,AGNI,ACPI,ACWR,AIjBI,AKlBR,AJaI,ACAI,ACHI,ACRR,Ad+CI,ASzBA,MMxBR,MfiDY,CO9BA,ANkBC,ASnBA,AIhBT,ALsBS,CXmBC,Ac9BA,CRkBC,AEIH,CDXI,CAAC,AKNT,ACLS,AXoCA,EO9BL,AEKO,CCNC,CIhBhB,CPiBiB,AFKCF,AUxBtB,CJaI,AXoCI,CCZgB,ASnBA,AELA,AEXT,CHW2B,AXoCjB,ASzBjB,CFLiB,CHYE,CNYC,CGNC,AanCzB,ALsByB,ECNL,AELO,Ed8BE,CWnBC,CFLT,CFKb,CJaR,ASnBoB,CNahB,ACP8B,AKNP,AKlB/B,CjB2C4B,AGNS,ASnBb,CAAhB,CELgB,Cd8BkB,ASxBrB,AKNqB,AHWlC,CFL4B,CEKQ,EMxB5C,AHawB,CLMH,AKNb,CLMI,ITwBJ,SiB3CR,CAAA,CAAA;AnBEA,AE0CQ,ASxBI,ANkBJ,AGNH,ACPW,ACWR,AIjBA,AKlBR,AJaQ,ACCA,ACJC,ACmBD,AdoBI,ASzBA,AO5BZ,MDIA,ACJA,EpBKA,IeYY,CJMA,AGDC,AIWA,ChBcC,AGNA,CLpCd,AUkCe,CIjBP,AEJQ,AIlBhB,CLiBiB,CfZjB,AWkBY,AEKM,CHWV,AIjBW,AKlBnB,AD6BQ,AdoBW,CAAP,ASzBQ,CFLA,AEKF,CKKI,CLLC,CAAL,CXmBO,ASxBD,ANkBC,AWvBjB,CAAkB,Cd6BlB,AYzBA,AEJA,AEemB,CHhBnB,CCCqB,AHUA,CbvB7B,AKoC8B,AUxBA,ACCtB,EAAwB,AIlBhC,CTuBwB,AOUF,CbQG,AaRS,CbQC,AcrCnC,ANwBmC,EGV3B,CEec,CFfiB,AEeA,ALLV,CFLT,AEKoB,AO5BxC,CTuBkC,CNkBT,CAAkB,AcrC3C,AD6BsB,CAAd,CPVY,AKLZ,CLKI,CEKmC,GRaJ,AQbd,CAAjB,IMxBZ,CAAA,CdqC2C,AcrC3C,CdqCgD,CezChD,CAAA,CAAA,KfyCyB,CAAjB;AHQA,ASzBI,ANkBJ,AGLJ,ACRS,ACWR,AIhBG,AKnBR,AJaY,ACEJ,ACJA,ACkBH,AdoBI,ASzBG,AO5BZ,MDIA,ACJA,OlBgDa,ASzBD,AGAC,AEJA,CXsBC,CY1BC,CEXf,AFWgB,CfiCC,ASzBL,ASvBZ,CZoCkB,AKRA,CEXC,ACEA,CLIA,AGAX,ADKY,CXoBC,AYzBA,AGRA,CfiCb,EAAgB,ASzBD,ANkBC,AGLpB,AOnBQ,AFWM,CGTV,CRiBsB,ENYF,AYzBP,AGRL,CZ0Ba,AWtBA,ACJA,AJaA,EFLN,CQnBvB,CdqCwB,AezCxB,CfyCkC,CSlBb,AGRL,AJaJ,CCLc,AGRlB,CDIA,Cd6BA,ASzBW,AMRmB,CNQN,AKJO,Cd6BC,AiB5CxC,CdqCwB,AezCxB,CfyC0C,CHOlC,ASzBW,ETyB0B,ASzBP,INkBI,AcrC1C,CRmB2C,AQnB3C,CAAA,IRmBmB,AGAX,CHAI,ANkB8B,AezC1C,CfyC+C,ASlBA,AMvB/C,CNuBQ,AMvBR,SfyCwB,CAAhB;AHQI,ASzBA,ANkBJ,AGLA,AEIJ,AIjBI,AKnBR,AJaS,ACEG,ACJA,ACVR,AdiDI,AS1BI,AO5BZ,MDIA,ACJA,EFKQ,IdiDI,CO/BA,ADiBC,AIjBA,AIlBT,AdiDS,CCbC,CGLC,AYpCf,CfyCgB,AapCH,CCDb,AFWiB,CfiCC,AEMA,AS1BA,CFLN,AKJO,CXsBL,AGLM,AMbZ,CJiBJ,AIjBiB,CHAA,CDiBkB,AUxCvC,CZoCe,AEI4B,CLClB,AGLA,AQjBb,Cd6Bc,ASzBD,AKJC,EFIL,AV+Bb,AS1BoB,CLQb,CNYe,AGPA,ADaA,CavClB,CTqBoB,AKRA,CMxBhC,AHeY,CXsBJ,CMlBiB,AGAJ,CAAK,ADKE,AO5B5B,CAAA,ClBgD8B,CMZS,CKRC,CMxBxC,CRmBqB,CAAe,AHa5B,CMbA,ADKoC,CXoBlB,CYzBU,CZyBxB,ASzBS,CEKT,CFL8B,AGAlC,EKnBR,CAAA,CAAA,CRmB+C,KAA1B,CAAT;AT0BA,ASzBA,ANkBJ,AGLH,ACRO,ACaR,AIlBI,AKlBR,AJaQ,ACCC,ACJA,ACVD,AdiDI,ASzBA,AO7BZ,MDKA,ACLA,IDKA,CAAA,ERkBY,AGAC,CTkBC,CapCC,AELf,CP6BgB,CJDCA,ACaH,AKvBG,AXoCA,CFNC,AQPC,EClBP,AGAJ,AIlBY,CJkBC,EHAC,CTyBV,EgB3CJ,ChB2CmB,ASzBD,AP+Bd,ASzBe,CCNN,EV+BS,CCbC,AIbnB,AW5BZ,ELkBQ,CNU0B,AMVA,AFWA,CRYC,ASlBd,AV+Bc,CU/BT,CHAA,AEMC,CXmBf,AWnB0B,CJD1B,AW5BZ,ChBsD8B,CAAW,ECbjC,CMlBc,AILd,EJKI,AILkC,AXoCA,ASzBnB,CTyBG,ASzBiB,ETyBE,EWpCE,CFWxB,AO7B3B,CNuBQ,AMvBR,ChBsDsD,AgBtDtD,CNuB6C,AV+Bf,CU/BtB,AV+BI,CSzB6C,IEXjD,AFWI,EAAmD;AXoBnD,AStBJ,ANeA,AGzCR,AC4BY,AC1BZ,AIqBQ,AKPJ,AJEI,ACCH,ACJA,ACVA,AdiDI,ASzBO,AO5BhB,CVCA,YCwBa,AGHA,CTkBC,CMfN,AIRO,CIDC,CjB+BC,CStBC,AFEAL,EKLV,CAAa,CHGb,AQVJ,CNamB,CXmBX,AiB9BJ,CjB8BiB,AOpBA,EJaE,AIbf,AICI,CCNK,ADMO,EXmBhB,CiBhCR,AJEI,CAAwB,CIAT,CduBW,AQZlB,CCNK,CAAK,KTkBlB,EUvBA,EAAqC,IDKrC,CCL0C,CDKT,EAAjC,QCLA;Ab+BI,ASrBJ,ANcA,AG1CR,AEOI,AIiBI,AKPQ,AJEX,ACED,ACJA,ACXA,AdkDI,AS1BK,AO3Bb,QZHA,AUMQ,GRCJ,CADC,AOWO,CHOC,AKPG,ADXZ,CPsBU,ANcA,AapCA,CVNd,AJwDe,AgBrDV,GZHL,ASiBI,CNWe,AQXH,ADXZ,AEHJ,CNqBQ,AGPkB,AbuCN,CFPC,ASrBb,AGJa,AIlBF,CCWH,AHIM,AIlBjB,CfuCkB,EHOX,ASrBa,CTqBC,Ac5BtB,ERrBJ,AMwBqB,AKPL,AHIgB,CLOxB,CP4BA,CFPI,AQ3CP,IIkBgB,CAAK,ITkBc,CKnCpC,CAAA,CLmCmB,GAAuB,ASlBtC,EAA8B,GAA9B,QTkBmD,GAAnD,CKnCJ,WAAA,QAAA;AR2CK,ASrBD,ANeA,AIdI,ACpBR,AIeI,AKlBI,AJcA,ACCJ,ACJA,ACXA,AdkDH,AS1BI,AO3BL,UAAM,CVMN,CADC,AQFO,CPsBC,ANeA,ASnBA,AKlBD,AHeC,EDDU,AEHR,ERYE,GKLT,ACJI,AEHQ,CZ0BZ,ASnBa,AMrBjB,CLiBuC,AGdrB,CPsBd,AFCe,ASvBX,CbqCY,AcrCZ,CVuBaC,EUvBC,AFWX,ACXY,CJkBN,AGPO,CRYL,AORf,CAAsB,CPQCC,ACrB1B,ASFyB,EdqCG,CWtBzB,ACJO,CHOM,CLKE,AKLG,CGPW,ACXA,CTuBCI,ASvBA,CAA9B,EbqCgB,AKlCpB,AQHqC,CbqCC,AIdnB,ACpBnB,COQI,CZ0BoC,AIdhC,CUvBkB,EdqCiB,CIdCb,AKLxC,EAAgC,EAAhC,AKlBkB,CdqCgB,AcrCI,EdqCS,EcrC7B,CdqCgC,AcrC9C,CVuBA,EAAiD,ECpBzD,CLkCsC,EAAlB,CAAhB,IKlCJ,QAAA;AR0CI,AStBH,ANeA,AIdWO,AClBZ,AIaI,AKjBI,AJaJ,ACCA,ACJH,ACXO,AdmDR,AS1BI,AO3BJ,QhBqDI,EgBrDE,CVON,CADC,CRwCQ,AY1BA,AKjBD,AHcC,EZoCT,AS1BW,CEXC,Cb8BR,CAAU,AiB3CN,ADDM,AdmDH,AgBrDG,ENoBV,CLKaC,AKLA,AKjBD,ANwBZ,CXmBA,Aa9Bc,AGdA,ChB4CC,EOrBP,AUtBQ,ACHC,CLgBjB,CGdU,CJkBG,AIlBO,CTuBC,CPqBrB,CQxCH,AMWG,Cd6BwB,Ac7BA,CGdR,CVsBUC,CKLb,AMpBjB,CNoBsB,AEHlB,GPQqB,CPqBrB,AOrBQ,AUtBI,CTIhB,ASJ8B,CTI9B,GSJgB,ADDyB,CCCjC,IDDsC,EAAhC,CAAN,CJkBJ,EAAsC,EAAtC,KJbJ,OAAA,QAAA;ARwCI,ASrBJ,ANeA,AIfY,AChBZ,AIWI,AKjBI,AJaA,ACCP,ACHD,ACZK,AdmDD,AS1BH,AO3BD,SHcK,CGdC,CfwCF,AK/BJ,CADC,AN6CO,CFPC,AY1BA,AKjBD,CFWR,CNWQ,CTqBJ,AehCc,CFEL,AXqCA,EelDL,ACHO,CNoBX,CLKaA,AKLA,CKjBA,CfkDb,CWrCI,CXqCa,CK5BT,AUtBS,ACHC,ENoBL,ELKS,CCjBzB,IDiB8BI,AKLd,AKjBI,CLiBC,CMpBP,EXyBW,CAAd,AWzBwB,CVSpC,AUTA,CVSA,ASNiB,CAAe,KLiB5B,AKjBiC,ELiBD,EKjBJ,CLiB5B,AKjBsC,IAAV,CAAe,IAAf,CTMhC,ASNiB,CAAT,WTMR,QAAA;ARuCI,AStBA,ANeA,AIfK,AC/BQ,AI2Bb,AKTA,AJIQ,ACEJ,ACJJ,ACXA,AdkDI,ASzBR,AO3BA,YVP0B,AUOlB,CNoBC,AKTA,ADTA,CbqCC,AY1BA,CfiCC,AStBA,ASxBX,CAAY,EP2BE,AO3BA,CFEV,AdkDW,CAAP,CezCJ,AJIa,ACEQ,CCJP,ACXA,ChB4Cd,AQrDsB,AI2BtB,ADOJ,AO3BY,CTwBQ,ADhCvB,ASmBuB,CJIR,ACEJ,AHUqB,AO3BR,CLeC,CCEa,ACJZ,ACXnB,CbqCoB,Ac5BA,CRaC,EAAE,AEG3B,AO3BY,CLeA,CVwBiB,AQZc,AO3B3C,CTwBI,AMXc,CAAa,EZ0BP,CAAU,Cc5BV,CFEN,CAAd,EPrBP,EL+C2B,CAAkB,Ac5BtB,CAAiB,ETlBX,CAAA,CSkBN,CTlBH,CL8CyB,Ac5BC,Od4BD,Ac5BtB,Cd4B2B,AK9CrB,ASkBtB,CTlBa,WL8CO,CAApB;AHQH,AStBA,ANeG,ASlBA,AKVA,AJKI,ACCJ,ACJA,ACXH,AdkDI,ASzBD,AO1BJ,UAAM,EfsCE,CSlBC,AKVA,AHMA,CCJC,AJcA,GEXG,CLxBI,AI6Bb,CAAW,AEJA,AIhBA,EDUX,CLUA,ADMc,CRYC,ASlBA,ACLX,CILY,CFEC,CDIjB,CFIA,CTkBoB,Ac5BA,ANgBA,AO1BA,EJgBE,ACJA,CJcR,CAAU,EIdP,AJcS,CGVC,ACJA,CZ0B3B,CQZ6B,EMhBT,ECVT,CAAuB,CP0BV,EAAa,CMhBrB,AFEC,CEFgB,CFEjC,AJcwC,GMhBxB,EAAuB,AHMjB,CAAwB,AHUtB,EAAV,AO1BH,CP0BX,AO1BJ,EDUoB,AHMmC,CGNnD,GHM8C,CAAU,KAAlC,CAAtB,EAAgE;Ad+BpE,AStBA,ANeI,AIhBI,AKFJ,AKXH,AJKO,ACCA,ACHJ,ACXJ,AdkDI,AS1BA,AO1BJ,QFEI,EhB4CD,AkB9CG,GfuCG,AY1BA,CbuCC,AS1BA,CCLC,CV+BC,CWrCC,ACCA,AEdb,AdkDU,AgBpDG,EfuCE,AIhBAN,AKFX,AGRW,AbuCA,CclDF,AdkDH,AS1BM,CO1BC,EXuBT,AMRA,CVwBJ,CWvBI,ACHJ,AbuCiB,CYpCC,AHUA,ERaE,CY1BC,AbuCrB,AS1BY,AO1BC,CP0BS,CGVC,CHUC,CRaC,CWvBrB,CHUuB,CGVC,AIhBnB,CHaT,AGbkB,EfuClB,AY1B+B,EZ0BE,AQbX,EAAa,AO1B1B,CJgB2B,CIhBV,CP0BY,CGVlC,EAAqC,GHUnB,EAAV,AO1Bc,CP0B1B,MO1B0B,CAAO,EAAP,CAAU,KAAV,EAAiB,MAAjB,CAAjB,CAAb;AlB+CI,AStBJ,ANeQ,AIhBH,AKFJ,AKtBD,AJgBY,ACCA,ACHJ,ACXJ,AdkDA,AS1BA,AOzBJ,QDFI,GCEG,ChBmDC,CFNC,AiB/CT,CN2BU,CKxBC,CCHF,ACET,ElB6CI,CAAW,AejCA,AGZA,CFCC,CHaC,AXqCA,ECbE,AWvBA,AHUgB,COzBnC,CLcY,AGbD,ALwBP,CXoBA,Aa/BkB,AXqCA,CavCd,CAAgB,CfiCC,CgB5CC,AdkDT,CWrCL,AGbR,AdkDuB,CCbC,EHOxB,Aa/B0B,AEFA,CZ0BX,AUxBY,AXqCA,CCbC,AUxBpB,AXqCK,CAAb,ICbe,AY1BkB,CZ0B7B,CY1BgB,CAAhB;AfkCJ,AStBJ,ANeK,ASjBL,AKvBI,AJgBQ,ACDiC,ACDxC,ACXJ,AdmDG,AS1BA,AO1BJ,WAAO,ChBoDC,CFPC,AchCD,AHaC,EM5BE,EjB+CP,AkB7CJ,ClB6Cc,AYxBH,CDKI,CM5BC,ACEA,CLcC,AXsCA,CFPb,AEOA,CFPe,CEOC,CWtCR,AFYR,CEZkB,AKdtB,ElB6CI,AiB/CO,CAAc,AN4BA,CXmBC,IiB/CtB,AJgBQ,AFYkB,CXmBC,Ea/BE,Eb+B7B,Ga/BQ,AFYR,EAAoC;AXoBvC,ASrBD,ANeI,AItD2B,AKoC3B,AKvBH,AJgBW,ACCP,ACHJ,ACVD,AdkDQ,AS1BA,AOzBR,KXhBA,GSiBI,CEDC,GTuBG,ANeA,CetCC,ETuBT,AGHW,EHGM,ASvBJ,CPyBC,AOzBd,CFCA,CJmBgB,ADKA,AOzBA,CfsCC,AQbH,CKxBC,AdkDG,CS1BC,CAAL,AOzBM,CNoBT,CAAW,AMpBtB,ChBmDuB,CgBnDC,ChBmDhB,AS1BiB,CRajB,CetCR,EfsC6B,AetCA,GPyBG,GAAxB,CCLG,EAAP,ETkBA,EAAsC;AHQlC,AStBJ,ANeI,AIjBX,AKDI,AKdD,AJQQ,ACCJ,ACHJ,ACXI,AdkDC,AS1BG,AOzBJ,CXtBR,QU4BS,EAAE,CjBuCS,Ec9BN,AIfA,CTuBC,AQjBN,ADLM,EhB4CH,AiBvCR,AJQa,CFWC,AOzBA,ClB6Ca,AiBvCI,CRiBf,AOtBA,CDWF,EZ0BK,AUxBX,EJSG,AOtBA,AEDG,CTuBQ,AEEA,EGVE,EEdE,CAAC,AEDb,CfsCc,AarCxB,AEDiB,CTuBV,AKRkB,AIff,CTuBgB,CEEC,AOzBP,ETuBb,CAAP,ESvBU,CAAV,CPyBkC,ERanB,CAAsB,CQbjC,CGVgB,EAApB,OXuBe,CAAX;AHQJ,AStBH,ANeI,ASjBL,AKfI,AJQI,ACEJ,ACJA,ACXH,AdmDG,AS3BI,AOzBJ,YhBoDI,Ce9CC,AHUA,ACJA,CfiCC,AkB7CA,EhBoDE,CWtCC,AEFT,AbwCI,Ce9CJ,AFMU,AJaA,AOzBA,CNqBF,AKfG,Ef8CG,EFPd,AiBvCA,AJQI,ACEJ,Cd6BgB,AiBvCA,AHUA,CIhBN,EhBoDU,Ce9CpB,Af8Cc,AS3BM,CXoBC,Ac7BA,CCJrB,CGZU,CJgBV,AZoCyB,AgBpDR,ClB6CjB,AWpByB,AOzBf,CJgBgB,CIhBN,ChBoDS,CAA7B,EAAiC,AS3BF,CAAX,COzBV,CAAV,EPyBoC,CGTpC,EAAuC,EHSE,IAAI,CAAzB,IAA8B,KAAK,MAAM,CAAzC,IAA8C,KAAK,IAAI,CAAvE;AXqBP,ASrBD,ANeI,AIlBRV,AKAQ,AKfA,AJQQ,ACEJ,ACHJ,ACXJ,AdkDQ,AS1BA,AO1BJ,QXqBAkB,ASnBA,IPsBI,CNeC,AcjCA,CLeC,AGRA,AGbA,CTwBV,CGHY,ADKA,CFFO,CFHvB,CJkBQ,AcjCA,AHUW,CXuBC,AarChB,CTmBiB,AKAP,ACPO,AKdA,CTwBjB,AP4BkB,CclDF,CPsBgB,CIVpB,AEDS,CZ0BjB,ASlBkB,ACPA,AKdA,ChBoDC,AS1BA,ERaE,ADajB,CCbJ,AIlBsBA,AKAtB,AGRsB,CFCd,EKdK,CLca,AEDT,AJaS,AO1BA,CLcC,AEDA,CFCnB,CFYW,CAAW,EJLjB,CAAoBV,EWrBP,GHaT,AJaE,CAAoB,CIbvC,ERQa,AWrBa,CAAO,CXqBWW,AIKzB,CO1BO,CAAU,CXqBvB,AWrBa,EXqBuB,AIKA,AO1BV,CAAb,CAAb,CAAb,EP0BI,EAAoD;AX7ChE,AS4CQ,ANeA,AIlBJ,AKAI,AKfA,AJQQ,ACA+B,ACDvC,ACXA,AdkDC,AS1BO,AOzBR,SJaA,CPOEjB,GEGG,ANeA,AcjCA,ACLA,CNoBC,AGRA,CCXC,CbqCP,EMfA,AFHUM,CEGC,ANeA,CarCC,CHYC,EFYE,CRaC,AcjChB,ACLA,CNoBiB,AKfA,AJQT,AEDwB,AGZf,CTuBjB,AIVkB,AGZX,CPsBY,ANeR,AY1BX,AJaQ,CRaY,AIlBAY,AIKA,EFFpB,AGHsB,CTkBX,AarCY,CPsBC,ANeA,AarCxB,AEDiB,CDKjB,CJQQ,AFYA,GFFR,AIV6B,ENOjC,AWpBI,CfsCW,CAAX,ASlBiB,ACPT,EDOR;AZzCR,AS6CK,ANgBG,AInBJ,AKCI,AKhBH,AJQW,ACGX,ACHG,ACZH,AdmDG,AS3BK,AOzBR,QlBtBL,EO0CUjB,GJmBG,ASlBA,AGRA,EfnCb,AE0Ee,GF1Ef,CY2CmB,AGRA,EZ0BX,AU1Ba,AXuCb,CCbc,EInBED,CKChB,ACRQ,AEAR,CfnCR,AamC0B,GDQG,AGRA,CZ0BrB,AInBsBE,AMPd,ODQR,AGRA,EHQ+B,AGRA,GROf,GAAqBF,MAAME,YAAN,IAAsB,EAA/D;AEKA,ANeC,AInBD,AKCQ,AKfR,AJOY,ACIJ,ACJA,ACLR,Ad4CC,AS3BI,AOxBL,SAAK,CXmBCQ,ESZD,GPgBG,CGHI,ELDG,CQPA,EGZf,CXmBkBO,COHS,EPGL,EAAtB,AOHQ,EAA6B,ACJ7B,KHQsB,OAAA,OAAlB,IAA0B,CAAC,OAAO,OAAtC,EAA+C;AHInD,ANhDR,AI4CI,AKCY,AKfZ,AJQQ,ACGJ,ACJI,ACLJ,Ad6CJ,AS3BI,AOzBJ,SAAK,CXmBCH,ESZE,EFSE,AIhBV,CTuBW,AEEA,EJNG,AMND,AGNA,Ad6CA,GO7BG,CFJCG,AQPA,AJab,CCLc,AVgClB,CWvCQ,CNMa,ALiCK,CO7Bf,CAAW,AOhBlB,EJaQ,AGRY,ACLA,CJaC,CGRjB,CROR,GEIW,AMXmB,CHQlB,AEJmB,CLO3B,EKPA,GCJiC,QAAP,EAAtB;ANYP,ANjDL,AS8CgB,AKfZ,AJQQ,ACGJ,ACJC,ACLG,Ad6CJ,AS3BH,AOzBD,Qf1BJ,Ce0BS,GhBoDG,EYpCE,AIhBV,Cf1BJ,EUuCiB,AXuCA,CC9EjB,KUuCY,GXuCA,EC9EZ,CW0C6B,EZoCE,CAAvB,EYpC0B,AZoCA,QYpCL,CAAc,QAAd,CAAuB;ALShD,AFLAhB,AKCS,AKdT,AJOY,ACGJ,ACHJ,ACNC,Ad6CG,AShFZ,AO4BC,QDMO,KRkBK,AMXA,EDGE,CPGCkB,AUbZ,ERkBA,CQlBY,Af8CG,CO5BiB,AFLhC,AQNI,CRMa,AMNA,AEAA,IFAL,AEAR,CFAkB,AEAA,AbuCA,EAAP,CAAU,EWvCb,ECEoC,CDFlB,AEA1B,AbuCW,CWvCH,CXuCoB,CAAjB,CAAP;AO3BJ,AFLAV,AKEI,AKfJ,AJOQ,ACGJ,ACHP,ACLG,Ad4CC,ASjFT,AO8BA,QP9BA,CO8BA,IFOa,CTWCQ,CEKC,AQlBA,AHUA,AH7Cf,EJ+CqB,CSVb,ALrCR,AO8BA,CNoBmB,CHGC,AQlBA,CJOC,AGLA,AEPrB,CFOQ,CJaI,ADlDZ,CCkDwB,CHGT,AIXC,CJWU,AQlBX,AJOW,CIPC,ELef,KHGG,AIXC,CJWmB,AQlB3B,EJO6B,GJWtB,CAAP,AIXQ;AJYX,AFLGP,AKEC,AKfJ,AJOW,ACAoC,AC7CpD,ACwCQ,Ad6CA,AgBpDJ,SJYyB,CAArB,CIZG,EXgBU,ASTR,Cd6CC,CgBpDC,MLYM,CGLb,Ad6Cc,AgBpDX,CAAY,ELYP,AGLS,CHKC,CXwCC,Ec7CnB,CHKQ,IKZkB,EhBoDZ,GAAiB,EgBpDE,GhBoDjC,agBpD0B,CAAwB,kBAAxB,EAA4C,OAA5C,CAAvB,CAAP;ATyBA,AFNII,AKEH,AKfD,AJOY,ACIR,AClDR,ACyCQ,Ad6CA,AgBpDP,QDKO,AFvCR,KDkDa,EClDb,AbsFe,Ce/CX,CRmBU,AQnBG,CFvCjB,GDkDQ,CGXJ,AHWkB,AZoCA,Ee/CS,Af+ChB,CAAU,EYpCE,AClD3B,GDkDQ,AETsB,Ad6CA,CAAL,CYpCO,EZoCE,Cc7CC,Id6CpB,Ec7CP,Ad6CiC,IYpCI,CZoCC,CAAL,CYpCT,CAAiB,CZoCC,IYpCI,CZoCvC,CAAP,CYpCwB,CAAxB,EAAoD;ALSpD,AFVa,AK5CrB,AKmCQ,AJQI,ACGA,AETP,Ad6CA,KKtCD,QUTS,ERmBE,EIXE,EIRT,AHWW,CLQC,AQnBA,GJQR,EJWG,AKT6C,CLSlC,EQnBlB,GAAuB,KRmBhB,AQnBP,ERmBA;AACH,AGvDL,AKoCK,AJQO,ACGA,AERR,Ad6CA,QUpFJ,GIuCQ,Ed6CK,EUpFb,EC4CiB,CD5CjB,CE+CmB,AZqCf,EAAuB,OWxCf,ED5CZ;AHyDI,AFPAV,AUZA,AJOY,ACA4C,AELpD,Ad6CA,Qe/CA,CHOA,EPKGgB,EUZP,ADES,Ed6CE,Ce/CF,If+CO,CWxCC,CGLb,Cd6CO,CAAS,CKnCpB,AMLY,AGLS,CTUCd,AMLA,IGLlB,Ad6CO,CWxCC,CXwCgB,EWxCE,CNK9B,AMLY,ENKqBW,GAAjC,CLmCI,CKnCkC;AEQtC,AQnBI,AJOQ,ACGX,AERA,Ad6CA,ee/CU,KAAK,CJOC,IAAL,CIPD,AJOW,CIPC,KAAnB,EJOQ,GAAqB,KAArB;AJaZ,AFPII,AUZH,AJOW,ACIZ,AERA,Ad6CA,OAAG,EAAE,Gc7CA,CFQI,AZqCA,CKpCC,GODV,CZqCc,CYrCS,AZqCpB,EYrCH,AZqCiB,EYrCkB,EAC/B,AZoCiB,KAAK,CAAvB,EYpCS,AZoCZ,EAA4C,KYrCT,EAE/B,QAAQ,CAFuB,KAG/B,EAHJ,EAGM;ALON,AFRQ,AUZR,AJQQ,ACMJ,AEXA,Ad6CA,OO5BD,CQpBC,KRoBJ,AQpBA,ADGS,CCHC,AHcA,CLMS,AP4BR,IKpCI,AUZf,CfgDgB,CehDO,ADGnB,Ad6CO,EO5BX,CFRoBX,AOEA,AEXA,CPiBiB,CP4Bf,CAAX,Cc7CP,CTSW,AOEU,CPFjB,CLoCmB,IYlCP,CAAY,AZkCA,CAAL,KAAW,CAAlC,GYlCgB,CAAuB,IAAvB,CAAhB;ALOA,AFRC,AUZD,AJQQ,ACOR,AEZH,Ad6CA,SKxCqC,IEY7B,AQpBA,GHeG,GGfR,CRoBA,AQpBY,CRoBC,EAAb,CAAgB,AIZA,CIRhB,AHeA,EDPQ,CIRY,AJQA,ACOA,ELKpB,EAAwB,CQpBxB,AHeA,OLKA,AIZgC,MAAM,IAAI,EAAlC;AJaX,AQpBA,AJxBG,ACuCA,AEXJ,Ad6CA,QAAI,EAAE,Gc7CA,Cd6CI,CAAN,CYlCQ,CZkCC,IAAI,CAAb,EAAJ,EAAmC,CYlC/B,GAAsB,KAAtB;ALOJ,AFTIY,AUXJ,AJOC,ACOG,AEXA,Ad6CA,SO5BC,GFTGC,AUXH,CDGI,EPiBT,AP4BW,CYlCC,CLMS,AFTjB,EAAW,ESRX,Cd6Cc,Ec7CE,Ad6CT,CO5BX,AKNI,AEXiB,Ad6CA,EO5Ba,GOjBR,Ad6CA,CAAL,GAAS,CAAnB,EAAsB,Cc7C7B,Id6CkC,CAAL,GAAS,CAA/B,CAAP;AO3BA,AFTI,AUXJ,AJQI,ACMJ,AEXH,Ad6CA,aO5BQ,EQpBE,CJQS,ACMR,CPHCT,GEST,AQpBY,CRoBC,AFTT,AMHA,CCMJ,CDNiC,ACMlB,ELMf,AFTiBS,CESC,AQpBX,CAAY,CHcC,CAApB,CPHI,COGmB,CLMvB,AQpBO,ERoBmB,AQpB1B,EHc4B,CAA5B,KLMA;AACH,AFTO,AUXP,AJQG,ACMA,AEVJ,Ad6CA,QAAI,EAAE,Cc7CF,EHIK,CXyCC,CAAN,CYnCQ,CPHCV,ALsCA,CWzCT,GAAa,AXyCA,CYnCb,AZmCA,CYnCe,CZmCnB,EYnCsB,AZmCa,CYnC/B,EAAqB,CDNR,CNGT,COGoB,CAAxB,CPH0B,GMHb,CNGT,AMHgB,IAAP,CAAY,KAAZ,CAAb;AJcJ,AFVK,AUVL,AJOI,ACMA,AEVA,Ad6CA,WehDA,CDGI,CHIC,EXyCE,CYnCC,CDNR,AGJS,CHIC,IXyCI,EWzCd,AXyCO,CYnCP,AZmCiB,Gc7Cb,Ed6CkB,CAAL,Cc7CO,Ed6CE,CAAnB,Ec7CsB,Ad6CA,KAAK,CAAL,GAAS,CAA/B,CAAP,Cc7CA,EAA2C;APkB/C,AQpBI,AJOA,ACMA,AEVI,Ad6CP,aWzCQ,EIPE,CHaC,IGbI,ADGA,CHIZ,CCMA,EEVI,CAAa,CCHV,CAAY,IAAZ,EAAP,sBDGI;APkBR,AFrBsC,AUCrC,AJOA,ACMA,AEVO,Ad8CR,KKlDA,QLkDS,EAAE,Ec9CE,Ed8CE,CAAN,EAAS,Gc9CV,Cd8Cc,CAAb,Cc9Ce,Cd8CxB,EAAwC,Cc9ChC;APmBR,AFXH,AUTG,AJOA,ACMA,AEXQ,Ad8CJ,CK/DR,OEmCQ,IQpBC,GRoBL,AIbQ,ACMG,AZmCA,EYnCX,CLOW,CKPY,GZmCL,EAAP,CYnCX,AZmCqB,EYnCkB,EACnC,CZkCsB,CAAL,GAAS,CAAnB,EYlCC,AZkCqB,KAAK,CAAL,CYnCM,EAEnC,AZiCsC,CAA/B,CAAP,MYjCQ,CAF2B,KAGnC,EAHJ,EAGM;ALKF,AQpBA,AJOA,ACSA,AEdC,Ad8CJ,cWzCS,ACSA,CLIC,AQpBA,CJOC,IJaI,AQpBA,AJON,IJaC,AKJS,CLIC,AIbA,CIPV,CAAY,EJOnB,ACSqB,GLIrB,AQpBO,EAAP,CHgBgB,CAAY,UAAZ,CAAuB,IAAvB,CAAhB;ALKH,AQpBA,AJOG,ACUA,AEdA,Ad8CJ,SAAK,EAAE,GW1CG,CX0CC,CW1CC,ACUA,AEdA,GAAR,CAAY,Ad8CA,CW1CN,AX0CL,EAAc,EYhCf,AEdiB,CHIC,CX0CC,CYhCC,EDVpB,CGJA,Cd8CwB,CYhCxB,AZgCC,EAAL,EAA8C;AO3B9C,AQpBA,AJOI,ACSA,AEdA,Ad8CA,QO5BA,IAAJ,AIbQ,CIPF,AJOG,AGLA,EPkBD,AP4BG,CYhCC,EDTE,CGLV,Gd8Cc,CWzCd,AGLe,Cd8CR,CWzCU,AXyCA,EYhCjB,CEdoB,EFcE,EZgCL,Cc9CjB,EFcA,AZgCiB,CAAI,KAAK,CAAL,GAAS,CAAb,CAAV,EAA2B,OAAA,GAAA,CAAI,KAAK,CAAL,GAAS,CAAb,CAA3B,CAAP;AO3BA,AQpBA,AJOI,ACSJ,AEdA,Ad8CH,ac9CQ,EPkBE,AQpBA,CHgBC,ILII,AQpBA,CDEZ,CAAc,EPkBP,CAAU,AKJjB,CGhBO,ADEP,CCFmB,ADEA,EPkBnB,EOlBA,ECFO,ADEkB,ECFzB;ARqBH,AQpBA,AJOI,ACSD,AEdI,Ad+CR,eAAQ,CYjCI,EEdE,CFcV,CAAY,GAAG,AEdA,CFcf,EAAkB,GAAG,CAArB,EAAwB,MAAxB,EAAgC,CAAhC,EAAmC,OAAA,GAAnC;ALKJ,AQnBA,AJOI,ACQA,AEhByB,AdiDzB,QO7BA,COpBA,ECCA,CRmBJ,CAAS,CIZC,CXyCC,CYjCC,ELIZ,EAAc,EIZI,GCQd,CZiCkB,EWzCE,GXyCG,CAAC,KAAK,IWzCf,CAAoB,AXyCA,CAAC,IWzCI,AXyCvC,KWzCc,CAAd;AJaA,AQnBA,AJQA,ACOA,AEdH,Ad+CA,YWxCO,CJWC,AIXA,EIRE,CHeC,CLIR,CAAU,CIXC,CIRC,ERmBZ,AKJA,GLIiB,AIXjB,CIRO,CAAY,AJQA,GJWnB,CQnBO,EAAP;ARoBH,AQnBA,AJQO,ACOP,AEbO,AdtEZ,acsEkB;APmBd,AQnBA,AJOK,AC1ET,AEoEQ,AdrEG,OAAA,COuFH,GPvFG,CcqEC,CAAC,CPkBT,APvFc,GOuFJ,COlBI,GdrEO,EAAP,CAAU,CAAV,EcqEV,AdrEuB,CAAb,CcqEW,AdrElB;AOwFH,AQnBJ,AJQI,AC5ER,AEqEY,AdxEZ,QYGA,AZHA,KW+Ea,EJWE,AKvFf,AZHA,GYGA,AZHA,CW+EmB,CJWC,GIXZ,CJWO,AP1Ff,CO0FyB,EIXE,GC5E3B,CLuFQ,CIXA,EAAoC;AJYvC,AQnBD,AJQQ,AGPH,iBHOQ,iBAAL,CAAuB,IAAvB;AJYR,AQlBA,AJOK,AGND,QPiBA,MAAJ,CAAW,GQlBA,ERkBX,EAAgB,QOjBU,KAAK,MAA3B;APkBA,AQlBA,AJOH,AGLG,YAAI,CPgBC,AOhBA,ECFE,ERkBP,CAAU,AOhBA,ECFE,IRkBZ,EOhBA,CPgBmB,CQlBZ,ADEa,CCFC,GRkBrB,QQlBO,EAAP;ARmBH,AQlBA,AJ1EL,AG4EY,iBAAK,IAAL;APkBR,AQlBA,AJ5EJ,AG6ES,QH7ET,II4EY,GRkBA,AI9FZ,GAAA,EI4EI,EAAwB,WJ5E5B;AJ+FQ,AQlBA,ADCH,ePiBU,AQlBA,KRkBK,AQlBA,IRkBL,CAAU,GQlBV,CAAc,IRkBd,EAAP,CQlBO,CAAsB,QAAtB,CAAP;ARmBH,AQlBA,ADlFL;APsGI,AQlBA,ADpFJ,QAAA,IPsGS,GOtGT,GAAA,CCoFgB,SDpFhB;APuGQ,AQlBA,eRkBO,AQlBA,KRkBK,AQlBA,IRkBL,CAAU,GQlBV,CAAc,CRkBd,EAAP,SQlBO,EAAP;ARmBH,AQlBA;ARoBD,AQlBA;ARmBA,AQlBA;ARmBA,AQlBA;ARoBA,AQlBA,gBRkBY,GQlBA,CRkBZ,EAA4C,YAAY,CAAxD,EAAyD;AACrD,AQlBA,aRkBK,AQlBA,IRkBL,CAAU,MQlBV,CRkBA,AQlBiB,CRkBC,IAAlB,EAAwB,KQlBxB,CAA8B,GRkB9B,EQlBmC,MAAnC;ARmBH,AQlBA;ARoBD,AQlBA,QRkBI,MAAJ,EAAyB;AACrB,AQlBJ,eRkBW,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,CAAP;AACH,AQlBD;ARoBA,AQlBA,WRkBO,EQlBD,IRkBN,EAA4B;AACxB,AQlBA,YRkBI,GQlBG,KAAK,QAAL,CAAc,CRkBC,IAAlB,IAA0B,KAAK,AQlB5B,EAAP,MRkB8B,CAAc,MAAd,CAA9B,EAAqD;AACjD,AQlBP,mBRkBc,KAAP;AACH,AQjBL,sBAAkB,IAAlB,EAA4B;ARmBxB,AQlBA,eRkBO,AQlBA,KRkBK,AQlBA,QAAL,CAAc,GRkBd,CAAkB,MAAlB,IAA4B,CAAnC,EQlBO,CAAgC,IAAhC,CAAP;ARmBH,AQlBA;ARoBD,AQtHJ,iBRsHiB,MAAb,EAAkC;AAC9B,AQvHR,QAAA,MRuHc,CQvHd,GAAA,IAAA,KRuH2B,KAAK,IAAL,CAAU,QAAV,CAAmB,MAAnB,CAAnB;AAEA,YAAI,kBAAkB,IAAtB,EAA4B;AACxB,mBAAO,aAAa,KAAK,aAAL,CAAmB,MAAnB,CAApB;AACH;AAED,eAAO,UAAP;AACH;AAED;AACA;AACA;AAEA,qBAAc;AACV,eAAO,KAAK,MAAL,CAAY,cAAZ,EAAP;AACH;AAED,uBAAmB,GAAnB,EAA6B;AACzB,eAAO,KAAK,MAAL,CAAY,kBAAZ,CAA+B,GAA/B,CAAP;AACH;AAED,WAAO,MAAP,EAAmB;AACf,eAAO,KAAK,MAAL,CAAY,MAAZ,CAAmB,MAAnB,CAAP;AACH;AAED,eAAW,MAAX,EAAuB;AACnB,eAAO,KAAK,MAAL,CAAY,UAAZ,CAAuB,MAAvB,CAAP;AACH;AAED,kBAAc,MAAd,EAA0B;AACtB,eAAO,KAAK,MAAL,CAAY,aAAZ,CAA0B,MAA1B,CAAP;AACH;AAED;AACA;AACA;AAEA,cAAU,MAAV,EAAsB;AAClB,aAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB;AACH;AAED,aAAS,MAAT,EAAqB;AACjB,eAAO,KAAK,SAAL,CAAe,QAAf,CAAwB,MAAxB,CAAP;AACH;AAED,eAAW,MAAX,EAAuB;AACnB,eAAO,KAAK,SAAL,CAAe,UAAf,CAA0B,MAA1B,CAAP;AACH;AAED,cAAU,MAAV,EAAsB;AAClB,eAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAP;AACH;AAED,cAAU,MAAV,EAAsB;AAClB,eAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAP;AACH;AAED;AACA;AACA;AAEA,QAAI,GAAJ,GAAO;AACH,eAAO,KAAK,MAAL,CAAY,GAAnB;AACH;AACD,QAAI,GAAJ,CAAQ,KAAR,EAAa;AACT,aAAK,MAAL,CAAY,GAAZ,GAAkB,KAAlB;AACH;AAED,QAAI,QAAJ,GAAY;AACR,eAAO,KAAK,MAAL,CAAY,QAAnB;AACH;AACD,QAAI,QAAJ,CAAa,KAAb,EAAkB;AACd,aAAK,MAAL,CAAY,QAAZ,GAAuB,KAAvB;AACH;AAED,UAAM,KAAN,EAAmB;AACf,eAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,CAAP;AACH;AAED,WAAI;AACA,eAAO,KAAK,MAAL,CAAY,IAAZ,EAAP;AACH;AAED;AACA;AACA;AAEA,SAAK,GAAL,EAAe;AACX,eAAO,KAAK,QAAL,CAAc,IAAd,CAAmB,GAAnB,CAAP;AACH;AAED;AACA;AACA;AAEA,WAAO,OAAP,EAAwC;AACpC,eAAO,KAAK,QAAL,CAAc,MAAd,CAAqB,OAArB,CAAP;AACH;AAhNL;AAAA,QAAA,OAAA,GAAA,IAAA","file":"main.580c93a4.map","sourceRoot":"../demo","sourcesContent":["export default class Emitter {\n\n    private listeners = new Map<string, Listener[]>();\n\n    on(signal: string, listener: Listener) {\n        if (!this.listeners.has(signal)) {\n            this.listeners.set(signal, []);\n        }\n\n        this.listeners.get(signal).push(listener);\n    }\n\n    emit(signal: string, argument: any) {\n        const listeners = this.listeners.get(signal);\n\n        if (!listeners) {\n            return;\n        }\n\n        for (const listener of listeners) {\n            listener(argument);\n        }\n    }\n\n}\n\nexport type Listener = (event: any) => void;\n","enum Stat {\n    ESCAPE_ACCELERATION,\n    FRICTION,\n    HUNT_ACCELERATION,\n    MAX_BITE_SIZE,\n    MAX_RADIUS,\n    MITOSIS_MIN_RADIUS,\n    VISION_RANGE,\n    MAX_VELOCITY,\n}\n\nexport default Stat;\n","import Stat from '../stat';\nimport World from '../world';\nimport { IEnergySource } from './diet';\nimport Cell from './index';\n\nexport default class CellBehavior {\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    tick(map: World) {\n        const entities = this.cell.getVisibleEntities(map);\n\n        for (const entity of entities) {\n            if (entity instanceof Cell) {\n                this.interactWithCell(entity);\n            }\n        }\n\n        this.cell.move();\n    }\n\n    interactWithCell(other: Cell) {\n        const isTouching = this.cell.isTouching(other);\n\n        if (this.cell.canEat(other)) {\n            if (isTouching) {\n                this.cell.eat(other);\n            } else {\n                this.hunt(other);\n            }\n        } else if (other.canEat(this.cell)) {\n            this.escapeFrom(other);\n        }\n    }\n\n    hunt(target: Cell) {\n        const force = this.cell.getStat(Stat.HUNT_ACCELERATION);\n        const direction = target.pos.sub(this.cell.pos);\n        const push = direction.setMagnitude(force);\n\n        this.cell.shove(push);\n    }\n\n    escapeFrom(target: Cell) {\n        const force = this.cell.getStat(Stat.ESCAPE_ACCELERATION);\n        const direction = target.pos.sub(this.cell.pos);\n        const push = direction.setMagnitude(force);\n\n        this.cell.shove(push);\n    }\n}\n","export const PI = Math.PI;\nexport const TAU = Math.PI * 2;\n\nexport const abs = Math.abs;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sqrt = Math.sqrt;\nexport const pow = Math.pow;\n\nexport function random(min?: number, max?: number) {\n    if (arguments.length === 0) {\n        return Math.random();\n    } else if (arguments.length === 1) {\n        max = min;\n        min = 0;\n    }\n\n    return Math.round(Math.random() * (max - min)) + min;\n}\n\n//\n// Round\n//\n\nconst roundOperators = [ 1, 10, 100 ];\n\nfunction getRoundOperator(digits: number) {\n    while (roundOperators.length < digits + 1) {\n        roundOperators.push(Math.pow(10, roundOperators.length + 1));\n    }\n\n    return roundOperators[digits];\n}\n\nexport function round(value: number, decimals = 2) {\n    if (decimals === 0) {\n        return Math.round(value);\n    }\n\n    const operator = getRoundOperator(decimals);\n    return Math.round(value * operator) / operator;\n}\n","import { pow, sqrt } from '../math';\nimport Stat from '../stat';\nimport Cell from './index';\nimport CellState from './state';\n\nexport default class CellBody {\n\n    get isAlive() {\n        return this.state.isAlive;\n    }\n\n    get size() {\n        return this.state.size;\n    }\n    set size(value: number) {\n        this.state.size = value;\n\n        if (value === 0) {\n            this.die();\n        }\n    }\n\n    get energy() {\n        return pow(this.state.size, 2) * Math.PI;\n    }\n    set energy(value) {\n        this.state.size = sqrt(value / Math.PI);\n    }\n\n    constructor(\n        private cell: Cell,\n        private state: CellState,\n    ) {\n        this.state.isAlive = true;\n        this.state.size = 1;\n    }\n\n    canMitos() {\n        const minSize = this.cell.getStat(Stat.MITOSIS_MIN_RADIUS);\n\n        return this.size > minSize;\n    }\n\n    mitos() {\n        const minSize = this.cell.getStat(Stat.MITOSIS_MIN_RADIUS);\n        const childCount = Math.floor(this.size / (minSize / 2));\n        const childEnergy = this.energy / childCount;\n        const children = [];\n\n        for (let i = 0; i < childCount; i++) {\n            const child = new Cell();\n            child.energy = childEnergy;\n            this.inherit(child);\n            children.push(child);\n        }\n\n        this.cell.emit('mitos', children);\n        this.die();\n\n        return children;\n    }\n\n    die() {\n        this.state.isAlive = false;\n        this.cell.emit('die', this.cell);\n    }\n\n    private inherit(child: Cell) {\n        child.setParent(this.cell);\n    }\n\n}\n","import { round } from '../math';\nimport Stat from '../stat';\nimport Cell from './index';\n\nexport default class CellDiet {\n\n    private types = new Map<IEnergySourceConstructor, number>();\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    addType(Type: IEnergySourceConstructor, weight: number) {\n        this.types.set(Type, weight);\n    }\n\n    eat(target: IEnergySource) {\n        if (!this.cell.canEat(target)) {\n            throw new Error(`Invalid food source: ${target}`);\n        }\n\n        const selfEnergy = this.cell.energy;\n        const targetEnergy = target.energy;\n        const nutrition = this.consider(target);\n        const maxBitePercent = this.cell.getStat(Stat.MAX_BITE_SIZE);\n        const maxBite = selfEnergy * maxBitePercent;\n        const bite = targetEnergy > maxBite ? maxBite : targetEnergy;\n\n        target.energy -= bite;\n        this.cell.energy += bite * nutrition;\n        this.cell.emit('eat', target);\n\n        return true;\n    }\n\n    consider(target: IEnergySource) {\n        const Type = target.constructor as IEnergySourceConstructor;\n\n        return this.types.get(Type) || 0;\n    }\n\n}\n\nexport interface IEnergySource {\n    energy: number;\n}\n\nexport interface IEnergySourceConstructor {\n    new (): IEnergySource;\n}\n","import { abs } from './math';\n\nexport default class Vector {\n\n    static ZERO = Vector.of(0, 0);\n\n    static of(x: number, y: number) {\n        return new Vector(x, y);\n    }\n\n    static from({ x = 0, y = 0 }: IVectorSetter) {\n        return new Vector(x, y);\n    }\n\n    static apply(action: (...values: number[]) => number, ...vectors: IVector[]) {\n        return Vector.of(\n            action(...vectors.map((vector) => vector.x)),\n            action(...vectors.map((vector) => vector.y)),\n        );\n    }\n\n    static range({ x = 0, y = 0 }: IVectorSetter) {\n        return this.iterate(Vector.of(x, y));\n    }\n\n    static *iterate(vectorA: IVector, vectorB: IVector = new Vector(0, 0)) {\n        const start = this.apply(Math.min, vectorA, vectorB);\n        const end = this.apply(Math.max, vectorA, vectorB);\n\n        for (let x = start.x; x < end.x; x++) {\n            for (let y = start.y; y < end.y; y++) {\n                yield start.add({ x, y });\n            }\n        }\n    }\n\n    constructor(\n        readonly x: number,\n        readonly y: number,\n    ) {\n        if (isNaN(x) || isNaN(y)) {\n            throw new Error(`Creating vector with NaN: ${this}`);\n        }\n    }\n\n    get isZero() {\n        return this.x === 0 && this.y === 0;\n    }\n\n    private _magnitude: number;\n\n    get magnitude() {\n        if (this.isZero) {\n            return 0;\n        }\n\n        if (!this._magnitude) {\n            this._magnitude = Math.hypot(this.x, this.y);\n        }\n\n        return this._magnitude;\n    }\n\n    get radians(): number {\n        if (this.isZero) {\n            return 0;\n        }\n\n        const { x, y } = this;\n        let arctan = Math.atan(y / x);\n\n        if (arctan < 0) {\n            arctan += Math.PI;\n        }\n\n        if (y < 0 || (y === 0 && x < 0)) {\n            arctan += Math.PI;\n        }\n\n        return arctan;\n    }\n\n    setMagnitude(value: number) {\n        if (this.magnitude === 0) {\n            return Vector.of(value, 0);\n        }\n\n        const ratio = this.magnitude / value;\n        return Vector.of(this.x / ratio, this.y / ratio);\n    }\n\n    distance(target: Vector) {\n        return this.sub(target).magnitude;\n    }\n\n    is({ x = this.x, y = this.y }: IVectorSetter) {\n        return this.x === x && this.y === y;\n    }\n\n    sub({ x = 0, y = 0 }: IVectorSetter) {\n        return Vector.of(this.x - x, this.y - y);\n    }\n\n    add({ x = 0, y = 0 }: IVectorSetter) {\n        return Vector.of(this.x + x, this.y + y);\n    }\n\n    multiply({ x = 1, y = 1 }: IVectorSetter) {\n        return Vector.of(this.x * x, this.y * y);\n    }\n\n    diff({ x = this.x, y = this.y }: IVectorSetter) {\n        return Vector.of(abs(this.x - x), abs(this.y - y));\n    }\n\n    toString() {\n        return `[Vector(${this.x}, ${this.y})]`;\n    }\n\n}\n\nexport interface IVector {\n    x: number;\n    y: number;\n}\n\ninterface IXVector {\n    x: number;\n    y?: number;\n}\n\ninterface IYVector {\n    y: number;\n    x?: number;\n}\n\nexport type IVectorSetter = IXVector | IYVector;\n","import Stat from '../stat';\nimport Vector from '../vector';\nimport Cell from './index';\nimport CellState from './state';\n\nexport default class CellPhysic {\n\n    private shoves: Vector[] = [];\n\n    constructor(\n        private cell: Cell,\n        private state: CellState,\n    ) {\n        state.pos = Vector.ZERO;\n        state.velocity = Vector.ZERO;\n    }\n\n    get pos() {\n        return this.state.pos;\n    }\n    set pos(value: Vector) {\n        this.state.pos = value;\n    }\n\n    get velocity() {\n        return this.state.velocity;\n    }\n    set velocity(value: Vector) {\n        this.state.velocity = value;\n    }\n\n    shove(force: Vector) {\n        const maxSize = this.cell.getStat(Stat.MAX_RADIUS);\n        const size = this.cell.size;\n        const weight = 1 - Math.max(size / maxSize, 0);\n        const modification = force.multiply({ x: weight, y: weight });\n\n        this.shoves.push(modification);\n    }\n\n    friction(velocity = this.velocity) {\n        const friction = this.cell.getStat(Stat.FRICTION);\n        const maxSize = this.cell.getStat(Stat.MAX_RADIUS);\n        const { size } = this.cell;\n        const frictionFactor = 1 - friction;\n        const sizeFactor = size / maxSize;\n        const factor = frictionFactor * 0.5 + sizeFactor * 0.5;\n\n        this.velocity = velocity.multiply({ x: factor, y: factor });\n    }\n\n    move() {\n        const maxVelocity = this.cell.getStat(Stat.MAX_VELOCITY);\n        let velocity = this.velocity;\n\n        for (const shove of this.shoves) {\n            velocity = velocity.add(shove);\n        }\n\n        if (velocity.magnitude > maxVelocity) {\n            velocity = velocity.setMagnitude(maxVelocity);\n        }\n\n        this.shoves.length = 0;\n        this.pos = this.pos.add(velocity);\n\n        this.friction(velocity);\n    }\n\n}\n","import Cell from './index';\n\nexport default class CellRelations {\n\n    private parents = new Set<Cell>();\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    setParent(target: Cell) {\n        this.parents.add(target);\n    }\n\n    isFamily(target: Cell) {\n        return (\n            this.isChildOf(target) ||\n            this.isParentOf(target) ||\n            this.isSibling(target)\n        );\n    }\n\n    isParentOf(target: Cell) {\n        return target.isChildOf(this.cell);\n    }\n\n    isChildOf(target: Cell) {\n        return this.parents.has(target);\n    }\n\n    isSibling(target: Cell) {\n        for (const parent of this.parents) {\n            if (target.isChildOf(parent)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n","import { PI, random, TAU } from '../math';\nimport Cell from './index';\n\nexport default class CellRenderer {\n\n    color = '#' + random(0, 0xFFFFFF)\n        .toString(16)\n        .padStart(6, '0');\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    render(context: CanvasRenderingContext2D) {\n        const {\n            pos,\n            velocity,\n            size,\n        } = this.cell;\n\n        /* tslint:disable-next-line:no-bitwise */\n        const radius = size | 0;\n        const padding = radius * 0.;\n\n        console.log('velocity', velocity);\n\n        context.save();\n        context.translate(pos.x, pos.y);\n        context.rotate(velocity.radians - TAU / 4);\n\n        context.fillStyle = this.color;\n\n        context.beginPath();\n        context.arc(0, 0, radius, 0, TAU);\n        context.fill();\n        context.moveTo(radius, padding);\n        context.lineTo(0, radius * 1.5 + padding);\n        context.lineTo(-radius, padding);\n        context.closePath();\n        context.fill();\n\n        context.restore();\n    }\n\n}\n","import Stat from '../stat';\nimport World from '../world';\nimport Cell from './index';\n\nexport default class CellSenses {\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    getVisionRange() {\n        return this.cell.size + this.cell.getStat(Stat.VISION_RANGE);\n    }\n\n    getVisibleEntities(map: World) {\n        // TODO: Use getVisionRange();\n        const visionRange = this.cell.getStat(Stat.VISION_RANGE);\n        const entities = map.getEntitiesIn(this.cell.pos, visionRange);\n\n        return entities.filter((entry) => entry !== this.cell);\n    }\n\n    canSee(target: Cell) {\n        const borders = this.cell.size + target.size;\n        const distance = this.cell.pos.distance(target.pos);\n        const visionRange = this.cell.getStat(Stat.VISION_RANGE);\n\n        return distance - borders <= visionRange;\n    }\n\n    isTouching(target: Cell) {\n        const distance = this.cell.pos.distance(target.pos);\n        const minDistance = this.cell.size + target.size;\n\n        return distance <= minDistance;\n    }\n\n    considerFight(target: Cell) {\n        return this.cell.size - target.size;\n    }\n\n}\n","exports.buffer = function buffer(Class) {\n    const bufferProps = Class._bufferProps = Class._bufferProps || [];\n\n    Class._isDoubleBuffer = true;\n\n    Object.assign(Class.prototype, {\n\n        getState() {\n            const prev = {};\n\n            for (const { prop, state } of bufferProps) {\n                prev[prop] = this[state];\n            }\n\n            return prev;\n        },\n\n        setState(newState) {\n            this._isBufferDirty = false;\n\n            for (const { prop, state, next } of bufferProps) {\n                this[state] = newState[prop];\n                this[next] = newState[prop];\n            }\n        },\n\n        flushState() {\n            if (!this._isBufferDirty) {\n                return;\n            }\n\n            this._isBufferDirty = false;\n            const prev = {};\n\n            for (const { prop, state, next } of bufferProps) {\n                prev[prop] = this[state];\n                this[state] = this[next];\n            }\n\n            return prev;\n        },\n\n    });\n}\n\nexports.bufferProp = function bufferProp(prototype, key) {\n    const Class = prototype.constructor;\n    const bufferProps = Class._bufferProps = Class._bufferProps || [];\n    const state = `_${key}`;\n    const next = `_${key}_next`;\n\n    bufferProps.push({\n        prop: key,\n        state,\n        next,\n    });\n\n    Object.defineProperty(prototype, key, {\n\n        get() {\n            return this[state];\n        },\n\n        set(value) {\n            this[next] = value;\n            this._isBufferDirty = true;\n        },\n\n    });\n}\n","import Stat from '../stat';\nimport Vector from '../vector';\nimport Cell from './index';\nimport { buffer, bufferProp } from './state-decorators';\n\n@buffer\nexport default class CellState {\n\n    private stats = new Map<Stat, number>();\n\n    @bufferProp\n    isAlive: boolean;\n\n    @bufferProp\n    size: number;\n\n    @bufferProp\n    pos: Vector;\n\n    @bufferProp\n    velocity: Vector;\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    getStat(key: Stat) {\n        return this.stats.get(key);\n    }\n\n    setStat(key: Stat, value: number) {\n        this.stats.set(key, value);\n    }\n\n    //\n    // Methods injected by decorator\n    //\n\n    getState(): IStateScreenshot {\n        return null;\n    }\n\n    setState(newState: IStateScreenshot) {}\n\n    flushState() {}\n\n}\n\nexport interface IStateScreenshot {\n    isAlive: boolean;\n    size: number;\n    pos: Vector;\n    velocity: Vector;\n}\n","import Emitter, { Listener } from '../emitter';\nimport Stat from '../stat';\nimport Vector from '../vector';\nimport World from '../world';\nimport CellBehavior from './behavior';\nimport CellBody from './body';\nimport CellDiet, { IEnergySource, IEnergySourceConstructor } from './diet';\nimport CellPhysic from './physic';\nimport CellRelations from './relations';\nimport CellRenderer from './renderer';\nimport CellSenses from './senses';\nimport CellState, { IStateScreenshot } from './state';\n\nlet id = 0;\nconst cells: Cell[] = (window as any).cells = [];\n\nexport default class Cell {\n\n    private behavior = new CellBehavior(this);\n    private diet = new CellDiet(this);\n    private relations = new CellRelations(this);\n    private renderer = new CellRenderer(this);\n    private senses = new CellSenses(this);\n    private state = new CellState(this);\n    private body = new CellBody(this, this.state);\n    private physic = new CellPhysic(this, this.state);\n    private emitter = new Emitter();\n    id: number;\n\n    constructor() {\n        this.id = id++;\n\n        cells[this.id] = this;\n        this.flushState();\n    }\n\n    toString() {\n        return `[Cell ${this.id}]`;\n    }\n\n    //\n    // STATE\n    //\n\n    getStat(key: Stat) {\n        return this.state.getStat(key);\n    }\n\n    setStat(key: Stat, value: number) {\n        this.state.setStat(key, value);\n    }\n\n    getState() {\n        return this.state.getState();\n    }\n\n    setState(value: IStateScreenshot) {\n        return this.state.setState(value);\n    }\n\n    flushState() {\n        return this.state.flushState();\n    }\n\n    //\n    // SIGNALS\n    //\n\n    on(signal: string, listener: Listener) {\n        this.emitter.on(signal, listener);\n    }\n\n    emit(signal: string, argument: any) {\n        this.emitter.emit(signal, argument);\n    }\n\n    //\n    // BODY\n    //\n\n    get isAlive() {\n        return this.body.isAlive;\n    }\n\n    get size() {\n        return this.body.size;\n    }\n    set size(value) {\n        this.body.size = value;\n    }\n\n    get energy() {\n        return this.body.energy;\n    }\n    set energy(value) {\n        this.body.energy = value;\n    }\n\n    canMitos() {\n        return this.body.canMitos();\n    }\n\n    mitos() {\n        return this.body.mitos();\n    }\n\n    //\n    // DIET\n    //\n\n    setDietType(Type: IEnergySourceConstructor, nutrition = 1) {\n        this.diet.addType(Type, nutrition);\n    }\n\n    eat(target: IEnergySource) {\n        return this.diet.eat(target);\n    }\n\n    canEat(target: IEnergySource) {\n        if (target instanceof Cell && this.isFamily(target)) {\n            return false;\n        }\n\n        return this.considerFood(target) > 0;\n    }\n\n    considerFood(target: IEnergySource) {\n        const dietFactor = this.diet.consider(target);\n\n        if (target instanceof Cell) {\n            return dietFactor * this.considerFight(target);\n        }\n\n        return dietFactor;\n    }\n\n    //\n    // SENSES\n    //\n\n    getVisionRange() {\n        return this.senses.getVisionRange();\n    }\n\n    getVisibleEntities(map: World) {\n        return this.senses.getVisibleEntities(map);\n    }\n\n    canSee(target: Cell) {\n        return this.senses.canSee(target);\n    }\n\n    isTouching(target: Cell) {\n        return this.senses.isTouching(target);\n    }\n\n    considerFight(target: Cell) {\n        return this.senses.considerFight(target);\n    }\n\n    //\n    // RELATIONS\n    //\n\n    setParent(target: Cell) {\n        this.relations.setParent(target);\n    }\n\n    isFamily(target: Cell) {\n        return this.relations.isFamily(target);\n    }\n\n    isParentOf(target: Cell) {\n        return this.relations.isParentOf(target);\n    }\n\n    isChildOf(target: Cell) {\n        return this.relations.isChildOf(target);\n    }\n\n    isSibling(target: Cell) {\n        return this.relations.isSibling(target);\n    }\n\n    //\n    // PHYSIC\n    //\n\n    get pos() {\n        return this.physic.pos;\n    }\n    set pos(value) {\n        this.physic.pos = value;\n    }\n\n    get velocity() {\n        return this.physic.velocity;\n    }\n    set velocity(value) {\n        this.physic.velocity = value;\n    }\n\n    shove(force: Vector) {\n        return this.physic.shove(force);\n    }\n\n    move() {\n        return this.physic.move();\n    }\n\n    //\n    // BEHAVIOR\n    //\n\n    tick(map: World) {\n        return this.behavior.tick(map);\n    }\n\n    //\n    // RENDERER\n    //\n\n    render(context: CanvasRenderingContext2D) {\n        return this.renderer.render(context);\n    }\n\n}\n","import Cell from './cell/index';\n\nexport default Cell;\n","import Cell from './cell';\nimport { IEnergySource } from './cell/diet';\nimport Vector from './vector';\n\nexport default class World {\n\n    private entities = new Set<IWorldEntity>();\n\n    constructor(\n        readonly size: Vector,\n    ) {}\n\n    add(entity: IWorldEntity) {\n        this.entities.add(entity);\n    }\n\n    remove(entity: IWorldEntity) {\n        this.entities.delete(entity);\n    }\n\n    getAllEntities() {\n        return [...this.entities];\n    }\n\n    getEntitiesAt(point: Vector) {\n        const result: IWorldEntity[] = [];\n\n        for (const entity of this.entities) {\n            const { x, y } = point.diff(entity.pos);\n            const { size } = entity;\n            const isInBox = x < size && y < size;\n\n            if (isInBox && entity.pos.distance(point) <= size) {\n                result.push(entity);\n            }\n        }\n\n        return result;\n    }\n\n    getEntitiesIn(point: Vector, radius: number) {\n        const start = point.sub({ x: radius, y: radius });\n        const end = point.add({ x: radius, y: radius });\n        const result: IWorldEntity[] = [];\n\n        for (const entity of this.entities) {\n            const { x, y } = entity.pos;\n            const range = radius + entity.size;\n            const isInBox = x >= start.x && x <= end.x && y >= start.y && y <= end.y;\n\n            if (isInBox && entity.pos.distance(point) <= range) {\n                result.push(entity);\n            }\n        }\n\n        return result;\n    }\n\n}\n\nexport interface IWorldEntity<T = EntityState> extends IEnergySource, StateHolder<T> {\n    id: number;\n    size: number;\n    pos: Vector;\n    tick(map: World): void;\n    render(context: CanvasRenderingContext2D): void;\n}\n\nexport interface StateHolder<T> {\n    getState(): T;\n    setState(state: T): void;\n    flushState(): void;\n}\n\nexport interface EntityState {\n\n}\n","import Cell from '../cell';\nimport { random } from '../math';\nimport Stat from '../stat';\nimport Vector from '../vector';\nimport World from '../world';\nimport Game from './index';\n\nexport default class GameEntities {\n\n    world: World;\n\n    constructor(\n        private game: Game,\n        mapSize: Vector,\n    ) {\n        this.world = new World(mapSize);\n    }\n\n    addCell(position: Vector) {\n        const cell = new Cell();\n\n        cell.size = 4 + random(2);\n        cell.pos = position;\n\n        cell.setStat(Stat.ESCAPE_ACCELERATION, 1);\n        cell.setStat(Stat.FRICTION, 0.3);\n        cell.setStat(Stat.HUNT_ACCELERATION, 1);\n        cell.setStat(Stat.MAX_BITE_SIZE, 10);\n        cell.setStat(Stat.MAX_RADIUS, 200);\n        cell.setStat(Stat.MAX_VELOCITY, 10);\n        cell.setStat(Stat.MITOSIS_MIN_RADIUS, 50);\n        cell.setStat(Stat.VISION_RANGE, 300);\n\n        cell.flushState();\n\n        this.world.add(cell);\n\n        return cell;\n    }\n\n    getEntities() {\n        return this.world.getAllEntities();\n    }\n\n    tickEntities() {\n        const { world } = this;\n        const entities = this.getEntities();\n\n        for (const entity of entities) {\n            if (entity instanceof Cell && !entity.isAlive) {\n                world.remove(entity);\n                continue;\n            }\n\n            entity.tick(world);\n        }\n    }\n\n}\n","import Cell from '../cell';\nimport Vector from '../vector';\nimport Game from './index';\n\nexport default class GameInteraction {\n\n    mouse: Vector = null;\n    private isListening = false;\n\n    constructor(\n        private game: Game,\n    ) {\n        this.onKeyPress = this.onKeyPress.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n    }\n\n    addListeners(canvas: HTMLCanvasElement) {\n        if (this.isListening) {\n            return false;\n        }\n\n        document.addEventListener('keypress', this.onKeyPress);\n        canvas.addEventListener('mousemove', this.onMouseMove);\n    }\n\n    private onKeyPress(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'Space':\n                this.game.toggle();\n\n            case 'KeyA':\n            case 'KeyJ':\n                this.game.speed = -1;\n                this.game.isPaused = false;\n                break;\n\n            case 'KeyS':\n            case 'KeyK':\n                this.game.speed = -1;\n                this.game.isPaused = true;\n                this.game.step();\n                break;\n\n            case 'KeyD':\n            case 'KeyL':\n                this.game.speed = 1;\n                this.game.isPaused = true;\n                this.game.step();\n                break;\n\n            case 'KeyF':\n            case 'Semicolon':\n                this.game.speed = 1;\n                this.game.isPaused = false;\n                break;\n\n            default:\n                console.log(`KEYPRESS ${event.code}`);\n        }\n    }\n\n    private onMouseMove(event: MouseEvent) {\n        this.mouse = Vector.from(event);\n        this.game.render();\n        this.interact();\n    }\n\n    interact() {\n        const { game } = this;\n        const { world } = game;\n\n        if (!this.mouse) {\n            return;\n        }\n\n        const hover = world.getEntitiesAt(this.mouse);\n\n        if (!hover.length) {\n            return;\n        }\n\n        for (const cell of hover as Cell[]) {\n            game.renderCellDetails(cell);\n        }\n    }\n\n}\n","import Cell from '../cell';\nimport { TAU } from '../math';\nimport Vector from '../vector';\nimport Game from './index';\n\nexport default class GameRenderer {\n\n    constructor(\n        private game: Game,\n        private canvas: HTMLCanvasElement,\n    ) {}\n\n    renderEntities() {\n        const { game, canvas } = this;\n        const { width, height } = canvas;\n        const entities = game.getEntities();\n        const context = canvas.getContext('2d');\n\n        context.clearRect(0, 0, width, height);\n\n        for (const entity of entities) {\n            entity.render(context);\n        }\n    }\n\n    renderCellDetails(cell: Cell) {\n        this.renderCellVision(cell);\n        this.renderCellBehavior(cell);\n    }\n\n    private renderCellVision(cell: Cell) {\n        for (const visible of cell.getVisibleEntities(this.game.world)) {\n            this.drawLine(cell.pos, visible.pos, {\n                width: 0.5,\n            });\n        }\n\n        const visionRange = cell.getVisionRange();\n\n        this.drawCircle(cell.pos, visionRange, {\n            color: 'red',\n        });\n\n    }\n\n    private renderCellBehavior(cell: Cell) {\n        const velocityMultiplier = 100;\n        const velocityLine = cell.velocity.multiply({\n            x: velocityMultiplier,\n            y: velocityMultiplier,\n        });\n\n        this.drawLine(cell.pos, velocityLine.add(cell.pos), {\n            color: 'blue',\n            width: 2,\n        });\n    }\n\n    drawLine(from: Vector, to: Vector, {\n        color = 'black',\n        width = 1,\n    } = {}) {\n        const context = this.canvas.getContext('2d');\n\n        context.lineWidth = width;\n        context.strokeStyle = color;\n        context.beginPath();\n        context.moveTo(from.x, from.y);\n        context.lineTo(to.x, to.y);\n        context.closePath();\n        context.stroke();\n    }\n\n    drawCircle(at: Vector, radius: number, {\n        color = 'black',\n        width = 1,\n    } = {}) {\n        const context = this.canvas.getContext('2d');\n\n        context.lineWidth = width;\n        context.strokeStyle = color;\n        context.beginPath();\n        context.arc(at.x, at.y, radius, 0, TAU);\n        context.closePath();\n        context.stroke();\n    }\n\n}\n","import Game from './index';\n\nexport default class GameState {\n\n    private history: EntitiesState[] = [];\n\n    constructor(\n        private game: Game,\n    ) {}\n\n    tick(cursor: number) {\n        if (this.hasStep(cursor)) {\n            this.load(cursor);\n            return;\n        }\n\n        while (!this.hasStep(cursor)) {\n            this.processNewStep();\n        }\n    }\n\n    hasStep(cursor: number) {\n        return this.history.length > cursor;\n    }\n\n    load(index: number) {\n        const state = this.history[index];\n        const entities = this.game.getEntities();\n\n        for (const entity of entities) {\n            entity.setState(state[entity.id]);\n        }\n    }\n\n    processNewStep() {\n        this.game.tickEntities();\n\n        const entities = this.game.getEntities();\n        const newState: EntitiesState = {};\n\n        for (const entity of entities) {\n            entity.flushState();\n            newState[entity.id] = entity.getState();\n        }\n\n        this.history.push(newState);\n    }\n\n}\n\ninterface EntitiesState {\n    [id: number]: object;\n}\n","export default class GameTicker {\n\n    private _speed = 0;\n    private cursor = -1;\n    private isRunning = false;\n    isPaused = false;\n\n    get speed() {\n        return this._speed;\n    }\n    set speed(value) {\n        if (value !== 1 && value !== -1) {\n            throw new Error(`Invalid speed ${value}`);\n        }\n\n        this._speed = value;\n    }\n\n    get isForward() {\n        return this.speed === 1;\n    }\n\n    get isBackwards() {\n        return this.speed === -1;\n    }\n\n    get isAtBegining() {\n        return this.cursor === 0;\n    }\n\n    constructor(\n        private callback: GameTickerCallback,\n    ) {\n        this.onTick = this.onTick.bind(this);\n    }\n\n    start() {\n        if (this.isRunning) {\n            return;\n        }\n\n        this.speed = 1;\n        this.isRunning = true;\n        requestAnimationFrame(this.onTick);\n    }\n\n    stop() {\n        this.isRunning = false;\n    }\n\n    pause() {\n        this.isPaused = true;\n    }\n\n    toggle() {\n        this.isPaused = !this.isPaused;\n    }\n\n    step() {\n        if (this.isBackwards && this.isAtBegining) {\n            console.warn(`Can't go further in history!`);\n            this.isPaused = true;\n            return;\n        }\n\n        console.log(this.cursor);\n        this.cursor += this.speed;\n        this.callback.call(null, {\n            turn: this.cursor,\n        });\n    }\n\n    private onTick() {\n        if (!this.isRunning) {\n            return;\n        }\n\n        requestAnimationFrame(this.onTick);\n\n        if (!this.isPaused) {\n            this.step();\n        }\n    }\n\n}\n\nexport type GameTickerCallback = () => void;\n\nexport interface GameTickerParams {\n    turn: number;\n}\n","import Cell from '../cell';\nimport Vector from '../vector';\nimport GameEntities from './entities';\nimport GameInteraction from './interaction';\nimport GameRenderer from './renderer';\nimport GameState from './state';\nimport GameTicker, { GameTickerParams } from './ticker';\n\nexport default class Game {\n\n    private entities: GameEntities;\n    private interaction = new GameInteraction(this);\n    private renderer: GameRenderer;\n    private state = new GameState(this);\n    private ticker = new GameTicker(this.tick.bind(this));\n\n    get world() {\n        return this.entities.world;\n    }\n\n    constructor(\n        private canvas: HTMLCanvasElement,\n        mapSize: Vector,\n    ) {\n        this.entities = new GameEntities(this, mapSize);\n        this.renderer = new GameRenderer(this, canvas);\n    }\n\n    tick({ turn }: GameTickerParams) {\n        this.state.tick(turn);\n        this.render();\n        this.interaction.interact();\n    }\n\n    //\n    // TICKER\n    //\n\n    get isPaused() {\n        return this.ticker.isPaused;\n    }\n    set isPaused(value: boolean) {\n        this.ticker.isPaused = value;\n    }\n\n    get speed() {\n        return this.ticker.speed;\n    }\n    set speed(value: number) {\n        this.ticker.speed = value;\n    }\n\n    start() {\n        return this.ticker.start();\n    }\n\n    stop() {\n        return this.ticker.stop();\n    }\n\n    pause() {\n        return this.ticker.pause();\n    }\n\n    toggle() {\n        return this.ticker.toggle();\n    }\n\n    step() {\n        return this.ticker.step();\n    }\n\n    //\n    // ENTITIES\n    //\n\n    getEntities() {\n        return this.entities.getEntities();\n    }\n\n    addCell(position: Vector) {\n        return this.entities.addCell(position);\n    }\n\n    tickEntities() {\n        return this.entities.tickEntities();\n    }\n\n    //\n    // INTERACTION\n    //\n\n    addListeners() {\n        this.interaction.addListeners(this.canvas);\n    }\n\n    //\n    // RENDER\n    //\n\n    render() {\n        return this.renderer.renderEntities();\n    }\n\n    renderCellDetails(cell: Cell) {\n        return this.renderer.renderCellDetails(cell);\n    }\n\n}\n","import Game from '../src/game/index';\nimport Vector from '../src/vector';\nimport { random } from '../src/math';\nimport Cell from '../src/cell';\n\nmain();\n\nasync function main() {\n    await domLoaded();\n\n    const width = window.innerWidth;\n    const height = window.innerHeight - 4;\n\n    console.log({ width, height });\n\n    const canvas = document.querySelector('canvas#world') as HTMLCanvasElement;\n    const game = new Game(canvas, Vector.of(width, height));\n\n    canvas.width = width;\n    canvas.height = height;\n\n    for (let i = 0; i < 10; i++) {\n        const x = random(0, width);\n        const y = random(0, height);\n        const cell = game.addCell(Vector.of(x, y));\n\n        cell.setDietType(Cell);\n    }\n\n    game.addListeners();\n    game.start();\n    game.pause();\n}\n\nfunction domLoaded() {\n    return new Promise(resolve => window.addEventListener('DOMContentLoaded', resolve));\n}\n"]}