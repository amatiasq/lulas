{"version":3,"sources":["../src/emitter.ts","../src/stat.ts","../src/cell/behavior.ts","../src/math.ts","../src/cell/body.ts","../src/cell/diet.ts","../src/vector.ts","../src/cell/physic.ts","../src/cell/relations.ts","../src/cell/renderer.ts","../src/cell/senses.ts","../src/cell/state-decorators.js","../src/cell/state.ts","../src/cell/index.ts","../src/world.ts","../src/game/entities.ts","../src/game/interaction.ts","../src/game/renderer.ts","../src/game/state.ts","../src/game/ticker.ts","../src/game/index.ts","persisted-state.ts","main.ts"],"names":["exports","buffer","Class","bufferProps","_bufferProps","_isDoubleBuffer","Object","assign","prototype","getState","prev","prop","state","setState","newState","_isBufferDirty","next","flushState","bufferProp","key","constructor","push","defineProperty","get","set","value"],"mappings":";;;;AAAA,MAAA,OAAA,CAAA;AAAA,kBAAA;AAEY,ACFZ,IAAK,IAAL,KDEY,SAAA,GAAY,IAAI,GAAJ,EAAZ;AAsBX,ACxBD,CAAA,UAAK,IAAL,EAAS;ADIL,ACHA,ODGG,ECHH,IDGA,CCHA,CDGmB,QAAnB,EAAqC,UCHrC,IAAA,CAAA,IAAA,qBAAA;ADII,ACHJ,SAAA,GDGQ,CAAC,CCHT,IDGc,MCHd,GDGS,CAAe,ACHxB,CAAA,EDGS,CAAmB,CCH5B,KDGS,CAAL,EAAiC,ECHrC;ADIQ,AGNC,AFGT,QEHS,CFGT,CEHS,GAAK,CFGd,GDGa,CGNM,EAAV,MHMD,CAAe,GAAf,CAAmB,ECH3B,IDGQ,ACHR,CAAA,CDGmC,EAA3B,CCHR,mBAAA;ACHJ,AFOS,AGNI,AFGT,MCJJ,ECCa,CFGT,EEHS,GAAM,AFGf,CCJJ,ICCwB,EAAL,GAAU,CAAhB,IFGT,ECJJ,EDII,CAAA,IAAA,CCJJ,SAAA,CAAA,CAAA,GDII;ACDJ,AFMQ,AGNK,AFET,MCFJ,ECAa,CFET,EEFS,EHMA,CGNM,AFEf,ECFJ,GCAwB,GHMhB,AGNK,CHMU,GAAf,ACJJ,CDIuB,GCJvB,CAAA,CCFJ,CFMQ,EAA2B,ACJ/B,IDII,CENR,AFMwC,OCJpC,CDII,CENR,CAAA,CAAA;AAEA,AFKK,AGNQ,AFET,MCDJ,ECDa,CFET,EEFS,GAAM,AFEf,ICDJ,CAAA,ACDwB,GAAX,YFET,IAAA,CAAA,IAAA,oBAAA;ACCA,AFKA,AGPS,AFET,QEFS,CHOJ,ACLL,EEFS,GAAM,AFEf,CDKA,CEJY,CFIS,EGPD,CDEpB,EACsB,ACHb,GHOT,EAAkC,CCLlC,IAAA,CAAA,IAAA,cAAA;ACCY,AERhB,AJaQ,AGPK,AFET,MGRJ,EDMa,CFET,GEFS,CDEG,CFKF,ACLV,CGRJ,ADMoB,EDEJ,GAAA,ACFS,GCNzB,CFQgB,ACFH,EHOa,ECLtB,GDK2B,CIb/B,AHQI,CGRJ,AHQI,IAAA,GDKsB,CAAe,GAAf,CAAmB,MAAnB,ACLtB,CDKI;AEJA,AERR,AJcQ,AGRK,AFEZ,AKTD,CLAA,EAAK,GGCL,AEDA,EHOa,GAAA,CHQD,ACfP,CDeQ,CGRM,CCNnB,AEDA,IHOwB,AFPf,EAAJ,CDeG,AGRK,AFPb,CKAA,CNewB,OIdxB,AEDA,CAAA,OFCA,SAAA,CAAA,CAAA;AFUI,AETJ,ACDA,ALeY,AGPZ,AFEA,AKTA,MFAA,ACDA,ACCA,ELSA,CCAS,ACFT,GDEI,AITJ,CAAA,CJSmB,CGVnB,AFQA,AFEA,CGTA,ADOuB,EFER,CEFf,EAAqC,CFErC,EEFA,EAAiD,KERjD,CDCA,OCDA,CDCA,QCDA,CDCA,ACDA,CDCA,ACDA,CDCA;AFUQ,AEPR,ACDA,ALaS,AGPL,AG0BA,MF/BJ,ACDA,EFMQ,MDEM,AEPd,ACDA,CDCA,ACDA,CCiCiB,CADb,CH1Bc,CG4BD,CAFb,EAEsB,EH5BlB,CDEiB,ICFI,CDEC,ACF1B,EAA4B,EDEP,CAAU,kBAAV,CAA6B,GAA7B,CAAjB;AAEA,AEeJ,ACrBA,ALWI,AGRA,AG0BS,aJvBJ,AFKA,AMkBI,CAAA,CH1BF,CCmBC,ACrBA,CC4BC,CAAA,CJvBE,AFKA,CIUf,ACrBA,AFGgB,ECoBJ,ACtBU,GHKlB,CCHO,CCkBX,AJVI,CGRA,CDGqB,AEiBG,EJZD,MELvB,EAA+B,CFK/B,EAAkC;AEJ9B,AEeI,ACrBA,AGPhB,ARkBY,AGRP,AG0BY,KH5Bb,CKRJ,KLUW,ECkBK,ACrBA,AC6BC,CAAA,CH1BF,CDGC,CEeA,ACrBA,AC6BC,CAAA,CEpCjB,CJ4BgB,ACrBA,AGPhB,CRkBqB,GIUL,ACrBA,CFGS,IHQb,EGRG,GDGmB,ECHE,CAAzB,EAA4B,GDGL,OAAtB,EAA4B;AACxB,AEeA,ACzBJ,AENZ,ACMI,AReK,AGRD,AG2BA,MCxCR,MDwCY,CFTI,ACzBJ,CFOE,CIbd,CCOgB,CLMR,CCkBQ,ACzBJ,ACkCM,CAAN,CElCR,CNUiB,AEeL,ACzBI,CGCM,EFiCF,CDlCA,CDyBR,ECzBI,EAAR,ACkCkB,CCxC9B,ADwCwB,CAAhB,EAA0B,GJxBlB,CAAsB,CKhBtC,KLgBgB,IKhBhB,CAAA,CAAA;ALiBa,AEgBL,ACvBA,AETR,ACMgB,ACPhB,ATsBK,AGRG,AG2BI,MCxCZ,AEDA,OLiCa,AI1BG,CLOF,CMdd,ANcQ,EIbR,ACMgB,CJ0BR,AEQU,CFRC,CI1BH,EFkCM,CGzCtB,CDOgB,EJ0BR,CEQU,CAAU,CFRC,GKjC7B,CLiCQ,AGhCR,AEDA,QFCA,WAAA,CAAA,CAAA,GDwCyD,IAAI,EAA3C,CAAN;AJvBH,AEgBD,ACtBJ,AEPJ,ACDY,ACDZ,AEHAA,AXAA,AGeK,AG2BI,MCrCT,AEFA,EEHQC,INYI,CDsBC,AI9BD,CGJZ,ENYI,AEPJ,CAAA,AILiB,CPkCT,ACtBoC,AIT5C,CL+BmB,AK/BnB,CDCY,GJ8BJ,AI9Bc,CHQlB,EDsBsB,ACtBgC,AMZhCA,CPkClB,AI9BkB,GAAJ,EAAV,AGJK,CAAgBC,KAAhB,EAAuB;AToBhC,AEeH,ACtBG,AEJJ,ACDI,ACCJ,AERA,AXDJ,AGiBI,AG0BC,QN3CL,EWCUC,CRgBC,EDGE,AGPA,ELbb,COUgB,AEAA,ANOA,CDGR,CAAU,AGPV,ALbR,CKamB,CEJf,AEAA,CNQO,CDGH,AGPA,AEFQ,AEDU,ANOJ,CEJC,CMZCD,CXDxB,EKaQ,AEJJ,AJQuB,EEJE,AEFG,CIVFE,GRgBR,EEJd,IFI+B,GQhBf,GAAqBF,ARgBA,GAAvB,CAAX,EQhBwCE,ERgBE,GAAjD,OQhByC,IAAsB,EAA/D;AToBC,AEdD,ACOC,AEJW,ACAZ,ACAY,ANQf,AGZG,QFCI,GEDG,ECIK,AEAA,AHJZ,CEIU,AFJA,CFCV,AEDA,ECIY,AEAA,AHJS,CFCV,AEDX,ECIY,ACAZ,ACAY,AHJkB,EEIR,EDAV,AEAA;APaZ,AEfI,ACQJ,AELY,ACAR,ACNJ,AEFAF,ARMJ,AGFQ,QDSA,AFPR,EQNUG,GJQM,ACAH,ACNT,CJWA,AFPJ,CCDe,AEDA,CDSc,CFP7B,CIEgB,AENZ,CHEe,CFCC,AIGZ,CNYa,AKZL,ACAK,ACNT,ENIZ,CKEQ,CJHO,AIGU,AGRrB,ALIW,CJgBX,AEfsB,AGGV,ADJU,CGFR,AHEH,CJgBiB,ASpBJ,CLIC,CAAd,CEIP,AFJA,CKJJ,CPKI,CKHU,MAAA,CAAO,CAAP,EAAU,QAAV,EACT,QADS,CACA,EADA,EAET,QAFS,CAEA,CAFA,EAEG,GAFH,CAAd;APmBI,AEfH,ACQG,AEVI,ACKP,ACDG,ACXR,APoBA,AGZK,MIRL,MLiBY,CAAC,AEVD,CLiBE,CQxBd,GLiBkB,CEVN,GFUC,AEVkB,CFUR,CEVX,GLiBe,EGPd,CAAiB,CKjB9B,CRwBgC,IAAL,AGPd,CHOwB,AGP7B,EAA+B,AKjBvC,QRwB2B,CAAqB,AQxBhD,CAAA,CAAA,GRwB2B,CAAnB;AAEA,AEfJ,ACOQ,AELJ,ACCJ,ACDA,ACTJ,ACCIC,ARgBJ,AGXI,MINJ,ENOQ,GKEG,AERAC,ALKA,CJgBC,AEfR,CIGS,CDDC,CHFF,AEDR,CINJ,AJMgB,CJgBC,AKbT,AGTR,ACCI,CNac,AILd,AERcL,ALKA,CEId,CDDgB,AEAwB,CPahC,AMZa,CNYH,AGRA,ACRA,CAAN,CKLQM,CLKC,EDQP,CHQN,AGRgB,CHQC,AKbT,ADHS,CAAb,EAAZ,CKLA,CTqBQ,AIhBmC,CJgBvC,ASrB2B,CJQf,CLaiB,AKbV,IAAnB,WFK4C,MAAM,EAAxC,CAAN;AHSA,AEfJ,ACOC,AELD,ACCA,ACDA,ACRJ,APgBJ,AGXQ,cCGM,AEAA,CLFC,AIIH,AFLG,CJgBC,AOZJ,ACRI,GDOF,AHHK,CFCC,AIIH,AEVb,CDUQ,CFFJ,AGPkB,GNKX,AGEU,ADHV,CJgBH,AEfc,AEDA,CAAX,CJgBa,CMXhB,ACFE,AHHe,CFCrB,AIImB,AFLZ,CGMH,AHNJ,GCGiB,CEAX,CDEF,ICEA,CFJa,ACGb,CDHoB,GEIf,CFJT,ACGS,GCHT,ODGI,CAAgB,MAAhB,CADA,IAEA,KAAK,SAAL,CAAe,MAAf,CAHJ;ANaQ,AEfX,ACQG,AENH,ACKA,ACAG,ACbQ,ACARC,ARiBR,AGZK,MHYC,OOjBU,CLcF,GKdE,ECAG,CDAH,CRqBK,ECJE,COjBP,APiBS,CDIT,ACJO,CDIG,CGPC,AFGC,EDIZ,ACJO,CDIO,CCJE,CEHA,EFGT,CDIP,ACJhB,CEH2B,CAAU,MAA7B;AHQK,AEfT,ACQI,AELJ,ACKA,ACDI,ACbA,ACAI,ARkBZ,AGZI,QFAI,AGGA,CJSR,EITI,ADHO,CFAP,CFaQ,AEbC,CCQC,AELH,AEIG,CDCC,CFRX,CAAa,CFAb,AONcC,CTqBC,CEfO,CIQtB,EAAuB,ACDJ,AHPnB,EKNqB,ARkBzB,AGZ0D,CHYhC,CQlBd,CLMiD,CDQhC,CIDC,CAAtB,CNKR,EAAwC,CGZpC,CDQgC,CCR2C,KDQvE;AHQQ,AEfR,ACQA,AELA,ACKA,ACDA,ACZJ,APiBA,AGZI,AQXR,MAAA,KXuBW,AWvBX,CAAA,CVWa,CCQC,AIDA,CFJC,ACKA,AFRA,GFAP,CAAW,CGGC,CLYC,AQpBH,CFaI,AFRA,CFAd,CKOgB,AHPT,CJeC,AKZD,ADFH,CJcc,AEfA,ACQA,AELA,AJSA,GITlB,ELYQ,AEfR,ACQuB,AGAhB,CAAiB,ALIrB,AGXQ,CGMc,EAAzB,ANK2B,AGXb,EEOe,EHAX,CAAc,CGAzB,CAAP,CFPsB,CHWc,CAAxC,CEJsB,ACPJ,CDOd,AFIuC,AGXZ,MAAD,IAAY,OAAO,CAA/B,CAAV,CADG,EAEH,OAAO,GAAG,QAAQ,GAAR,CAAa,MAAD,IAAY,OAAO,CAA/B,CAAV,CAFG,CAAP;AJgBK,AEdL,ACOA,AQxBR,ANmBK,ACKA,ACAG,ACbA,ACDI,ARkBJ,AGTH,AQXD,MDRJ,MTiBY,ECOE,CKbC,CDaC,AKfC,CHCA,CEVjB,EJwBQ,ACbY,AIHhB,EVSkB,AURO,CVQrB,AOPe,ARkBA,COjBR,CNMU,AMNA,ACDAC,ERkBjB,CAAoB,COjBb,ACDQ,ENcQ,AMdAC,CDCC,CPiBC,CU5BjC,ERwBoC,AMdb,ARkBK,COjBS,APiBA,CQlBzB,CRkBgB,CEJG,CAAU,AKbT,APiBS,CU5BzC,AHW0C,ACDAT,MNcX,CAAkB,AKbjB,CAAkB,GCDtC,CEVZ,CAAA,AFUuD,CNcN,AQxBjD,AV4BwD,COjBN,KPiBT,CEJQ,CAAK,AKbJ,CAAK,APiBU,CAArC,CAApB,UEJuB,AKbC,CLaxB,AKbA;ARqBC,AEdG,ACOJ,AQrBR,ANgBI,ACMA,ACDI,ACbH,ACDWO,ARkBX,AGRD,AQZa,MDLjB,ENgBQ,CLMA,EKNJ,ADCO,CCDC,COXK,CTgBH,AGCA,CNMC,COPC,AHJZ,CFHa,AGEb,ADCa,AQZA,EZuBE,AW5BnB,ANgByB,ADCN,CFHP,AIQR,AMjBa,CHEIC,CHeK,CFLH,CDIC,ACJP,AQZA,CZuBQ,AOPjB,AEdQ,CFcU,AHJA,GKVG,CFcC,AHJA,CJWX,AOPX,AHJS,CJWe,COPC,AHJ7B,CKV8BC,CEPlC,APiBgD,EJWX,AGPA,AIAA,CAA7B,CEdqB,CAAb,CTqBG,CAAJ,CW5Bf,CX4B4C,OGPpC,IQrBR,CAAA,CAAA;AX6BY,AEdH,ACOD,AQrBR,ANgBQ,ACMA,ACDA,ACZJ,ACFS,ACTb,AT4BI,AGTI,AQhBI,MDDZ,ADFA,KT4BW,EIVE,AOfD,CToBE,CQrBd,ALsBe,AFLA,CGIC,CPOC,CKZT,CAAW,CCMC,AFLA,CDIC,ASpBT,CPeJ,AEKA,CAAe,ACZA,CIRA,CPeE,CGPrB,APiBsB,CDEd,AMNG,AIxBf,ANmBe,CJWa,AMNA,AEbK,AJQL,AQhBD,EPenB,CMhBR,ALsBe,AMrBQ,CNqBS,ACDA,ANKrB,CDEC,ACFR,AWzBQ,EFHZ,ANmBmC,CDIC,CCJR,CEKb,AFLuB,COjBtC,ALsBQ,ACDe,AHJK,EAAa,CGIC,AHJd,CDIP,ACJN,CAAP,EDIsC,CQrB9C,CAAA,CAAA,AJqB0C,GAAA,CJArB,EIA2B,AGvBhD,CPuBwD,AIAhD,AGvBR,YPuBQ;AHQC,AEdJ,ACQG,AQtBR,ANgBK,ACMA,ACAG,ACbA,AETR,AT0BC,AGTI,AQbG,IFJa,ECArB,QHSc,CLaC,AQtBf,CJsBgB,AGtBhB,KPsBQ,COtBR,GPsByB,AIAjB,GAAoB,ACbA,CLapB,EQtBR,ADAA,CAAA,CHsBiC,ACbA,KDazB,CItBR,QAAA,AHS4B,CGT5B,CAAA,AHSQ;ARoBH,AEbD,ACOI,AQtBR,ANiBI,ACMA,ACAI,ACdA,ACFI,ACQR,AGtBJ,AZkCA,AGTI,AQbA,MDLJ,AEPA,EXsBQ,AGEA,AOZA,CXsBR,GGTY,CDIC,CDPT,AIQU,AEdA,APkBd,AWtBI,CCZJ,AZkCsB,CIVlB,AEMY,AGPA,AEXY,CVUd,ACON,AQtBR,CRsBkB,CELF,AIVGF,ALWf,CEKA,AIRA,ATYJ,AGToB,EEKM,AIPA,ATWW,CQpBzB,CNeJ,CICA,ACdiB,EJSrB,CDIwB,CKbC,AJSS,ESzBtC,EFOA,AV2BgD,CAAhD,CELmC,CFKc,GYlCjD,ATyByD,EOlBzD,CHSyB,CAAkB,AJSkB,CDIrD,IKbwC,AKhBhD,CAAA,ATyByD,CSzBzD,ATyBoE,COlBpE,APkByD,COlBzD,AHS2C,CGT3C,AHSqD,AJSkB,CAAd,CAArD,CITqB,CJSgD,CITf,WAAjC,CAAjB;ARqBJ,AEdI,ACOA,AQtBR,ANiBQ,ACMA,ACAA,ACbA,ACHC,ACQO,AGtBhB,AEAA,AdkCI,AGTI,AQbA,MDLR,AEPA,AEAA,EdkCQ,CDEC,AShC0B,INyBtB,AGCA,AIRG,AEVH,CRaC,CJWV,AEdW,AGEA,AGPA,AKjBf,AEAA,CR8BgB,CPMK,AGPb,AOPQ,CPOE,CGCC,ACAX,CIvBR,ANiBoB,AEMA,AGRJ,CHQR,ANIa,AWtBb,CVUO,ACOP,AFKJ,AGTkB,AQbA,CTiBC,AICA,AM9BvB,AEAA,CR8BQ,ACbgB,AEKR,ATYQ,CCZT,AGEA,ACMP,AMlBA,CVUW,AGEO,AEMA,AKlBA,CRaC,CDInB,CGCqB,CHDC,AKZf,CNKS,AMLQ,CDaxB,AM9BR,AEAA,AXyBsB,AQbd,CCZR,AEAA,AXyBiC,CCDzB,ACM0B,ACAA,CAA1B,CLRW,ACOX,AQtBR,AHU+B,CNKD,AKQO,CHLC,EIRI,CNK3B,AIQP,AFLc,EFHc,AIQO,AFLA,CFH5B,ASff,AJuBqC,GAA7B,CLRiC,EMLW,AJQ9B,EAA8B,CFHN,EAAtC,AMLiD,EGVzD,CAAA,CAAA,AHUe,AJQO,CIRd,AJQA;AJYA,AEdH,ACQG,AQvBR,ANiBK,ACMO,ACAJ,ACbH,AEXO,AGNZ,ACDA,ACIA,Ad+BQ,AGTA,AQbH,MDLL,AEPA,ACDA,ACIA,OLGY,CV8BE,AIXA,CDKC,AU9Bf,AZkCe,CKJC,ACAA,CO/BhB,CJOY,AKHZ,CZ2BQ,AQvBR,AIJA,CR2BQ,ANIY,AGTA,CMnBA,CV8BE,CMNC,EIxBC,AT4BT,AGTU,CHSC,CDEC,CU9BP,EAAR,ANmBQ,CJWE,AapCtB,AZkCe,AGTgB,CJWC,AMNhB,ALIR,CKJyB,AQ/BjC,EHQA,CPkBoC,GJWd,AMNN,AO9BhB,ATyBoB,CJWoB,AMN5B,CQ/BZ,AV0ByC,CEKC,CKvB1C,IX6BwC,CapCxC,ATyBoB,CSzBpB,CAAA,ATyBkD,EU1BlD,CAAA,CdqCwC,AcrCxC,CdqC6C,AW7B7C,CAAA,CAAA,APkBoB,CAAZ,cJWc,CAAd;AACA,AEdJ,ACQC,AQvBL,ANiBI,ACMY,ACAR,ACZJ,ACJIG,ACOA,AGpBR,ACAA,ACGI,ACNJ,AfoCK,AGRG,AQbJ,MDNJ,AENA,ACAA,AEHA,EdwBQ,AGEA,GGNG,AILA,ERaE,CJUC,AEdV,CAAW,AcxBf,CX0BI,AEMY,AM7BhB,AEIgB,CJEhB,ANiBiB,AGNb,ACJaC,ALYA,AQbb,EJKmB,AILQ,CVS3B,AalBA,CDHJ,AVyBqB,CFJD,AGEhB,AEMI,AO7BR,ACKgB,CTwBO,ACAA,AShCvB,CX0B8B,CIVtB,CTsBkB,CMNV,AGhBW,ALYA,CWtBvB,AXsBI,CGIA,CQxBiC,AXoBX,CGIC,CM7B/B,AGHA,ChBsCiC,AW7BjC,AKTA,CZ4BkC,EJUR,CAAW,CON7B,AHJ8B,CAA9B,CJUkB,AanC1B,CbmCyC,AW7BzC,APmByC,GAAjC,EJUsC,AIVA,IJUL,AanCzC,CbmCmD,AW7BnD,AENA,CFMA,AENA,CFMA,CX6B0B,CAAlB;AACA,AEdA,ACSJ,AQxBJ,ANiBQ,ACMK,ACAL,ACZA,ACJI,ACQR,AGnBJ,ACII,ACHY,ACLhB,AfoCI,AGTQ,AQbJ,MDNR,AEJA,AGJA,IfoCU,ESbE,CRAC,ACSA,AEPA,AUpBG,AHSH,CZuBC,AQlBA,CEIV,AMvBJ,CLQA,AJuBgB,AOtBA,AEThB,CPeiBC,ACQI,AKlBL,AXsBC,CFJT,AGEA,AQrBR,CXmBmB,ACSf,AEPe,AQrBnB,CCII,ACHY,CfgCK,AGLa,AFIb,AGTA,AQbb,CLiBA,AOrBA,AFIc,CVSd,AKQe,CAAf,AOrBE,ACLM,CXsBS,CFJC,AKQA,CFNlB,CGNoB,AILpB,CAAqB,CPWC,CLYC,AStBnB,ALYmB,COnB/B,APmBY,CFJc,AMJO,CCJC,ALYA,CCF1B,AEM2B,AKjB3B,EVSkB,CAAK,AKQL,ANKY,AGTA,CKZ1B,CEPZ,AGEQ,CPqBiC,CHJC,CJUrB,AIVT,CJUgC,Cc3BW,AViBV,CFJN,ADalB,COjBO,AMXxB,Ab4BA,CMLI,AHJI,CJUS,AW7BrB,AHWQ,AMTiD,Cd2BjD,AW7BR,APmBkD,CFJN,ASf5C,ETe0B,CAAlB;AFgBA,AEfH,ACSG,AQvBR,ANgBK,ACMI,ACAD,ACZA,AEIA,AGhBJ,ACCY,ACHA,ACQZ,ACjBJ,AhBwCI,AGTY,AQbX,IDLD,EMbJ,GNaS,CAAT,CV2BW,EDEE,Ac9BG,ACHA,CZ2BF,AKbA,CEIC,CHQC,AMvBA,AGMA,AClBhB,AhBwCgB,CDER,Ac9BQ,AGZhB,CjB0CkB,CejCF,CLkBI,AGhBhB,ACCY,AEKZ,CbmBiB,AFIV,CMLH,AMtBA,AEJQ,ACUR,AfqBc,AGTA,CJWd,AOPe,CPOC,AOPA,AOvBR,AEON,CRIe,AEIV,CAAW,EVelB,AGNoB,AY3BZ,AXsBY,CMJb,AGhBX,CNwBI,ACZsB,AEIA,ATaA,CY3BP,ATkBD,CGIU,AHJA,CMJjB,CFJU,AEIjB,AMRA,AZY0B,CIRC,AJQH,EAAK,CIRZ,APiBd,AGTqB,CDKxB,AIDA,ACZ+B,AQJI,CZYrB,CYdlB,AZcY,CHS0B,CerBG,IRIpB,CAAuB,EPiB5C,KOjBmD,GAA9B,CAAjB;ARoBH,AEND,ACCI,AQxBR,ANiBI,ACMI,ACDA,ACXA,ACLI,ACQP,AGhBW,ACNZ,ACII,ACQQ,ACYZ,AhBWH,AGTY,AQZT,MDNE,INiBI,GQnBM,ACNZ,AEYY,CLJO,CTuBX,ACCG,AEPX,ACMW,AEZA,CDWC,AULA,CZAO,AIXN,AIRD,AGMA,CFZZ,EXgCgB,AGDZ,AOzBQ,AGMA,CLJsB,AGRlB,ELcG,AGAH,CCRJ,AGMA,ACYZ,CdQW,AIFP,AEhBiBJ,AKdrB,CXgCsB,AQxBH,AMiBqB,CTNjB,ELaZ,AQxB+B,AFMvB,CNkBO,CQxB9B,AFM+BC,GNkBhB,EMlBQ,EAAeI,CNkBC,CAA/B,CKbiC,CCLlB,EAAX,IDKoC,ACLAb,IDKxC,OCLI,EAAiD;ATyBzD,AEPI,ACCH,AQvBL,ANgBQ,ACMH,ACDG,ACXH,ACLW,ACSZ,AGfI,ACRI,ACKR,ACPQ,AC0BI,AhBGhB,AGDS,AQZD,MDLR,EVkBA,EUlBA,CAAA,CDcY,CGfC,ACRD,AEFA,AC0BI,AhBGhB,CCIc,AGNA,CLaC,AUfX,AETW,CLgBC,ANHhB,AWbgB,CFSO,CGff,CDMW,CLgBX,AShCI,ChBwCR,ASxBiBS,AINA,AEHH,AEmBF,AhBGhB,CSJI,CVeuB,AgBxCL,CdiCE,AGNA,AKFY,AIvBxB,AGwBI,ALVQ,CCNC,CJMT,CKdU,AEFA,EdiCG,AGNA,CIXCE,AOhBR,EFEV,AEFA,AC0BI,ALVD,CViBS,AGNA,AQjBC,ADMjB,CViB0B,AGNA,KIXKH,CINlB,CXuBG,AGNA,AQjBO,CXuBW,AGNA,CIXZ,CAAd,IINK,CXuBqB,AGNA,AQjBlC,OXuBkC,AGNA,CHMK,AGNA,UAAvB,CAAhB,OHMgB,CAAhB;AFQA,AENA,ACpCR,AQyBI,ANII,AC/BR,ACqCQ,ACXJ,ACNY,ACSR,AGfH,ACRO,ACKJ,ACQA,ACnBI,AbgCP,AQZA,aFSQ,AIvBD,AEaC,ACnBD,CjB4CE,AKbA,AUpBA,Cb2BC,AMZA,CDWC,AQ1BA,EJgBZ,ADEI,CAAW,AO7BP,CfsCQ,Aa3BN,CVoBO,AGLjB,ACNiBK,CTwBC,AUfd,AIvBI,ACKU,AEXD,CVqCb,ACXmB,AEGJ,AMVf,ACnBI,CfsCG,COlBC,AKdQ,CTyBE,AKFlB,AMVkB,ChByBC,AENA,CQTC,AKlBd,CNSeF,AKdD,CTyBP,CLaC,AKbS,CLaC,ActCR,CJuBhB,AKlByB,Cb2BzB,AYhCI,CTyBJ,CWZA,CDRA,CNS8BH,CTwBhB,CAAkB,ESxBX,CAAb,ITwBwB,OAAA,CAAK,mBAAvB,CAAd;AACA,AENH,ACrCL,AQcY,ANgBJ,AChCR,ACsCK,ACXG,ACNK,ACSR,AGdD,ACHI,ACDA,ACQH,ACnBO,Ab0CR,AQrBA,QTpBJ,AGFA,AF2CQ,IS3BI,CFAA,AGHC,AGZD,CjB4CE,AKbA,AGLA,AOfA,AX+BV,CDzCJ,AGFA,CSYgB,CX+BF,CDzCd,AGFA,AMsBkB,CKrBN,CJeR,ACHI,CHGI,AIJE,CFIc,AIfP,CZ+BE,ASnBA,ACDA,AEXD,ALqBlB,CDNmB,AMfX,CT0Ba,AILM,CZuBL,AG3C1B,CE8B2B,CMhBA,AGHC,CCDd,CPegB,CF3B9B,CDgCgC,CLaC,CQlBR,AOfS,CVoBP,AGLQ,AMdZ,CdgCG,AKbU,ASnBA,CdgCC,CQlBZ,CGXE,AHWY,CRkBb,AchCH,ACDf,CfiCiC,AchCA,ETmBE,ESnBpB,CdgCuB,AW7BvB,AGHf,CHGgC,AHWf,CAAuB,ERkBP,AKbd,CLawB,AW7B5B,CAAX,ANgBwC,CAAzB,CLaD,AKblB,CLaA,AQlB+C,GAA9B,CAAjB;ARmBA,AELJ,ASxBQ,ANgBJ,AEhCR,AC2BQ,ACNC,ACUL,AGfI,AKjBR,AJcQ,ACDA,ACNJ,ACLQ,Ab0CJ,AQrBA,MMvBR,EFOgB,CPJmB,GPsC1B,CSxBG,AGHC,AGZD,CjB4CE,AKbA,AGLA,AKXA,AEJA,AHUA,CRqBC,EO3BH,EOjBZ,CPiBmB,AP2BC,CJEC,Aa7BA,AT2BN,CYrCX,ACLQ,CLqB2B,CDNhB,AGHf,CDGiB,AEJA,ACNK,ACLN,ALqBhB,CRqBkB,CU9BC,AV8BZ,CIhBa,CHKC,CUpBC,AEXlB,CjB4CmB,AW7BR,AP2BQ,CS3BN,ACHO,CNcC,EHKE,AajCnC,Cd4CoC,CIhBR,AJgBG,CO3BZ,AHWmB,CGXN,AEAX,EAAb,CLWoB,AJgBc,CJErB,AW7BF,ANgBU,AajC7B,AJc2B,AV8BnB,CJEoC,AW7BhC,ANgBgC,ASnBA,CNcC,CHKC,AUpBrB,EDCE,ACDnB,CfiCa,AKb4B,ASnBA,CdgCzC,EQlB4C,CMdzB,CAAnB,CTmBoC,AajC5C,CV4BQ,AU5BR,CbiCyD,AajCzD,GbiC4D,MAAhB,EAAf,CAArB;ALeA,AENA,ASxBI,ANiBJ,AElCR,AC6BQ,AEGJ,AGdI,AKlBR,AJcQ,ACDA,ACNA,ACLJ,Ab0CC,AQpBG,MMxBR,EXAA,KP+Ca,AW9BD,ANiBC,AQhBA,ACJA,AGZT,ALsBS,CViBC,Aa5BA,CRbd,AC6Be,AQtBA,EhBwCP,Aa7BA,Cb6BU,AO/ClB,CFkCQ,AOVW,CPUC,AQhBA,CIhBhB,CNeQ,AOjBZ,AFOe,ChBwCP,AcjCA,CdiCgB,AENA,AGPhB,AQhBgB,AELA,AEXT,CNeS,ANiBC,AW3BV,AJiBP,CEVkB,AEPP,CRsBQ,CRkBnB,CENqB,ASxBD,AKVN,ACLlB,ALsByB,CLxB7B,CMkBwB,AELO,Eb4BP,CAAU,AclCP,AJiBO,GPU1B,AQhBgB,CLWhB,AKXuB,AKlB/B,CLkBwB,CAAhB,CXuBgB,ASxBI,AIJJ,ACNF,CdkCoB,Aa5BA,ACNP,AJiB3B,EAAoC,CET9B,CIfd,AHawB,ACNF,CDMd,CJIgB,AKVT,CdkC2B,ASxBA,AKVlC,CFQW,GHEK,CAAZ,ETwB8B,CAAK,IgBzC/C,CAAA,CAAA,IJec,CAAuB,IAAvB,CAA4B,EZ0BlB,CAAhB,CY1BM,CADY,GAEZ,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAFN;AdkCH,AENG,ASxBI,ANiBP,AGLA,ACPGM,ACUJ,AGdI,AKlBR,AJgBK,ACFG,ACPH,ACsBG,AbkBJ,AQvBQ,AO5BZ,MDIA,ACJA,EfmDQ,KO9BI,AECC,AIWA,CfYC,EWvBN,AEJQ,CXiCZ,AenDJ,CP4BkB,CCNC,AKlBnB,AD6BQ,CbkBS,AQvBG,CDPR,AFKS,AGEH,CKKI,CLLC,CDPA,ACOL,CGVV,CAAkB,Cb2BC,AWvBnB,AEJA,AEemB,CNZA,CIHE,AHUA,CGVrB,Eb2BwB,Aa3BA,CEeV,AEjCtB,CFiCkC,CC7BlC,ANwBmC,EViBR,Aa3BnB,Cb2B8B,AeZhB,CNZK,AIHY,AEeA,ALLV,CAAW,CO5BxC,EjB6C2C,AgBzC3C,AD6BsB,CAAd,CFfA,CJGe,CTwBe,ASxBE,ACOO,GAAlB,CViBsB,ASxB5B,ACOX,CDPA,GOjBZ,CAAA,ACJA,CDIA,ACJA,CAAA,GjB6C6D,CAAvB,CAAX,CAAnB;AFxCR,AEyCQ,ASxBI,ANkBR,AGLA,ACRQ,ACWR,AGdI,AKnBR,AJiBI,ACFI,ACPJ,ACqBC,AbkBG,AQvBI,AO3BZ,MDGA,EFQgB,AGXhB,IfkDY,CO9BA,ANkBC,AQhBA,AEJA,Cb0BC,CQRF,AIhBA,AKpBZ,CVyBgB,AStBhB,CTsBiB,ALyBA,CIjBC,AINA,AO3BH,CRoBH,AIFO,CFIX,ADKY,CCLC,CFFA,AFKCF,AOdlB,CZuCI,CCZgB,AGLpB,AINc,CGTV,ACPsB,AZuCL,CO9BA,AHaK,ENWF,AWtBP,CRgBQ,AUpBA,AHSA,GMxB7B,ChByCiC,ESxBR,AEEJ,ADKT,CHFA,AIHc,CRgBtB,AUpBI,CNO8B,CPmBV,AGNS,AUpBE,CGfvC,EhByC0C,ASxBrB,CAAe,IAAf,CAAT,COjBZ,CAAA,CAAA,ChByCQ,GWtBA,EAAuC,CAAvC;AbnBR,AE0CQ,ASxBI,ANkBJ,AGLA,ACRQ,ACWR,AGdA,AKnBR,AJiBQ,ACFI,ACPJ,ACPJ,Ab8CQ,AQvBA,AQ9BZ,ADII,MDEJ,AENA,EpBKA,AiBEQ,CEHC,EAAL,ERmBQ,AEEC,AIlBT,AEHe,CjB2CL,AGNA,ASlBA,CdlBd,AQ+Be,AEGA,AMzBA,CFSC,AGhBH,AGPb,CFMA,ClBDA,AWkBY,ACOM,CFSV,AKlBW,AXgCA,CIjBC,AKXZ,ACFM,AV8BF,CO9BQ,AEEC,CGXN,ERsBA,CNWU,ASxBD,ANkBC,AGLA,AMbA,ACFb,ACPG,CDOW,ACPP,CdiCX,CWtBa,ADKO,CJMb,AMbP,AETc,ChBTtB,AKoC8B,EGLE,AINA,AQ9BhC,CTuBwB,AOjBxB,AHeY,CVoBa,AW3BE,CX2BQ,AQhBd,CAAK,ADKE,GJMW,CGbnB,ACOoB,AQ9BxC,CTuBkC,AOjBlC,AFQsB,CX2BG,AW3BU,CX2BQ,AGLnC,CKXA,ADKoC,CDPxB,CAAR,AEEwB,AGXd,EAAP,AJgBH,CCLJ,AGXA,CX2BmC,CanC3C,CAAA,CAAA,IbmC2C,CAAK,CezChD,CAAA,CAAA,KfyCyB,CAAjB;AHQA,ASzBI,ANkBJ,AGLH,ACRQ,ACWR,AGdG,AKjBR,AJeQ,ACFC,ACPJ,ACPG,Ab8CC,AQtBG,AQ/BZ,ADIQ,MDIR,AERA,IFQA,CAAA,EhBwCa,ASzBD,AEEC,CRgBC,ASlBA,AKnBA,CFGC,CHgBC,AFQA,CViBC,ASzBL,ASvBZ,GTuBmB,AEEX,AIlBY,CfyCC,AWvBA,ACFP,AKnBO,CjB4Cb,EAAgB,ASzBD,ANkBC,ESlBE,AGhBlB,CLwBmB,CViBC,AWvBP,CRgBQ,CSlBrB,CHAe,ENkBC,AezCxB,CfyCkC,AOVA,AO3BA,CNqBb,CAAK,CDMC,CViBnB,ASzBW,ACQmB,CDRN,CTyBQ,CGPhB,AezCxB,ADIqB,CdqCqB,AcrCA,CjB4ClC,ASzBW,CQnBE,CjB4CwB,ASzBP,AQnB9B,CP2BmB,CAAoB,EPUL,CMlBC,ECQhB,CCNnB,EFFW,AEE0B,CFFjC,ANkB8B,AQhBlC,AOzBR,CfyC+C,AOVU,AQ/BzD,CAAA,GR+BY,EAAmD,IPUvC,CAAhB;AHQI,ASzBA,ANkBJ,AGvCR,AEsCI,AGfI,AKLJ,AJII,ACHH,ACCD,ACfC,Ab+CG,AQvBQ,AQ/BhB,ADKQ,MCLR,GJsBS,GFEG,AV8BA,CO/BA,ADiBC,AGfA,ACDA,AV8BA,CCbC,CWnBV,AItBJ,ADKe,CdoCC,AapBA,CFCO,Cd0BL,AYxBA,AV8BA,CO/BN,CNkBE,AQhBN,CHeJ,AGfiB,CFFA,AOHjB,ACfkB,CTmCiB,AIhB/B,AFOe,AQ/BvB,CVwC2C,AQlBnC,CbmBiB,ASjBA,CZwBC,ASzBD,CCQT,AO1BW,CNoBN,AT6Bb,AQvBoB,EViBE,AGPA,ADaA,CclC1B,CCfkB,CDkBd,AClByB,CdoCzB,AOVQ,CDRS,AEEJ,AKDT,CLCc,AOzB1B,CAAA,ADKsB,CjB2CQ,CiB3CS,GRkBlB,CAAe,ETyBV,CiB3CJ,CjB2CV,ASzBS,AQlBN,CDmBU,CPDiB,AEElC,CMpB0C,CNoBT,AKFjC,ELEA,AKAI,CPFmC,AQlBvC,KRkBa,AOAb,CPAI,IOGa,EANrB,EAMuB;AhBuBf,ASzBA,ANkBJ,AGxCR,AC2BY,ACaR,AGhBI,AKLQ,AJIJ,ACFR,ACAI,ACfJ,Ab+CQ,AQvBC,AQ/Bb,ADKK,KANU,CCCf,EZCA,ASMQ,IDeI,CLCA,AEEC,AKLG,ADbZ,CZkCU,AYlCA,CTNd,AYDA,EX4BiBA,ACaH,AMnBG,AZgCA,CFNC,AM/ClB,AEwCmB,CQrBH,ADbZ,CNgBQ,AEEJ,CAAa,AIlBF,CCaH,AHEM,CJCA,CTyBV,Ac1BA,CAAa,CDArB,Cb0BuB,ASzBD,AP+Bd,CIrDZ,AKwBqB,AKLL,AHEgB,EXgCF,CCbC,AIbnB,AONA,AItBZ,CJsBQ,EPM0B,AONA,CXmBC,AQhBd,AT6Bc,CS7BT,CFFA,CTyBd,COpBA,AW5BZ,ChBsD8B,CAAW,ECbjC,CMlBc,EAAV,AEEJ,AT6BsC,CAAhB,CS7BQ,CT6BW,ES7BzC,COzBR,CAAA,ChBsDsD,AgBtDtD,ChBsD8B,CAAlB;AFLA,AStBJ,ANeA,AKvCR,AGuBQ,AKCA,AJFC,ACFD,ACAI,ACfJ,Ab+CC,AQvBA,AQ/BT,ADMI,CTJJ,KUFA,GDMS,GFCG,CNmBC,AEDA,AKCA,AHJA,CVmBC,AcnCV,CRoBI,CQpBW,CjB0CF,Ac1BA,CLIC,COAV,CLDA,CAAa,CFCb,AOAc,ADnBA,CAAV,CfyCA,CAAa,Ac1Bb,CAAc,AItB1B,CfyC2B,AYlCA,CJkBN,AKCb,CHJA,Cb0BI,Aa1BkB,CCAC,GXmBG,AUnB1B,CFGa,CAAK,CIlBW,CDeX,ACfY,CDeC,ACf/B,EZkCA,AYlCiC,CDef,AItB1B,CJsB2C,KHGnC,CGHkB,CHGc,AGH5B,AItBZ,EPyBQ,iBOzBR,CAAA,CAAA;AlBiDY,ASrBJ,ANcA,AIbI,ACtBR,AGmBI,AKCA,AJDA,ACHA,ACAI,ACfA,AbgDJ,AQvBA,AQ/BR,ADKQ,WTAJ,CADC,CGoBQ,AKCA,AHJA,CJKC,ANcA,AShBA,AKnBA,CfiDC,AQvBA,EHJE,CQrBC,CNoBC,AQrBA,CNmBX,AT8BY,CFPC,ASrBb,AEFa,AKCb,ANMA,CEPc,AGlBA,CZkCC,AIbA,CSFC,ChBsBZ,ASrBa,AFCAH,CPoBC,CezCR,CJkBG,AKCO,AJDA,AGlBA,CNoBpB,CFCe,AL2Bf,CFPI,AQ3CP,AKiBG,CNMwBI,AMNA,GFGX,CJGE,AIHG,AEHlB,AIhB4B,EVsBxB,CSFgB,CbeY,AcnCA,CTApC,AImBkB,CLGoBb,ACtBtC,AImBsC,CTgBnB,CcnCa,CFCS,CZkCC,AaftB,ACpBL,CDoBsB,AJDM,AKnBvC,GFC0C,CCmB1B,CJDF,AGlBJ,CRqBN,ASFmC,AJDvC,AGlBI,CJkBJ,CJG+C,CIHT,EAAtC,CRgBmD,CafnC,CAAhB,CbeA,CKnCJ,WAAA,QAAA;AR2CK,ASrBD,ANeA,AIdQ,ACpBZ,AGiBI,AKCA,AJDA,ACHH,ACAI,ACfA,AbgDJ,AQvBA,AQ9BL,ADIQ,WTEJ,CADC,CCoBQ,ANeA,AQjBA,AKCA,CJDC,AKnBA,CCJT,IAAL,CPuBQ,CRiBA,AIdaS,AIHA,AKCb,ACpBa,CCJhB,CTyBG,CNegB,AahBA,AJDA,ELGR,AUtBU,ENmBL,AKCO,AJDA,ELGE,CCrBzB,AIkBmB,CAAQ,CTiBC,ASjBC,ELGCI,AIHd,AMnBA,CNmBK,ACAW,AKnBD,GVsBN,ASFF,CTEZ,CJcQ,AKlCpB,AIiBsC,AKnBrB,CdoCqB,AKlCtC,ASFI,EdoCoC,EahBpB,CbgBuB,AahBN,CLDjC,EAAgC,ACAR,CICR,CJD6B,CTiBX,AQjBlC,AKCuC,EbgBQ,ASjBC,GTiBE,CahBlC,CAAhB,AJDwB,CAAR,CAAhB,CJjBJ,CLkCsC,EAAlB,CAAhB,IKlCJ,QAAA;AR0CI,AStBH,ANeA,AIdQ,AClBT,AGgBI,AKAA,AJAA,ACHI,ACAJ,ACfA,AbgDJ,AQvBA,AQ/BA,ADKI,QfiDA,EgBtDE,CVQN,CADC,AMcO,Cd0BC,AWvBA,AKAA,AJAA,AGlBA,EbgDT,EFPI,CAAU,AgBvBV,Ad8BO,AQvBG,CEPC,AGlBX,ECkBa,AHHQ,ACAR,AIrBjB,ADKiB,CjB0Cb,AezCc,CfyCC,AWvBf,ACAA,AFOJ,EMPqB,AHHb,AHUqB,CIVP,CFGC,ACHY,AEf/B,CEDA,CAAqB,CjB0CrB,CQxCH,AEwBD,AO1BI,CjB0CwB,CgBvBP,ANOsB,AO1Bd,CLmBzB,EAA4B,CKnB5B,GjB0CA,AgBvBa,AFHb,CNbJ,AQgB+B,CRhB/B,AMasC,GEGrB,EAAoB,EAAE,UAAF,EAApB,CAAb,CRhBJ,OAAA,QAAA;ARwCI,ASrBJ,ANeA,AIfK,AChBL,AGeI,AKDA,AJAI,ACHJ,ACAI,ACfP,AbgDG,AQvBA,AQ9BJ,ADKI,UCLE,CfwCF,AK/BJ,CADC,AN6CO,CFPC,AWtBA,AKDA,AHHA,AIfA,CPyBC,CDLF,CTqBJ,Ac1BQ,CFGC,AV8BA,AgBrDA,ADKT,CNmBA,CAAW,AKDX,AHHW,GFIX,AKDc,CLCC,AT6Bf,EAAiB,AQvBA,CMPC,AHHlB,AKpBkB,CPwBlB,AGJmB,CAAf,EDAkB,ACAA,CNZzB,AEsB0B,GEPnB,AFOa,CMPC,AJAS,ACHA,AHUA,EAAE,EEPzB,AMvBK,CR8BuB,AQ9BA,CVSpC,CAAA,AQckB,CAAe,GNOF,AQ9BlB,CAAb,CFuBsC,ANOM,GAAG,CMPd,CAAU,AHHjB,CAAwB,GGGjB,ANOF,CMPiB,CHHO,AHUlC,CAAjB,EMP6B,CRdjC,AQckB,AHHgC,CGG9C,AHHwD,KAAlC,CAAtB,EAAgE,GLXpE,QAAA;ARuCI,AStBA,ANeA,AK9Ca,AG+Bb,AKFA,AJAC,ACHG,ACAI,ACdZ,Ab+CQ,AQvBJ,AQ9BJ,ADKC,KAfU,GFgBP,EGNE,EVNoB,CQ6BjB,CbiBC,AOVA,CViBC,AStBA,AEAA,EELE,AEdb,EJmBI,AT4BW,Ca/CF,Ab+CL,EgBrDU,ClB+Cd,AQrDsB,AEoCP,CDLC,ADhCvB,AQ8BO,AFHgB,CDAZ,CAAc,CGGC,CbiBC,AWpBZ,CLKa,AKLA,AJUA,EDLE,AOFA,AHHA,AKpBA,CR8BR,CPUU,AOVA,CDLzB,AILI,CHUuB,CGVC,CVoBR,CAAU,AOVA,KFrCrC,CK2B2C,AHUX,AQ9BX,CfwCM,AajBG,AEvBc,CfwCC,AOVA,CGVlC,EL1BkB,AK0BmB,AHUA,CFpCnB,AM0Bd,EN1BK,AQ6BM,CbiBmB,AajBC,ENOd,CQ9BX,CFuBK,ANOJ,AQ9BnB,CR8BI,CMP6C,CbiBP,CAAK,AK9CrB,CAAT,WL8CO,CAApB;AHQH,AStBA,ANeG,AIhD2B,AIiC9B,AKFO,AJAP,ACHW,ACAH,ACdL,Ab+CC,AQvBD,AQ9BJ,ADMA,KVdA,KWQM,CDMC,CdkCC,CclCR,CPwBU,CKxBC,AEAQ,GTbF,AUOH,EHME,EEAhB,CdkCmB,AUpBA,AHUgB,COxBD,CFAvB,ALwBP,CGXyC,CKnBtB,CfwCC,EajBE,ADjBA,CAAtB,KZkCA,EajB8B,EEvBpB,CAAuB,OFuBX,AEvBZ,CAAd;AlBiDA,AStBA,ANeI,AIhBP,AICG,AKLiD,AJGjD,ACJY,ACCJ,ACfP,AbgDG,AQvBA,AQ9BJ,ADKI,CVpBR,QSmC2B,ChB2BpB,AgB3BC,AEpBE,GTyBA,ANeG,AOVA,CRuBC,EAAE,CU9BC,AEHA,AZiCH,CgBrDI,CfwCC,ADaA,AQvBA,CRuBL,CehDO,CHeT,CHKQ,ACFhB,ACJmB,CVqBf,CSjBkC,AV8BjB,AQvBjB,AQ9BiB,GfwCG,AcnCpB,CfgDA,AQvBqB,AOzBA,IdmCI,COVC,CQ9B9B,CDKI,EAA8B,CdmC9B,EAAiC,COVjC,EAAoC,OOzBO,OAAb,CAAqB,EAArB,CAA9B;AjB2CA,AStBA,ANeI,AQfJ,AKHH,AJCG,ACPyC,ACIxC,ACdL,Ab+CI,AQvBI,AQ9BR,ADKC,KAnBU,GFoBP,EGNE,ENuBE,AV8BA,CFNC,Aa/BD,EJSJ,AEAO,ECFE,CZwBT,AUjBU,CViBC,AezCf,AGNe,CPyBC,ADKA,CRuBC,CO5Bb,AMnBW,CZkCI,COVL,CCLH,CXsBP,AWtBkB,AT4BA,AgBrDA,ETyBlB,AGFA,CZwBqB,AStBrB,ACKqB,CEPC,AV8BT,CO3BT,AP2BmB,CCbC,EHOxB,CGPe,ADaY,AQvBvB,CPUwB,ADaf,CAAb,AgBrDW,CT0BA,ES1BqB,CfwCjB,AexCnB,CfwCQ,AQfG,EFAP,AEAA,EFAA,EAEO,KAAK,QAAL,EAFP,CAAA;ATuBA,ASnBH,ANYI,AIhBThB,AICK,AKxBD,AJsBQ,ACJH,ACED,ACfA,AbgDA,AQxBI,AQ7BR,ADKA,QVkBIkB,ASvBA,ECKD,EfgDK,AgBrDA,ClB8CC,AgB9CT,EFoBW,ACfA,AGLX,CFAS,AFoBG,AIpBA,ClB8CR,CAAU,AOvBlB,AGMkB,AQ7BA,CNsBC,CGjBC,CRkBC,AOHA,AZiCA,CFPb,AEOA,CFPe,AkB9CP,CNsBJ,AV+BY,CahDT,AGLU,CR6BC,EViBlB,Ac1BQ,CAAa,Cd0BC,AOvBAA,AQlBA,CAAC,AGLf,CHKR,CGLJ,ElB8C+B,Ac1BnB,AJSmB,CIT3B,EAA8B,AJSZ,CViBlB,AUjB+B,CHNlB,CAAoBV,AGMA,GAAG,IAAL,EHNlB,AGM6B,EHNEW,CGMC,EHNhC,EAAoC,AGMlB,EAAb,CAAd;AVkBP,ASlBD,ANYI,AIjBJ,AIEA,AKzBI,AJsBC,ACHD,ACCI,ACfP,AbgDO,AQxBA,AQ5BR,ADII,QCJA,EXsBEjB,EJiBE,EUrBE,AIdA,CDLC,AECA,EJmBE,CPGCM,AGMA,CCJF,CKzBI,AECA,CfuCC,AcnCA,CfgDC,CgBpDP,CR4BS,CQ5BpB,EhBoDuB,CK9BCY,ASvBb,AHmBa,ACChB,AGfgB,CDLC,AdqDjB,CCbA,COXmB,COxBV,CdmCY,AUrBA,AIdA,CDLzB,AN6BgB,CAAW,EAAE,EHNjC,CGMoC,IPWhC,AOX2B,COxBd,CdmCyB,AOXA,AOxBtC,CJcoB,EAApB,AHUyC,IAAd,EAAX,CAAZ;AVmBA,ASnBR,ANYQ,AIjBR,AIEI,AKzBH,AJuBG,ACHA,ACAC,ACdL,Ab+CK,AQxBG,AQ5BR,ADKI,QFAA,ERiBEjB,AWtBA,ElB8CU,AiBzCR,CJcC,AIdA,CNmBC,EAAE,CXsBJ,AYxBK,CFMC,AQ5BA,ADKA,CjByCa,CezC3B,ALuBgB,CCJN,ADII,EPWK,AUpBf,AEdY,ALuBG,CHNCD,AMHA,AHSN,AOvBV,ENmBkB,AMnBA,GJcG,AHSA,CHNCE,AIEtB,AOxBJ,EfuC4B,AUpBxB,CDGA,CAA0B,ACHA,EHSE,GAAxB,GHNY,EJiBD,ASjBf,CTiBqC,AIjBAF,AMHrC,CDGsC,CCHC,INGIE,AKAA,KTiB5B,CAAX,ISjBJ,ELAqC,IAAsB,EAA/D;APyBI,ASnBJ,ANYK,AIjBL,AIEI,AKNJ,AJII,ACHI,ACAP,ACdG,AbgDA,AQzBI,AQ5BR,ADKQ,UViBFQ,AWtBA,CFkBF,CdmCI,EFPE,AWtBA,CCFC,AGjBA,CbgDC,CAAJ,CK/BO,AGMD,CGTC,CEdC,CbgDE,AgBrDD,CXsBCO,CPwBd,CAAgB,COxBE,AIED,CInBV,ALuBW,CHNtB,AL+BwB,AgBrDD,ChBqDL,CFPO,CWtBC,AInBA,AGLT,CNsBb,AGjBA,AGLuB,CNsBC,AV+BC,CFPzB,EUlB2B,CRyBE,CAA7B,CgBrDa,ChBqDoB,GQzBC,CENlC,AMtBmC,ENsBE,AMtBzC,CPwBqB,ADIb,ECJJ,ECF0C,WAA1C;AZyBH,ASlBD,ANYI,AIlBJ,AIGI,AKPA,AJIA,ACLuC,ACG3C,ACfC,AbgDO,AQzBA,AQ5BR,ADKK,SJYD,CNKEH,AWtBA,ET4BE,CNYC,AQfA,AKPA,EPUT,AGNW,EHMM,AFNH,CGMA,CPYV,AQfW,AOzBA,CfwCC,CIlBCG,AOFA,CZiCC,EK/BG,CIGjB,AKPA,CbsBA,AWpBJ,CZiCuB,CYjCc,AJQb,AQ5BA,CfwCC,AQfA,AT4BjB,CCbJ,CIlBJ,AKAI,CAAwB,CFMC,ICHzB,EAA+B,ACH/B,AFM+B,CAAX,CENa,AMtBtB,CAAuB,ER4BE,EENE,GFMG,IENzC,AFM6C,CAAzB,EQ5BT,CAAf,CR4BsD,KAAK,MAAM,CAAzC,IAA8C,KAAK,IAAI,CAAvE;AV9CZ,AS+CQ,ANYA,AQfI,AKPJ,AJIH,ACFA,ACAG,ACRJ,AbyCK,AQxBG,AQ7BR,ADMI,UCNE,GfwCG,AatBA,AFEA,ELQE,CNYP,AQfQ,ADIA,AOvBA,CCNC,CFkBT,CbsBW,AatBA,ACZX,CRsBY,AQtBA,CCNC,GfwCG,AWpBhB,CLQO,CAAW,CNYP,AWpBQ,AJSA,CPWC,CexCP,EfwCF,CAAa,AWpBxB,CLQO,CAAmB,AEHA,AKP1B,ANW0B,EQ7BjB,CT4BF,ACCY,AQ7BD,CT4BlB,ACC8B,EPWnB,CAAX,AQf0B,CMnB1B,CCNS,EAAiB,CR6BP,CAAoB,CCJ/B,IAA0B,ADIf,CCJgB,COzBT,GR6BuB,GCJP,COzBhB,CR6BtB,AQ7B6B,ER6BuB,AQ7B9B,CAAU,EPyBhC,EAA+C,COzBzB,EAAiB,MAAjB,CAAjB,EAA2C;AlBnB5D,ASgDK,ANaG,AInBJhB,AIGY,AKPR,AJKI,ACFA,ACDJ,ACRJ,Ab0CI,AQzBQ,AQ7BR,ADOA,QjB3BR,IY2CoB,CTkBP,AavBA,AFEA,AGbA,EjB3Bb,AE0Ee,CKhCCkB,CKCJ,CZ3CZ,AgBsCQ,AFEA,CFG6B,AKhBlB,CVef,AWtBgB,CfyCZ,AInBa,ALgCb,CCbc,AQhBA,AMlBd,CJcuB,AHQR,GVjDvB,AkBoB0B,ADOA,CJcd,AHQI,CCJA,ADIY,CCJC,AEJY,AKrBrB,CfyCZ,AezCsB,ADOtB,EAAwB,EPsBhB,CCJA,IOzBI,CADwC;AT+BxD,ANYC,AInBGV,AIGQ,AKPR,AJKA,ACFA,ACDH,ACRD,Ab0CC,AQzBQ,AQ7BL,ADOI,YRsBA,COXC,AJKA,CLDCQ,AMDA,CJQV,EAAmB,AFRF,CSHb,AJKA,EKhBY,CLgBC,CHMjB,CQtBQ,CRsBwB,AQtBZ,MLgBH,KCFc,AIdA,ELgBd,CAAO,ACFpB,AId8B,ILgBjB,AKhBT,CLgBqB,KAAZ,CAAb;AHOA,ANnDR,AI4CQP,AIGK,AKPL,AJMA,ACHA,ACAJ,ACRA,Ab0CA,AQ1BK,AQhCmD,ADUnD,KCVQ,CAAb,MHgBK,CNgBI,AFTQ,ASFR,CJMC,ACHA,CCAF,CFGI,CV+BC,CO1BT,CAAW,AOXX,CJMM,EAAQ,AV+BlB,EAA0B,EO1BtB,CAAmB,EIRE,CJQrB,CGLM,CHKkB,EIRE,EDGE,CHK5B,GGLA,ECHqB,CAAc,QAAd,CAAuB;AJS/C,ANpDL,AI6CQI,AIII,AKRP,AJMG,ACHI,ACAJ,ACRA,Ab0CA,AQzBA,AQ7BJ,ADMC,KAjCU,GdGf,GewBW,CHYC,Ab0CA,EU/BE,CT/Cd,AU4Ce,ACAA,AJSA,CENC,AMvBZ,CHYa,Ab0CA,CC9EjB,CQiDmB,AOzBA,CJoBC,CFGN,AFMN,ECJI,CAAY,AOzBpB,ENuBsB,AGXlB,Ab0CI,CYlCG,CX5Cf,AW4C4B,ACRA,CJahB,CCFJ,CEHO,AZkCgB,CYlCC,AZkCxB,CWnC4C,CXmClB,GYlCG,cAAtB,CAAP;ALUJ,AFZiB,AIQZ,AKPL,AJKI,ACHI,ACAP,ACRO,Ab0CA,AQzBP,AQ7BD,ADOA,KVUA,ISCK,EAAE,AElBA,ADOH,GLgBM,CHMF,AITG,EGFE,AElBb,EhBsDe,CgBtDC,CFkBX,CJKa,CILlB,EAAqC,CdoCf,AgBtDtB,ENuBwB,AV+BT,CAAU,KAAV,EAAiB,CAAjB,CAAP,GU/BU,CAAoB,KAAK,KAAzB,CAAd;AHOA,AEHA,AKRA,AJMA,ACP4C,ACIhD,ACTK,Ab0CA,AQjFT,AQ4BI,ADMI,SJUqB,AKhBpB,CLgBD,ECIC,CFGI,AMvBA,CFiBC,ACXA,CRsBC,AEHA,EOzBE,CAAb,CNuBe,CHKC,AS5BA,CDMC,ENmBb,ACFA,CMvBgB,CT4BT,AOXU,CPWC,CGLC,CKjBC,EDWE,EJMtB,AMvBJ,ADMiB,CAAY,CRsBlB,AGL6B,AMvBV,ET4B1B,CS5BJ,EAAmC,MDMlB,CDWI,ACXjB,EDWA;APYH,AFRDV,AIKC,AKPG,AJKI,ACHJ,ACAA,ACRA,Ab0CA,AQnFR,AQ6BQ,ADOA,QPpCR,GHiDWgB,ESFE,AHEA,ACAA,ACRA,Cb0CC,AgBtDA,CR7Bd,AOoCe,CLgBC,EILR,AN/CR,AQ6BkB,CFkBC,CCXC,CJaZ,ACAA,CDAc,ACAA,ACRd,Ab0Cc,CcpCd,AN/CR,CM+CwB,CTEpB,AQRqB,AGZP,CXoBQd,AKGA,AKhBX,CJaY,ACAA,AZkCA,CcpCnB,CJKQ,AGXR,AELqB,CLgBC,ACHtB,CKpBU,ADOV,CJawB,AKpBP,CAAP,ADOe,CLgBjB,CLHZ,AKGQ,AMvBgB,ChBsDN,CKlCeW,AKGA,CEH7B,CZkC+B,CKlCnC,AWpBc,CAAV,CXoBkC,ELkClC,CWlCqC,GAAb,CAAiB,KAAK,GAAtB,CAAxB,EAAoD;AJUxD,AExDJ,AK6CQ,AJKQ,ACHJ,ACAJ,ACRA,Ab0CA,AgBtDA,ADOI,aRsBC,AOXA,AFEA,CIpBC,ChBsDC,Ce/CC,ERsBZ,AS7Bc,CLoBC,CJSiB,AKT5B,CAAa,CZkCC,CcpCd,ACXe,Cf+CR,CWnC6C,AXmCnC,AgBtDP,CNuBQ,AEHlB,EGboB,CAAL,CFKO,Ab0CA,Ae/Cd,Cf+CS,AgBtDP,ADON,CLgBI,AMvBS,CNuBQ,AMvBf,ADOe,Cf+CC,Ca1CC,AGZP,ENuBZ,EV+BD,Ea1CP,Ab0CiC,AgBtDvB,CAAV,IhBsDsC,CAAL,GAAS,KAAnC,CAAP;AOxBA,AFTAI,AIhDR,AK+CQ,AJIK,ACHD,ACAJ,ACRH,Ab0CA,AgBtDG,ADOQ,QNnChB,KK+Ca,AJED,AEDC,CPAC,AWpBA,CT6BC,AEzDf,GAAA,CK+CQ,AJIW,ACHA,CJSC,AOVA,AFCZ,CAAa,AIpBA,CFmBC,EFCd,CLSO,AKTU,CLSC,AOVN,AFCZ,AIpBkB,EFmBE,AFCA,CGbC,CNnC7B,GGgDiC,AIpBZ,CT6BN,AS7BmB,CT6BC,COVf,EAAZ,CCZQ,CRsBD,AQtByB,CRsBhC,ES7B0B,CJoB1B,CGbqC,CAAL,CAAxB,GCPkB,CAAO,EAAP,CAAU,CAAV,EAAa,CAAb,CAAb,CAAb;AT8BH,AFTO,ASDP,AJIW,ACN4C,ACGvD,ACPD,Ab0CA,AgBtDI,ADMK,SJUL,EEJA,Eb0CK,AgBtDA,MXmBM,ALmCf,EAAuB,GKnCHX,AWnBhB,CAAiB,CNsBC,GLHP,AKGH,CLHJ,AKGkB,EMtBL,ENsBT,KMtBR;AT8BJ,AFVK,ASAL,AJGS,ACHR,ACCD,ACRI,Ab0CA,AgBtDH,ADOO,SVQ8B,GOK9B,CCRC,Eb0CE,EOzBD,AOVA,ACZG,CHab,EAAsB,AZkCN,Ea1CZ,AELI,Cf+CG,CAAS,Ca1CC,KAAjB,Ab0CO,EAAiB,SAAxB;AOxBA,AOVA,AJGC,ACFL,ACAI,ACRH,Ab0CA,AgBrDD,ADMK,SCNA,IFkBI,AHCA,AKnBT,ET4BW,AKTA,EDAX,EGDI,AHCmB,CJSP,AKTA,CDAhB,EAAmC,EJSxB,AIRP,CJQkB,CKTX,CAAa,GAAb,CAAiB,CDChB,GJQD,EAAP,AKTO,CAAP,CDA+B,EAE/B,QAAQ,CAFuB,KAG/B,EAHJ,EAGM;AJOL,AFVGY,ASAA,AJIA,ACAA,ACHH,ACPD,Ab0CA,AgBtDA,ADMC,OfgDE,EAAE,GKpCGC,CSAC,AJIA,AVgCA,CWhCC,GNJN,AKIA,CAAU,AVgCA,CKpCC,ALoCZ,EAAc,CgBtDjB,EFkBI,AHIgB,CGJC,AdoCA,GUhCjB,CCAqB,AKtBzB,ChBsD0B,AgBtDpB,ChBsDH,EcpCC,AdoCJ,CgBtDA,CLsBoB,AXgCwB,AgBtDjC,CLsBqB,IKtBhB,MLsBI,CAAuB,CKtBhC,EAAX,CLsBoB,CAAhB;AJQJ,AFXQ,ASAP,AJIA,ACCG,ACHJ,ACRA,Ab0CI,AgBtDJ,ADxCW,CAAf,cf8Fe,CW/BC,CNLCT,GLoCG,CKpCR,ALoCG,CYlCI,AIpBf,GXkBqBS,AMKjB,CX+BkB,CAAX,CW/Ba,CKvBxB,CXkBQ,AWlBF,ChBsDqB,EW/BvB,AKvBJ,GhBsDgC,CAAL,KAAW,CAAlC;AOxBJ,AFXQ,ASCR,AJIQ,ACAJ,ACHA,ACRJ,Ab0CC,AgBrDD,ADOJ,QCPQ,CAAC,ADOT,KHYc,CFGS,AMtBR,CLsBC,AIfhB,CVUiBV,AUVA,CCPR,CAAU,CNsBP,AKfZ,ELe2C,AKfrB,GHYG,CInBhB,CLsBD,AKtBJ,ADOJ,ECP6B,ADOF,CJeG,ACHA,CPFlB,GAAsB,AOET,CDGjB,ACH2B,GPFvB,SOEa,EAAjB;ALUJ,AFXK,ASCL,AJII,ACAA,ACHA,ACPJ,Ab0CA,AgBtDI,ADOJ,Qf+CI,Ae/CA,Ef+CE,Ca1CF,EGZK,CJmBC,AZmCA,CAAN,Ae/CO,CLeC,ACAA,CXgCC,AgBtDT,GDOA,Cf+Ca,CUhCC,AEHe,AZmC7B,EYnCA,AZmCJ,CWhCI,AIfiB,CLejB,AVgC+B,Oe/C/B,IAA6B,CAAC,MAAM,KAAxC,EAA+C;ARuB/C,AOXA,AJIQ,ACAJ,ACFA,ACRA,Ab0CA,AgBtDH,ADOG,ORsBD,MAAH,AKTS,ACRA,ENiBU,APyBR,Ae/CA,CJeC,CDAC,CGVT,CDQW,CGbX,CFKa,CFUb,AEVA,Ab0Cc,COzBlB,AIPmB,CDAX,AVgCG,COzB0B,AKTjC,AZkCiB,GWhCG,CAApB,ACFqB,CZkCC,CWhCC,AXgCN,GAAS,CAAnB,CWhCqB,CAA5B,ACFA,AZkC6B,EYlCE,GZkCG,CAAL,GAAS,CAA/B,CAAP;AOxBA,AFvBkC,ASatC,AJGY,ACAR,ACFI,ACRJ,Ab0CH,AgBrDD,ADMC,KVDD,GSaI,GElBG,ET4BE,AMjBA,GCOT,AHGY,CKrBZ,CJmBc,AInBA,CFkBF,CPUR,CAAa,AGPA,AGVb,CFUA,CJOA,AIPe,CJOC,AMjBA,AGXpB,CNqBY,AEFS,CFEC,ACAA,AKrBA,CLqBlB,ACFI,EDEiB,AEVrB,CNiBA,CKTuB,CLSC,AIPA,CAAxB,CDAQ,GAAqB,CAAC,AEFA,ELS9B,GGPmC,GEFZ,CFEO,CAAU,AEFpC,QFEI;AHQX,AFZJ,ASEO,AJAA,ACGA,ACFC,ACRD,Ab2CJ,AgBtDI,ADOJ,CVfJ,OL8DQ,Ae/CA,Ef+CE,EgBvDgB,CHYb,Cb2CC,Ae/CA,CDWC,AdoCP,CWjCQ,CXiCC,Ca3CT,CEJA,CDWY,CdoCC,CAAb,EAAJ,Ae/CoB,CJchB,CGHO,AdoCwB,CcpCZ,KCXvB,EAA8B,CDW1B;APYJ,AOXC,AJGA,ACAG,ACDA,ACTH,Ab2CG,AgBtDA,ADOA,SRsBC,IKTI,ELST,APyBW,Ae/CA,CJcC,AKrBA,CT6BS,KIRjB,AXiCc,EYlCd,AZkCO,Ae/CA,CRsBX,APyBqB,EOzBa,AKTX,GZkCG,CAAL,Ae/CV,CHaP,AGbc,Ef+CY,AgBtDlB,ChBsDD,Ce/CA,Cf+CsB,Ae/CV,ICPX,ChBsD0B,AgBtDpB,ADOP,Cf+CsB,Ae/C7B,Gf+CsC,CAA/B,CAAP,AgBxDkB;ATgClB,AOXJ,AJIQ,ACDP,ACDG,ACRJ,Ab0CC,AgBtDG,ADOH,QDWG,KPWK,AKTA,AIpBA,EHYD,AGZJ,CFkBJ,CAAa,AElBM,CJoBf,ELSA,CAAa,COXjB,AJI0B,EIJC,CPWvB,CAAkB,CGPd,EAAsC,GHO1C,EAA0B,QAA1B;AACH,AOXG,AJIA,ACAJ,ACFC,ACRG,Ab2CJ,AgBvDQ,ADQR,WAAO,EDUE,ADNA,Ab2CA,EWjCE,AXiCA,CUjCC,AKdZ,CJcA,AKtBa,CHYT,CCMA,AHImB,AXiCR,CcrCC,AdqCP,Ca3CQ,CHUC,AGVA,Ab2CA,Ca3Cd,EFUJ,AKtBQ,CNsBJ,AViCkB,AgBvDA,CLsBiB,AXiC9B,CcrCL,CHKA,AXgCJ,EcrC2B,AdqCa,KcrCpC,CHKQ,OAD2B,AKtBjB,ELwBlB,KKxBkB,CAAM,ELwBhB,CAF2B,CKtBjB,CAAW,EAAX,CLyBlB,AKzBI,ELsBR,EAGM;AJMN,AOZC,AJIO,ACGJ,ACJJ,ACTI,Ab2CA,AgBvDI,ADQX,aHaY,ACTA,CFaC,CX8BC,EUjCE,AMtBA,CJqBb,EAA6B,CCTzB,Cb2Cc,CgBvDV,CNsBA,ACGY,AEbA,Ab2CT,CAAU,IW9BI,AEbrB,Cb2CsB,CAAL,GAAS,CW9BV,AX8BT,CW9BqB,CX8BC,KAAK,CAAL,GW9Bb,AX8BsB,CW9BC,AX8BhC,CAAP,GW9BgB,CAAhB;AJMJ,AOXA,AJGY,ACIR,ACLA,ACTA,Ab2CH,AgBvDI,ADST,QDUQ,CCVR,GAAA,CDUI,ADPS,AEHA,GDUA,AHOG,EEdR,AEHR,EAA4B,CLaP,IAAL,ACIR,CDJkB,AKb1B,EJiB4B,AIjBc,KJiBlC,CDJQ,GAAqB,CAAC,KAAK,IAAL,CAAU,QAAhC;AHSZ,AOXI,AJGQ,ACIR,ACLA,ACTH,Ab4CD,AgB/DsB,ADgBtB,KChBA,IhB+DK,EAAE,Ae/CC,GHYE,CEFC,AdqCA,CW9BC,EIjBG,EDUC,AdqCA,CAAX,EAAc,Ae/CX,EHYa,AGZS,CDUnB,CAAY,AHOnB,AX8BmB,GW9BG,ACLA,EEFtB,AdqCwB,CAAvB,Ae/CG,CHYa,AGZkB,CJiBnC,ACL2B,AZmC/B,EAA8C,Ge/CtC,EAAuC,GAAvC,CAAR,KHYqB,EAAjB;ALWJ,AOZC,AJIO,ACGJ,ACJA,ACTJ,Ab2CI,AgBvDJ,ADQH,QRsBO,GMlBA,EDSK,AIrBT,ET8BA,APyBW,CW9BC,CDHC,CHQF,CKTI,AIrBf,CAAgB,EhBuDE,AgBvDA,CNsBV,CViCG,CW9BP,ACJA,AZkCiB,CgBvDL,EAAQ,CJqBC,GZkCJ,GAAA,CAAI,AgBvDT,CJqBZ,CIrBJ,CJqBmC,CIrBiB,ChBuDtB,CAAL,GAAS,CAAb,CAAV,EAA2B,OAAA,GAAA,CAAI,KAAK,CAAL,GAAS,CAAb,CAA3B,CAAP;AOxBA,AOZJ,AJIQ,ACGJ,ACJI,ACTJ,Ab2CH,AgBvDG,ADSR,QDSQ,CCTR,IDSI,ADNS,CCMC,AElBA,CT8BC,CILC,CDHC,CGVT,CCMJ,AHOI,CJKY,AILA,AKzBA,CFkBO,ADNN,CAAb,CHUI,ACGW,CJKR,AILP,CJKiB,AS9BA,ADSzB,CJgB0B,AIhBA,ECTN,CLyBS,CAArB,AKzBA,CDSR,CRqBQ,AILwB,CIhBK,KJgB7B,EAAgC,CAAhC,EAAmC,OAAA,GAAnC;AJMH,AOZG,AJIQ,ACGR,ACJI,ACTJ,Ab4CJ,AgBxDI,ADSJ,UAAM,GDSG,ADNA,CGZC,ChBwDF,CW/BI,CIhBC,EDST,AFGW,CEHC,CJIC,AGVb,CGZc,CDSC,CFGC,CCMhB,AJIQ,ACGR,CDHkB,CEDd,CEHgB,AFGA,ACTpB,AGZoB,IAApB,CFkBA,CJIQ,AEDkB,AGZjB,EAAb,KHYqC,EAAb,CAAhB;ALWR,AObC,AJIW,ACGR,ACJC,ACTD,Ab4CA,AgBvDA,ADQJ,QRsBI,EQtBE,ERsBN,CMnBS,ENmBD,APyBG,AgBvDA,CLwBC,EKxBR,ADQU,EFGV,EFaA,AIhBc,If+CI,Ee/CE,Gf+CG,CAAC,Ie/CV,Cf+Ce,Ie/CI,Cf+CC,Ae/CxB,Cf+CyB,Ce/CC,CAA1B,CAAd,Cf+CI;AOxBA,AOZJ,AJIQ,ACEP,ACJA,ACTA,Ab4CA,AgBvDG,ADQJ,SDUK,CCVC,GDUN,CElBU,CT8BC,AOZM,EJIJ,AKdA,GRsBG,CQtBC,ELcT,AMtBJ,CT8BO,CAAU,CS9BC,CDQC,ERsBnB,IS9ByB,CDQZ,EAAJ,CCRS,CAAlB,ADQ8B,CAArB,CAAb;ARuBC,AOZG,AJII,AChFZ,AC+EY,ACTR,Ab4CA,AgBxDI,ADQJ,UAAM,GfgDA,EctCK,ADNH,EHUK,AKdA,CHaM,AIrBL,EFkBE,CCVC,ELcT,EIJG,CAAW,CElBlB,ADQmB,GDUZ,AElBe,CFkBC,IAAhB,ACVM,CDUb,CElB6B,ADQpB,EAAsB,CAAtB,CAAb,KCR0C,MAAhB,CAAtB;AT+BJ,AOZC,AJIW,ACjFhB,ACgFQ,ACTA,Ab4CA,AgBxDA,ADQJ,QRsBI,AIzFR,EImEU,ERsBN,CAAS,AMlBA,AGZA,CJqBC,CDhFd,AXmHe,GO1BX,AIzFJ,AEuEQ,ENkBU,AQtBE,CLcC,AGVA,CAAC,AGZd,CHYA,CEJgB,CLcR,AEDS,AIrBA,CNsBC,ICjF1B,ACgF8B,AGbA,ECRE,ENsBhB,AEDS,CAAU,IIrBH,CDQR,EAAJ,ECRY,ADQY,CCRN,ADQlB,CAAhB,CHaqB,EAAjB,GIrBqC,KAAb,EAAoB,CAApB,CAAP,CAAjB;AT+BA,AOXJ,AJGY,AEDR,ACTA,Ab4CI,AgBxDP,ADQD,UAAM,EDWD,CPWI,AMlBA,CDSC,GLSN,CAAU,CP0BC,CehDC,CFIZ,CNkBA,EMlBgB,AEJA,CRsBC,AKTe,EAAhC,AZkCO,Ca3CP,ENkBA,AQtBsB,UAAN,EAAJ,EAAwB,CAAxB,CAAhB;ARuBC,AOXG,AJII,AEDJ,ACVA,Ab4CI,AgBxDX,ADQG,UAAM,GHcG,ACVA,ECOE,AdqCA,EUjCE,EEDE,CEHC,ADPZ,Ab4CY,CAFL,EU/BH,EEDJ,AGdiB,CDWV,CAAY,EFGE,AGdA,GDWd,EAAP,CCX2B,EHc3B,EAA+B,WGdV,EAAJ,EAA6B,CAA7B,CAArB;ARwBA,AOZC,AJIO,AEDA,ACVP,Ab4CO,AgBvDZ,ADQI,QRsBI,CS9BR,EDQW,GRsBP,AQtBU,Cf+CC,EOzBD,AGRG,CMtBjB,ADQkB,CHaC,CZkCC,CgBvDpB,CDQsB,CLcV,IKde,EHaf,EGbmB,IAAI,IAAI,IAAI,IAAI,OAAO,IAAI,OAAO,IAAI,YAAY,EAA7E;ARuBI,AOXJ,AJGY,AEDJ,ACTR,AbuCW,AgBnDX,ADQH,Sf2CO,EchCA,AEnBG,CHYF,GNkBM,AS9BA,KT8BK,CGRC,AEDA,CIrBV,CAAY,CT8BR,CAAU,AGRT,CAAU,EEDE,EFCZ,AEDJ,CLSJ,GKT0B,AIrBA,OJqBO,AIrBA,QJqBP,EAAtB,MIrBsB,CAAwB,kBAAxB,EAA4C,OAA5C,CAAvB,CAAP;AT+BC,AOXG,AJGQ,AEDP,ACTD,Ab2CH,AgBvDJ,ADSD,SAAA,IFGa,ECOE,ACVf,CAAgB,IDUI,CDPZ,AEHR,EAA6B,CFGL,ECOT,CAAY,CDPnB,GCOO,EAAP;APYJ,AOXC,AJIO,AEDJ,ACVH,AbjFL,AgBsEA,ADQI,QRqBI,CS7BR,EDQW,EHaE,CLQT,CAAW,EGPE,EMtBjB,CT6BI,CKRI,CLQY,AKRE,AIrBtB,CNsBY,KKdgB,EHapB,EGbwB,IAAJ,CAAS,KAAT,CAAjB,MAAsC,KAA7C;ARsBI,AOVJ,AJGQ,AEDP,ACTD,AbjFO,AgBqEP,ADQH,Of7EU,GgBqED,CFmBF,AdxFG,EOkGE,CPlGK,GOkGV,AGPS,CHOC,GPlGO,AgBqEJ,EhBrEH,COkGV,APlGoB,CAAV,EOkGS,APlGI,CU2FnB,AV3FM,AgBqEU,ChBrEjB,GOkGH,IS7Ba,CAAgB,MAAhB,CACZ,MADY,CACL,CADK,EAEZ,KAFY,CAEN,GAFM,EAGZ,MAHY,CAGL,OAHK,EAIZ,GAJY,CAIP,KAAD,IAA8B;AT0BtC,AOVG,AJGQ,AEAJ,ACVR,AbpFJ,AgB4EY,QhB5EZ,KY8FqB,CIlBH,CFeH,Ad3Ff,AgB4EoB,GhB5EpB,AgB4EkB,EFeE,AEfK,CNkBJ,AEAT,EAAgC,CZ9F5C,CU8FgB,AMlBE,CFeH,AJGW,CIHC,EEfQ,CNkBnB,CIHD,EAAP,EEfiC,KAAN,CAAY,GAAZ,CAAvB;AT2BR,AOXC,AJGW,AEAR,ACVJ,AGRQ,cJkBE,AIlBI,CT0BN,CKRI,IIlBQ,GJkBV,KAAc,CIlBK,GJkBzB,EIlBgB,CAAZ;AT2BJ,AOVJ,AJGQ,AEAJ,ACVI,AGRA,YAAI,EHQG,CNiBJ,AOVH,CFGI,EIlBM,CJkBd,CLOY,AKPA,CIlBJ,CAAJ,ETyBG,ASzBa,CTyBH,AKPA,QLOV,EAAP,IKPY,GAAsB,CAAlC,EAAqC,QAArC;ALQH,AOVG,AJGI,AECJ,ACXA,AGRQ,YJmBJ,ACXA,GCOG,EDPE,CGRK,EFeF,AFIA,EInBM,EJmBd,EEJG,CAAY,AFIA,AInBL,CHQV,AGRoB,IJmBA,ACXA,GCOjB,EAAP,ADP6B,KDW7B,EAAoC,GInBO,EHQ3C,CGR8C,CHQH,qBGRyB,KAAK,MAAM,GAAG,GAApE,CAAN;AT2BZ,AOXC,AJxBG,AE4BI,ACXA,AGRC,YT0BJ,QKPW,ACXA,IAAR,CAAa,CDWb,CAAe,KAAK,cAApB,SCXA;ANmBJ,AOVJ,AJEC,AECI,ACXG,AGPA,YFeH,GPUM,ASzBI,CAAE,CHOJ,EGPE,CTyBC,CSzBM,GTyBX,ASzBI,CTyBM,AMlBb,AGPA,GHOgB,ENkBb,EAAP,AMlBI;ANmBP,AOVG,AJGI,AEAP,ACXO,AGPH,KAbY,CAAjB,SF4BW,CJGS,IIHJ,CJGR,EAA6B,GIH1B,CAAY,KAAZ,EAAP;APYJ,AOXC,AJGG,AEtGR,AC2FS,AGNL,WAAO,ENiBE,EMjBE,GNiBP,AMjBG,CAAwB,ENiBd,MMjBV,CAAP,ENiBiB,OAAA,CAAO,IAAP,CAAY,KAAZ,CAAb;AHSJ,AOVA,AJEI,AEvGR,AC6FQ,AGPP,QJtFD,GEqGQ,EJEK,AGVA,ED7Fb,EFuGQ,CAAU,AEvGlB,CC6FQ,IAAe,ID7FvB,CFuGQ,AGVoB,KAApB;ANmBJ,AOVI,AJEH,AGVG,aAAK,ECQE,KAAK,CDRZ,CAAc,ICQP,ADRP,CCQmB,ADRA,ICQZ,ADRP,ECQA,ADRyB;ANoB7B,AOXC,AJtGL,AG8FY,gBNmBI,EMnBE,ENmBd,EAA4C,CMnBzB,WNmBqC,CAAxD,EAAyD;AACrD,AOVJ,AJxGJ,AG6FiC,QH7FjC,CG6FQ,INqBK,EOVD,AJxGZ,EHkHQ,CAAU,AGlHlB,OHkHQ,CAAkB,IAAlB,EAAwB,CGlHhC,QHkHQ;AACH,AOVG,ADTH,eCSU,KAAK,MAAL,CAAY,QAAZ,EAAP;APYJ,AOXC,ADRO,QNmBJ,KMnBU,CNmBd,EAAyB;AACrB,AOVJ,ADTI,YAAI,CAAC,ENmBE,GMnBG,ENmBE,IAAL,CAAU,EMnBjB,CNmBO,CAAc,AMnBA,MNmBd,CAAP;AACH,AOVD,ADTQ;ANqBR,AOXA,ADTK,WNoBE,MAAP,EAA4B;AACxB,AOVJ,ADTI,YNmBI,WOVQ,OPUU,AMnBA,INmBlB,CMnBuB,GNmBG,GMnB9B,ENmBmC,QAAL,CAAc,MAAd,CAA9B,EAAqD;AACjD,AOVJ,ADRA,YAAI,CAAC,ECQE,GDRG,CNkBC,COVC,IPUR,EMlBJ,ECQO,ADRa,CCQC,gBAAd,EAAP;APWC,AOVJ,ADRO,iBAAK,OAAL;ANoBJ,AOVJ,ADTK,YCSG,GPUG,KAAK,AOVhB,EAAwB,UPUb,CAAkB,MAAlB,IAA4B,CAAnC;AACH,AOVG,ADTH,eCSU,KAAK,QAAL,CAAc,OAAd,CAAsB,QAAtB,CAAP;APYJ,AOXC,AD1HL,iBNqIiB,MAAb,EAAkC;AAC9B,AOVJ,AD5HJ,QAAA,MNsIc,CMtId,GAAA,CC4HgB,QPUW,CMtI3B,INsIgC,IAAL,CAAU,QAAV,CAAmB,MAAnB,CAAnB;AAEA,AOXA,YPWI,GOXG,KAAK,QAAL,CAAc,CPWC,IAAtB,EAA4B,KOXrB,EAAP;APYI,AOXP,mBPWc,aAAa,KAAK,aAAL,CAAmB,MAAnB,CAApB;AACH,AOVL;APYI,AOXJ,ePWW,UAAP;AACH,AOXD;APaA,AOXA,mBAAY;APYZ,AOXI,aAAK,WAAL,CAAiB,YAAjB,CAA8B,KAAK,MAAnC;APYJ,AOXC;APaD,AOXA,qBPWc;AACV,AOXJ,ePWW,KAAK,MAAL,CAAY,cAAZ,EAAP;AACH,AOXD;APaA,AOXA,eAAQ,QPWW,GAAnB,EAA6B;AACzB,AOXA,ePWO,AOXA,KPWK,AOXA,KAAL,CPWA,AOXW,CPWC,OOXZ,EAAP,SPWO,CAA+B,GAA/B,CAAP;AACH,AOXA;APaD,AOXA,WPWO,EOXE,IPWT,COXA,CPWmB,COXU;APYzB,AOXA,ePWO,AOXA,KPWK,AOXA,KAAL,CPWA,AOXW,CPWC,MAAZ,CAAmB,MAAnB,CAAP,COXO,CAA4B,KAA5B,CAAP;APYH,AOXA;APaD,AOXA,ePWW,MAAX,EAAuB;AACnB,AOXJ,ePWW,KAAK,MAAL,CAAY,UAAZ,CAAuB,MAAvB,CAAP;AACH,AOXD;APaA,AOXA,aAAM,KPWQ,MAAd,EAA0B;AACtB,AOXA,ePWO,AOXA,KPWK,AOXA,MPWL,CAAY,COXZ,CAAc,WPWd,CAA0B,EOX1B,EAAP,EPWO,CAAP;AACH,AOXA;APaD,AOXA,sBAAkB,IAAlB,EAA4B;APY5B,AOXI,eAAO,KAAK,QAAL,CAAc,iBAAd,CAAgC,IAAhC,CAAP;APYJ,AOXC;APaD,AOlKJ,cPkKc,MAAV,EAAsB;AAClB,AOnKR,QAAA,KPmKa,EOnKb,GAAA,IPmKQ,AOnKR,CPmKuB,SAAf,CAAyB,MAAzB;AACH;AAED,aAAS,MAAT,EAAqB;AACjB,eAAO,KAAK,SAAL,CAAe,QAAf,CAAwB,MAAxB,CAAP;AACH;AAED,eAAW,MAAX,EAAuB;AACnB,eAAO,KAAK,SAAL,CAAe,UAAf,CAA0B,MAA1B,CAAP;AACH;AAED,cAAU,MAAV,EAAsB;AAClB,eAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAP;AACH;AAED,cAAU,MAAV,EAAsB;AAClB,eAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAP;AACH;AAED;AACA;AACA;AAEA,QAAI,GAAJ,GAAO;AACH,eAAO,KAAK,MAAL,CAAY,GAAnB;AACH;AACD,QAAI,GAAJ,CAAQ,KAAR,EAAa;AACT,aAAK,MAAL,CAAY,GAAZ,GAAkB,KAAlB;AACH;AAED,QAAI,QAAJ,GAAY;AACR,eAAO,KAAK,MAAL,CAAY,QAAnB;AACH;AACD,QAAI,QAAJ,CAAa,KAAb,EAAkB;AACd,aAAK,MAAL,CAAY,QAAZ,GAAuB,KAAvB;AACH;AAED,UAAM,KAAN,EAAmB;AACf,eAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,CAAP;AACH;AAED,WAAI;AACA,eAAO,KAAK,MAAL,CAAY,IAAZ,EAAP;AACH;AAED;AACA;AACA;AAEA,SAAK,GAAL,EAAe;AACX,eAAO,KAAK,QAAL,CAAc,IAAd,CAAmB,GAAnB,CAAP;AACH;AAED;AACA;AACA;AAEA,WAAO,OAAP,EAAwC;AACpC,eAAO,KAAK,QAAL,CAAc,MAAd,CAAqB,OAArB,CAAP;AACH;AAvNL;AAAA,QAAA,OAAA,GAAA,IAAA","file":"main.6ba2280c.map","sourceRoot":"../demo","sourcesContent":["export default class Emitter {\n\n    private listeners = new Map<string, Listener[]>();\n\n    on(signal: string, listener: Listener) {\n        if (!this.listeners.has(signal)) {\n            this.listeners.set(signal, []);\n        }\n\n        this.listeners.get(signal).push(listener);\n    }\n\n    emit(signal: string, argument: any) {\n        const listeners = this.listeners.get(signal);\n\n        if (!listeners) {\n            return;\n        }\n\n        for (const listener of listeners) {\n            listener(argument);\n        }\n    }\n\n}\n\nexport type Listener = (event: any) => void;\n","enum Stat {\n    ESCAPE_ACCELERATION,\n    FRICTION,\n    HUNT_ACCELERATION,\n    MAX_BITE_SIZE,\n    MAX_RADIUS,\n    MITOSIS_MIN_RADIUS,\n    VISION_RANGE,\n    MAX_VELOCITY,\n}\n\nexport default Stat;\n","import Stat from '../stat';\nimport World from '../world';\nimport { IEnergySource } from './diet';\nimport Cell from './index';\n\nexport default class CellBehavior {\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    tick(map: World) {\n        const entities = this.cell.getVisibleEntities(map);\n\n        for (const entity of entities) {\n            if (entity instanceof Cell) {\n                this.interactWithCell(entity);\n            }\n        }\n\n        this.cell.move();\n    }\n\n    interactWithCell(other: Cell) {\n        const isTouching = this.cell.isTouching(other);\n\n        if (this.cell.canEat(other)) {\n            if (isTouching) {\n                this.cell.eat(other);\n            } else {\n                this.hunt(other);\n            }\n        } else if (other.canEat(this.cell)) {\n            this.escapeFrom(other);\n        }\n    }\n\n    hunt(target: Cell) {\n        const force = this.cell.getStat(Stat.HUNT_ACCELERATION);\n        const direction = target.pos.sub(this.cell.pos);\n        const push = direction.setMagnitude(force);\n\n        this.cell.shove(push);\n    }\n\n    escapeFrom(target: Cell) {\n        const force = this.cell.getStat(Stat.ESCAPE_ACCELERATION);\n        const direction = target.pos.sub(this.cell.pos);\n        const push = direction.setMagnitude(force);\n\n        this.cell.shove(push);\n    }\n}\n","export const PI = Math.PI;\nexport const TAU = Math.PI * 2;\n\nexport const abs = Math.abs;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sqrt = Math.sqrt;\nexport const pow = Math.pow;\n\nexport function random(min?: number, max?: number) {\n    if (arguments.length === 0) {\n        return Math.random();\n    } else if (arguments.length === 1) {\n        max = min;\n        min = 0;\n    }\n\n    return Math.round(Math.random() * (max - min)) + min;\n}\n\n//\n// Round\n//\n\nconst roundOperators = [ 1, 10, 100 ];\n\nfunction getRoundOperator(digits: number) {\n    while (roundOperators.length < digits + 1) {\n        roundOperators.push(Math.pow(10, roundOperators.length + 1));\n    }\n\n    return roundOperators[digits];\n}\n\nexport function round(value: number, decimals = 2) {\n    if (decimals === 0) {\n        return Math.round(value);\n    }\n\n    const operator = getRoundOperator(decimals);\n    return Math.round(value * operator) / operator;\n}\n","import { pow, sqrt } from '../math';\nimport Stat from '../stat';\nimport Cell from './index';\nimport CellState from './state';\n\nexport default class CellBody {\n\n    get isAlive() {\n        return this.state.isAlive;\n    }\n\n    get size() {\n        return this.state.size;\n    }\n    set size(value: number) {\n        this.state.size = value;\n\n        if (value === 0) {\n            this.die();\n        }\n    }\n\n    get energy() {\n        return pow(this.state.size, 2) * Math.PI;\n    }\n    set energy(value) {\n        this.state.size = sqrt(value / Math.PI);\n    }\n\n    constructor(\n        private cell: Cell,\n        private state: CellState,\n    ) {\n        this.state.isAlive = true;\n        this.state.size = 1;\n    }\n\n    canMitos() {\n        const minSize = this.cell.getStat(Stat.MITOSIS_MIN_RADIUS);\n\n        return this.size > minSize;\n    }\n\n    mitos() {\n        const minSize = this.cell.getStat(Stat.MITOSIS_MIN_RADIUS);\n        const childCount = Math.floor(this.size / (minSize / 2));\n        const childEnergy = this.energy / childCount;\n        const children = [];\n\n        for (let i = 0; i < childCount; i++) {\n            const child = new Cell();\n            child.energy = childEnergy;\n            this.inherit(child);\n            children.push(child);\n        }\n\n        this.cell.emit('mitos', children);\n        this.die();\n\n        return children;\n    }\n\n    die() {\n        this.state.isAlive = false;\n        this.cell.emit('die', this.cell);\n    }\n\n    private inherit(child: Cell) {\n        child.setParent(this.cell);\n    }\n\n}\n","import { round } from '../math';\nimport Stat from '../stat';\nimport Cell from './index';\n\nexport default class CellDiet {\n\n    private types = new Map<IEnergySourceConstructor, number>();\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    addType(Type: IEnergySourceConstructor, weight: number) {\n        this.types.set(Type, weight);\n    }\n\n    eat(target: IEnergySource) {\n        if (!this.cell.canEat(target)) {\n            throw new Error(`Invalid food source: ${target}`);\n        }\n\n        const selfEnergy = this.cell.energy;\n        const targetEnergy = target.energy;\n        const nutrition = this.consider(target);\n        const maxBitePercent = this.cell.getStat(Stat.MAX_BITE_SIZE);\n        const maxBite = selfEnergy * maxBitePercent;\n        const bite = targetEnergy > maxBite ? maxBite : targetEnergy;\n\n        target.energy -= bite;\n        this.cell.energy += bite * nutrition;\n        this.cell.emit('eat', target);\n\n        return true;\n    }\n\n    consider(target: IEnergySource) {\n        const Type = target.constructor as IEnergySourceConstructor;\n\n        return this.types.get(Type) || 0;\n    }\n\n}\n\nexport interface IEnergySource {\n    energy: number;\n}\n\nexport interface IEnergySourceConstructor {\n    new (): IEnergySource;\n}\n","import { abs } from './math';\n\nexport default class Vector {\n\n    static ZERO = Vector.of(0, 0);\n\n    static of(x: number, y: number) {\n        return new Vector(x, y);\n    }\n\n    static from({ x = 0, y = 0 }: IVectorSetter) {\n        return new Vector(x, y);\n    }\n\n    static apply(action: (...values: number[]) => number, ...vectors: IVector[]) {\n        return Vector.of(\n            action(...vectors.map((vector) => vector.x)),\n            action(...vectors.map((vector) => vector.y)),\n        );\n    }\n\n    static range({ x = 0, y = 0 }: IVectorSetter) {\n        return this.iterate(Vector.of(x, y));\n    }\n\n    static *iterate(vectorA: IVector, vectorB: IVector = new Vector(0, 0)) {\n        const start = this.apply(Math.min, vectorA, vectorB);\n        const end = this.apply(Math.max, vectorA, vectorB);\n\n        for (let x = start.x; x < end.x; x++) {\n            for (let y = start.y; y < end.y; y++) {\n                yield start.add({ x, y });\n            }\n        }\n    }\n\n    constructor(\n        readonly x: number,\n        readonly y: number,\n    ) {\n        if (isNaN(x) || isNaN(y)) {\n            throw new Error(`Creating vector with NaN: ${this}`);\n        }\n    }\n\n    get isZero() {\n        return this.x === 0 && this.y === 0;\n    }\n\n    private _magnitude: number;\n\n    get magnitude() {\n        if (this.isZero) {\n            return 0;\n        }\n\n        if (!this._magnitude) {\n            this._magnitude = Math.hypot(this.x, this.y);\n        }\n\n        return this._magnitude;\n    }\n\n    get radians(): number {\n        if (this.isZero) {\n            return 0;\n        }\n\n        const { x, y } = this;\n        let arctan = Math.atan(y / x);\n\n        if (arctan < 0) {\n            arctan += Math.PI;\n        }\n\n        if (y < 0 || (y === 0 && x < 0)) {\n            arctan += Math.PI;\n        }\n\n        return arctan;\n    }\n\n    setMagnitude(value: number) {\n        if (this.magnitude === 0) {\n            return Vector.of(value, 0);\n        }\n\n        const ratio = this.magnitude / value;\n        return Vector.of(this.x / ratio, this.y / ratio);\n    }\n\n    distance(target: Vector) {\n        return this.sub(target).magnitude;\n    }\n\n    is({ x = this.x, y = this.y }: IVectorSetter) {\n        return this.x === x && this.y === y;\n    }\n\n    sub({ x = 0, y = 0 }: IVectorSetter) {\n        return Vector.of(this.x - x, this.y - y);\n    }\n\n    add({ x = 0, y = 0 }: IVectorSetter) {\n        return Vector.of(this.x + x, this.y + y);\n    }\n\n    multiply({ x = 1, y = 1 }: IVectorSetter) {\n        return Vector.of(this.x * x, this.y * y);\n    }\n\n    diff({ x = this.x, y = this.y }: IVectorSetter) {\n        return Vector.of(abs(this.x - x), abs(this.y - y));\n    }\n\n    toString() {\n        return `[Vector(${this.x}, ${this.y})]`;\n    }\n\n    toJSON() {\n        return {\n            $type: 'vector',\n            x: this.x,\n            y: this.y\n        };\n    }\n\n}\n\nexport interface IVector {\n    x: number;\n    y: number;\n}\n\ninterface IXVector {\n    x: number;\n    y?: number;\n}\n\ninterface IYVector {\n    y: number;\n    x?: number;\n}\n\nexport type IVectorSetter = IXVector | IYVector;\n","import Stat from '../stat';\nimport Vector from '../vector';\nimport Cell from './index';\nimport CellState from './state';\n\nexport default class CellPhysic {\n\n    private shoves: Vector[] = [];\n\n    constructor(\n        private cell: Cell,\n        private state: CellState,\n    ) {\n        state.pos = Vector.ZERO;\n        state.velocity = Vector.ZERO;\n    }\n\n    get pos() {\n        return this.state.pos;\n    }\n    set pos(value: Vector) {\n        this.state.pos = value;\n    }\n\n    get velocity() {\n        return this.state.velocity;\n    }\n    set velocity(value: Vector) {\n        this.state.velocity = value;\n    }\n\n    shove(force: Vector) {\n        const maxSize = this.cell.getStat(Stat.MAX_RADIUS);\n        const size = this.cell.size;\n        const weight = 1 - Math.max(size / maxSize, 0);\n        const modification = force.multiply({ x: weight, y: weight });\n\n        this.shoves.push(modification);\n    }\n\n    friction(velocity = this.velocity) {\n        const friction = this.cell.getStat(Stat.FRICTION);\n        const maxSize = this.cell.getStat(Stat.MAX_RADIUS);\n        const { size } = this.cell;\n        const frictionFactor = 1 - friction;\n        const sizeFactor = size / maxSize;\n        const factor = frictionFactor * 0.5 + sizeFactor * 0.5;\n\n        this.velocity = velocity.multiply({ x: factor, y: factor });\n    }\n\n    move() {\n        const maxVelocity = this.cell.getStat(Stat.MAX_VELOCITY);\n        let velocity = this.velocity;\n\n        for (const shove of this.shoves) {\n            velocity = velocity.add(shove);\n        }\n\n        if (velocity.magnitude > maxVelocity) {\n            velocity = velocity.setMagnitude(maxVelocity);\n        }\n\n        this.shoves.length = 0;\n        this.pos = this.pos.add(velocity);\n\n        this.friction(velocity);\n    }\n\n}\n","import Cell from './index';\n\nexport default class CellRelations {\n\n    private parents = new Set<Cell>();\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    setParent(target: Cell) {\n        this.parents.add(target);\n    }\n\n    isFamily(target: Cell) {\n        return (\n            this.isChildOf(target) ||\n            this.isParentOf(target) ||\n            this.isSibling(target)\n        );\n    }\n\n    isParentOf(target: Cell) {\n        return target.isChildOf(this.cell);\n    }\n\n    isChildOf(target: Cell) {\n        return this.parents.has(target);\n    }\n\n    isSibling(target: Cell) {\n        for (const parent of this.parents) {\n            if (target.isChildOf(parent)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n","import { PI, random, TAU } from '../math';\nimport Cell from './index';\n\nexport default class CellRenderer {\n\n    color = '#' + random(0, 0xFFFFFF)\n        .toString(16)\n        .padStart(6, '0');\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    render(context: CanvasRenderingContext2D) {\n        const {\n            pos,\n            velocity,\n            size,\n        } = this.cell;\n\n        /* tslint:disable-next-line:no-bitwise */\n        const radius = size | 0;\n        const padding = radius * 0.;\n\n        context.save();\n        context.translate(pos.x, pos.y);\n        context.rotate(velocity.radians - TAU / 4);\n\n        context.fillStyle = this.color;\n\n        context.beginPath();\n        context.arc(0, 0, radius, 0, TAU);\n        context.fill();\n        context.moveTo(radius, padding);\n        context.lineTo(0, radius * 1.5 + padding);\n        context.lineTo(-radius, padding);\n        context.closePath();\n        context.fill();\n\n        context.restore();\n    }\n\n}\n","import Stat from '../stat';\nimport World from '../world';\nimport Cell from './index';\n\nexport default class CellSenses {\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    getVisionRange() {\n        return this.cell.size + this.cell.getStat(Stat.VISION_RANGE);\n    }\n\n    getVisibleEntities(map: World) {\n        const visionRange = this.getVisionRange();\n        const entities = map.getEntitiesIn(this.cell.pos, visionRange);\n\n        return entities.filter((entry) => entry !== this.cell);\n    }\n\n    canSee(target: Cell) {\n        const visionRange = this.getVisionRange();\n        const distance = this.cell.pos.distance(target.pos);\n\n        return distance <= visionRange + target.size;\n    }\n\n    isTouching(target: Cell) {\n        const distance = this.cell.pos.distance(target.pos);\n        const minDistance = this.cell.size + target.size;\n\n        return distance <= minDistance;\n    }\n\n    considerFight(target: Cell) {\n        return this.cell.size - target.size;\n    }\n\n}\n","exports.buffer = function buffer(Class) {\n    const bufferProps = Class._bufferProps = Class._bufferProps || [];\n\n    Class._isDoubleBuffer = true;\n\n    Object.assign(Class.prototype, {\n\n        getState() {\n            const prev = {};\n\n            for (const { prop, state } of bufferProps) {\n                prev[prop] = this[state];\n            }\n\n            return prev;\n        },\n\n        setState(newState) {\n            this._isBufferDirty = false;\n\n            for (const { prop, state, next } of bufferProps) {\n                this[state] = newState[prop];\n                this[next] = newState[prop];\n            }\n        },\n\n        flushState() {\n            if (!this._isBufferDirty) {\n                return;\n            }\n\n            this._isBufferDirty = false;\n\n            for (const { state, next } of bufferProps) {\n                this[state] = this[next];\n            }\n        },\n\n    });\n}\n\nexports.bufferProp = function bufferProp(prototype, key) {\n    const Class = prototype.constructor;\n    const bufferProps = Class._bufferProps = Class._bufferProps || [];\n    const state = `_${key}`;\n    const next = `_${key}_next`;\n\n    bufferProps.push({\n        prop: key,\n        state,\n        next,\n    });\n\n    Object.defineProperty(prototype, key, {\n\n        get() {\n            return this[state];\n        },\n\n        set(value) {\n            this[next] = value;\n            this._isBufferDirty = true;\n        },\n\n    });\n}\n","import Stat from '../stat';\nimport Vector from '../vector';\nimport Cell from './index';\nimport { buffer, bufferProp } from './state-decorators';\n\n@buffer\nexport default class CellState {\n\n    private stats = new Map<Stat, number>();\n\n    @bufferProp\n    isAlive: boolean;\n\n    @bufferProp\n    size: number;\n\n    @bufferProp\n    pos: Vector;\n\n    @bufferProp\n    velocity: Vector;\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    getStat(key: Stat) {\n        return this.stats.get(key);\n    }\n\n    setStat(key: Stat, value: number) {\n        this.stats.set(key, value);\n    }\n\n    //\n    // Methods injected by decorator\n    //\n\n    getState(): IStateScreenshot {\n        return null;\n    }\n\n    setState(newState: IStateScreenshot) {}\n\n    flushState() {}\n\n}\n\nexport interface IStateScreenshot {\n    isAlive: boolean;\n    size: number;\n    pos: Vector;\n    velocity: Vector;\n}\n","import Emitter, { Listener } from '../emitter';\nimport Stat from '../stat';\nimport Vector from '../vector';\nimport World from '../world';\nimport CellBehavior from './behavior';\nimport CellBody from './body';\nimport CellDiet, { IEnergySource, IEnergySourceConstructor } from './diet';\nimport CellPhysic from './physic';\nimport CellRelations from './relations';\nimport CellRenderer from './renderer';\nimport CellSenses from './senses';\nimport CellState, { IStateScreenshot } from './state';\n\nlet id = 0;\nconst cells: Cell[] = (window as any).cells = [];\n\nexport default class Cell {\n\n    private behavior = new CellBehavior(this);\n    private diet = new CellDiet(this);\n    private relations = new CellRelations(this);\n    private renderer = new CellRenderer(this);\n    private senses = new CellSenses(this);\n    private state = new CellState(this);\n    private body = new CellBody(this, this.state);\n    private physic = new CellPhysic(this, this.state);\n    private emitter = new Emitter();\n    id: number;\n\n    constructor() {\n        this.id = id++;\n\n        cells[this.id] = this;\n        this.flushState();\n    }\n\n    toString() {\n        return `[Cell ${this.id}]`;\n    }\n\n    toJSON() {\n        return {\n            $type: 'cell',\n            ...this.getState(),\n        }\n    }\n\n    //\n    // STATE\n    //\n\n    getStat(key: Stat) {\n        return this.state.getStat(key);\n    }\n\n    setStat(key: Stat, value: number) {\n        this.state.setStat(key, value);\n    }\n\n    getState() {\n        return this.state.getState();\n    }\n\n    setState(value: IStateScreenshot) {\n        return this.state.setState(value);\n    }\n\n    flushState() {\n        return this.state.flushState();\n    }\n\n    //\n    // SIGNALS\n    //\n\n    on(signal: string, listener: Listener) {\n        this.emitter.on(signal, listener);\n    }\n\n    emit(signal: string, argument: any) {\n        this.emitter.emit(signal, argument);\n    }\n\n    //\n    // BODY\n    //\n\n    get isAlive() {\n        return this.body.isAlive;\n    }\n\n    get size() {\n        return this.body.size;\n    }\n    set size(value) {\n        this.body.size = value;\n    }\n\n    get energy() {\n        return this.body.energy;\n    }\n    set energy(value) {\n        this.body.energy = value;\n    }\n\n    canMitos() {\n        return this.body.canMitos();\n    }\n\n    mitos() {\n        return this.body.mitos();\n    }\n\n    //\n    // DIET\n    //\n\n    setDietType(Type: IEnergySourceConstructor, nutrition = 1) {\n        this.diet.addType(Type, nutrition);\n    }\n\n    eat(target: IEnergySource) {\n        return this.diet.eat(target);\n    }\n\n    canEat(target: IEnergySource) {\n        if (target instanceof Cell && this.isFamily(target)) {\n            return false;\n        }\n\n        return this.considerFood(target) > 0;\n    }\n\n    considerFood(target: IEnergySource) {\n        const dietFactor = this.diet.consider(target);\n\n        if (target instanceof Cell) {\n            return dietFactor * this.considerFight(target);\n        }\n\n        return dietFactor;\n    }\n\n    //\n    // SENSES\n    //\n\n    getVisionRange() {\n        return this.senses.getVisionRange();\n    }\n\n    getVisibleEntities(map: World) {\n        return this.senses.getVisibleEntities(map);\n    }\n\n    canSee(target: Cell) {\n        return this.senses.canSee(target);\n    }\n\n    isTouching(target: Cell) {\n        return this.senses.isTouching(target);\n    }\n\n    considerFight(target: Cell) {\n        return this.senses.considerFight(target);\n    }\n\n    //\n    // RELATIONS\n    //\n\n    setParent(target: Cell) {\n        this.relations.setParent(target);\n    }\n\n    isFamily(target: Cell) {\n        return this.relations.isFamily(target);\n    }\n\n    isParentOf(target: Cell) {\n        return this.relations.isParentOf(target);\n    }\n\n    isChildOf(target: Cell) {\n        return this.relations.isChildOf(target);\n    }\n\n    isSibling(target: Cell) {\n        return this.relations.isSibling(target);\n    }\n\n    //\n    // PHYSIC\n    //\n\n    get pos() {\n        return this.physic.pos;\n    }\n    set pos(value) {\n        this.physic.pos = value;\n    }\n\n    get velocity() {\n        return this.physic.velocity;\n    }\n    set velocity(value) {\n        this.physic.velocity = value;\n    }\n\n    shove(force: Vector) {\n        return this.physic.shove(force);\n    }\n\n    move() {\n        return this.physic.move();\n    }\n\n    //\n    // BEHAVIOR\n    //\n\n    tick(map: World) {\n        return this.behavior.tick(map);\n    }\n\n    //\n    // RENDERER\n    //\n\n    render(context: CanvasRenderingContext2D) {\n        return this.renderer.render(context);\n    }\n\n}\n","import Cell from './cell';\nimport { IEnergySource } from './cell/diet';\nimport Vector from './vector';\n\nexport default class World {\n\n    private entities = new Set<IWorldEntity>();\n\n    constructor(\n        readonly size: Vector,\n    ) {}\n\n    add(entity: IWorldEntity) {\n        this.entities.add(entity);\n    }\n\n    remove(entity: IWorldEntity) {\n        this.entities.delete(entity);\n    }\n\n    getEntitiesAlive() {\n        return [...this.entities];\n    }\n\n    getEntitiesAt(point: Vector) {\n        const result: IWorldEntity[] = [];\n\n        for (const entity of this.entities) {\n            const { x, y } = point.diff(entity.pos);\n            const { size } = entity;\n            const isInBox = x < size && y < size;\n\n            if (isInBox && entity.pos.distance(point) <= size) {\n                result.push(entity);\n            }\n        }\n\n        return result;\n    }\n\n    getEntitiesIn(point: Vector, radius: number) {\n        const rawStart = point.sub({ x: radius, y: radius });\n        const rawEnd = point.add({ x: radius, y: radius });\n        const result: IWorldEntity[] = [];\n\n        for (const entity of this.entities) {\n            const { size } = entity;\n            const start = rawStart.sub({ x: size, y: size });\n            const end = rawEnd.add({ x: size, y: size });\n            const { x, y } = entity.pos\n            const range = radius + entity.size;\n            const isInBox = x >= start.x && x <= end.x && y >= start.y && y <= end.y;\n\n            if (isInBox && entity.pos.distance(point) <= range) {\n                result.push(entity);\n            }\n        }\n\n        return result;\n    }\n\n}\n\nexport interface IWorldEntity<T = EntityState> extends IEnergySource, StateHolder<T> {\n    id: number;\n    size: number;\n    pos: Vector;\n    tick(map: World): void;\n    render(context: CanvasRenderingContext2D): void;\n}\n\nexport interface StateHolder<T> {\n    getState(): T;\n    setState(state: T): void;\n    flushState(): void;\n}\n\nexport interface EntityState {\n\n}\n","import Cell from '../cell';\nimport { random } from '../math';\nimport Stat from '../stat';\nimport Vector from '../vector';\nimport World from '../world';\nimport Game from './index';\n\nexport default class GameEntities {\n\n    world: World;\n\n    constructor(\n        private game: Game,\n        mapSize: Vector,\n    ) {\n        this.world = new World(mapSize);\n    }\n\n    addCell(position: Vector) {\n        const cell = new Cell();\n\n        cell.size = 4 + random(2);\n        cell.pos = position;\n\n        cell.setStat(Stat.ESCAPE_ACCELERATION, 1);\n        cell.setStat(Stat.FRICTION, 0.3);\n        cell.setStat(Stat.HUNT_ACCELERATION, 1);\n        cell.setStat(Stat.MAX_BITE_SIZE, 10);\n        cell.setStat(Stat.MAX_RADIUS, 200);\n        cell.setStat(Stat.MAX_VELOCITY, 10);\n        cell.setStat(Stat.MITOSIS_MIN_RADIUS, 50);\n        cell.setStat(Stat.VISION_RANGE, 300);\n\n        cell.flushState();\n\n        this.world.add(cell);\n\n        return cell;\n    }\n\n    getEntitiesAlive() {\n        return this.world.getEntitiesAlive();\n    }\n\n    tickEntities() {\n        const { world } = this;\n        const entities = this.getEntitiesAlive();\n\n        for (const entity of entities) {\n            if (entity instanceof Cell && !entity.isAlive) {\n                world.remove(entity);\n                continue;\n            }\n\n            entity.tick(world);\n        }\n\n        return entities;\n    }\n\n}\n","import Cell from '../cell';\nimport Vector from '../vector';\nimport Game from './index';\n\nexport default class GameInteraction {\n\n    mouse: Vector = null;\n    private isListening = false;\n    private inspector = new Set<Cell>();\n    private isHistoryEnabled: boolean;\n\n    constructor(\n        private game: Game,\n        { isHistoryEnabled }: GameInteractionOptions = {},\n    ) {\n        this.onClick = this.onClick.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onKeyPress = isHistoryEnabled\n            ? this.onKeyPressHistory.bind(this)\n            : this.onKeyPress.bind(this);\n    }\n\n    interact() {\n        const { game } = this;\n        const { world } = game;\n\n        if (!this.mouse) {\n            return;\n        }\n\n        const hover = world.getEntitiesAt(this.mouse);\n        const inspect = new Set([ ...this.inspector, ...hover as Cell[] ]);\n\n        for (const cell of inspect) {\n            game.renderCellDetails(cell);\n        }\n    }\n\n    addListeners(canvas: HTMLCanvasElement) {\n        if (this.isListening) {\n            return false;\n        }\n\n        document.addEventListener('keypress', this.onKeyPress);\n        canvas.addEventListener('mousemove', this.onMouseMove);\n        canvas.addEventListener('click', this.onClick);\n    }\n\n    private onClick(event: MouseEvent) {\n        this.mouse = Vector.from(event);\n\n        const { game, inspector } = this;\n        const { world } = game;\n        const hover = world.getEntitiesAt(this.mouse);\n\n        for (const cell of hover as Cell[]) {\n            if (inspector.has(cell)) {\n                inspector.delete(cell);\n            } else {\n                inspector.add(cell);\n            }\n        }\n\n        this.game.updateView();\n    }\n\n    private onKeyPress(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'Space':\n                this.game.isPaused = !this.game.isPaused;\n        }\n    }\n\n    private onKeyPressHistory(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'Space':\n                this.game.isPaused = !this.game.isPaused;\n                break;\n\n            case 'KeyA':\n            case 'KeyJ':\n                this.game.playback()\n                break;\n\n            case 'KeyS':\n            case 'KeyK':\n                this.game.stepback();\n                break;\n\n            case 'KeyD':\n            case 'KeyL':\n                this.game.step();\n                break;\n\n            case 'KeyF':\n            case 'Semicolon':\n                this.game.play();\n                break;\n\n            // default:\n            //     console.log(`KEYPRESS ${event.code}`);\n        }\n    }\n\n    private onMouseMove(event: MouseEvent) {\n        this.mouse = Vector.from(event);\n        this.game.updateView();\n    }\n\n}\n\nexport interface GameInteractionOptions {\n    isHistoryEnabled?: boolean;\n}\n","import Cell from '../cell';\nimport { TAU } from '../math';\nimport Vector from '../vector';\nimport Game from './index';\n\nexport default class GameRenderer {\n\n    constructor(\n        private game: Game,\n        private canvas: HTMLCanvasElement,\n    ) {}\n\n    renderEntities() {\n        const { game, canvas } = this;\n        const { width, height } = canvas;\n        const entities = game.getEntitiesAlive();\n        const context = canvas.getContext('2d');\n\n        context.clearRect(0, 0, width, height);\n\n        for (const entity of entities) {\n            entity.render(context);\n        }\n    }\n\n    renderCellDetails(cell: Cell) {\n        this.renderCellVision(cell);\n        this.renderCellBehavior(cell);\n    }\n\n    private renderCellVision(cell: Cell) {\n        for (const visible of cell.getVisibleEntities(this.game.world)) {\n            this.drawLine(cell.pos, visible.pos, {\n                width: 0.5,\n                color: 'rgba(0, 0, 0, 50)',\n            });\n        }\n\n        const visionRange = cell.getVisionRange();\n\n        this.drawCircle(cell.pos, visionRange, {\n            color: 'red',\n        });\n\n    }\n\n    private renderCellBehavior(cell: Cell) {\n        const velocityMultiplier = 100;\n        const velocityLine = cell.velocity.multiply({\n            x: velocityMultiplier,\n            y: velocityMultiplier,\n        });\n\n        this.drawLine(cell.pos, velocityLine.add(cell.pos), {\n            color: 'blue',\n            width: 2,\n        });\n    }\n\n    drawLine(from: Vector, to: Vector, {\n        color = 'black',\n        width = 1,\n    } = {}) {\n        const context = this.canvas.getContext('2d');\n\n        context.lineWidth = width;\n        context.strokeStyle = color;\n        context.beginPath();\n        context.moveTo(from.x, from.y);\n        context.lineTo(to.x, to.y);\n        context.closePath();\n        context.stroke();\n    }\n\n    drawCircle(at: Vector, radius: number, {\n        color = 'black',\n        width = 1,\n    } = {}) {\n        const context = this.canvas.getContext('2d');\n\n        context.lineWidth = width;\n        context.strokeStyle = color;\n        context.beginPath();\n        context.arc(at.x, at.y, radius, 0, TAU);\n        context.closePath();\n        context.stroke();\n    }\n\n}\n","import Game from './index';\nimport { min, max } from '../math';\n\nexport default class GameState {\n\n    private history = new Map<number, EntitiesState>();\n    private maxHistory: number;\n    private initialStep: EntitiesState;\n\n    private get olderStepSaved() {\n        return min(...this.history.keys());\n    }\n\n    private get newerStepSaved() {\n        return max(...this.history.keys());\n    }\n\n    constructor(\n        private game: Game,\n        { maxHistory }: GameStateOptions = {},\n    ) {\n        this.maxHistory = maxHistory;\n    }\n\n    tick(cursor: number) {\n        if (this.hasStep(cursor)) {\n            this.setState(this.history.get(cursor));\n            return;\n        }\n\n        if (cursor < this.olderStepSaved) {\n            if (cursor !== 0) {\n                console.warn('Wiped saved history');\n            }\n\n            this.reset();\n        }\n\n        while (!this.hasStep(cursor)) {\n            this.processStep();\n        }\n    }\n\n    loadForeignState(state: EntitiesState) {\n        this.initialStep = state;\n        this.reset();\n    }\n\n    getState() {\n        return this.history.get(this.newerStepSaved);\n    }\n\n    reset() {\n        this.setState(this.initialStep);\n        this.history.clear();\n        this.history.set(0, this.initialStep);\n    }\n\n    hasStep(cursor: number) {\n        return this.history.has(cursor);\n    }\n\n    saveInitialStep() {\n        const entities = this.game.tickEntities();\n        const state: EntitiesState = {};\n\n        for (const entity of entities) {\n            state[entity.id] = entity.getState();\n        }\n\n        this.initialStep = state;\n        this.reset();\n    }\n\n    setState(state: EntitiesState) {\n        // TODO: Get all entities\n        const entities = this.game.getEntitiesAlive();\n\n        for (const entity of entities) {\n            // TODO: revive dead entities\n            entity.setState(state[entity.id]);\n        }\n    }\n\n    private processStep() {\n        const entities = this.game.tickEntities();\n        const newState: EntitiesState = {};\n\n        for (const entity of entities) {\n            entity.flushState();\n            newState[entity.id] = entity.getState();\n        }\n\n        this.saveStep(newState);\n    }\n\n    private saveStep(newState: EntitiesState) {\n        const { history } = this;\n\n        history.set(this.newerStepSaved + 1, newState);\n\n        if (history.size > this.maxHistory) {\n            history.delete(this.olderStepSaved);\n        }\n    }\n\n}\n\nexport interface GameStateOptions {\n    maxHistory?: number;\n}\n\nexport interface EntitiesState {\n    [id: number]: object;\n}\n","export default class GameTicker {\n\n    private _speed = 1;\n    private cursor = -1;\n    private isRunning = false;\n    isPaused = false;\n\n    get speed() {\n        return this._speed;\n    }\n    set speed(value) {\n        if (value !== 1 && value !== -1) {\n            throw new Error(`Invalid speed ${value}`);\n        }\n\n        this._speed = value;\n    }\n\n    get isForward() {\n        return this.speed === 1;\n    }\n\n    get isBackwards() {\n        return this.speed === -1;\n    }\n\n    get isAtBegining() {\n        return this.cursor <= 0;\n    }\n\n    constructor(\n        private callback: GameTickerCallback,\n    ) {\n        this.onTick = this.onTick.bind(this);\n    }\n\n    //\n    // Timer execution\n    //\n\n    start() {\n        if (this.isRunning) {\n            return;\n        }\n\n        this.isRunning = true;\n        requestAnimationFrame(this.onTick);\n    }\n\n    stop() {\n        this.isRunning = false;\n    }\n\n    //\n    // Flow control\n    //\n\n    play() {\n        this.speed = 1;\n        this.isPaused = false;\n        this.start();\n    }\n\n    playback() {\n        this.speed = -1;\n        this.isPaused = false;\n        this.start();\n    }\n\n    step() {\n        this.speed = 1;\n        this.isPaused = true;\n        this.execute();\n    }\n\n    stepback() {\n        this.speed = -1;\n        this.isPaused = true;\n        this.execute();\n    }\n\n    pause() {\n        this.isPaused = true;\n    }\n\n    //\n    // Implementation details\n    //\n\n    private execute() {\n        if (this.isBackwards && this.isAtBegining) {\n            console.warn(`Can't go further in history!`);\n            this.isPaused = true;\n            return;\n        }\n\n        this.cursor += this.speed;\n        this.callback.call(null, {\n            turn: this.cursor,\n        });\n    }\n\n    private onTick() {\n        if (!this.isRunning) {\n            return;\n        }\n\n        requestAnimationFrame(this.onTick);\n\n        if (!this.isPaused) {\n            this.execute();\n        }\n    }\n\n}\n\nexport type GameTickerCallback = () => void;\n\nexport interface GameTickerParams {\n    turn: number;\n}\n","import Cell from '../cell';\nimport Vector from '../vector';\nimport GameEntities from './entities';\nimport GameInteraction from './interaction';\nimport GameRenderer from './renderer';\nimport GameState, { EntitiesState } from './state';\nimport GameTicker, { GameTickerParams } from './ticker';\nimport { IWorldEntity, EntityState } from '../world';\n\nexport default class Game {\n\n    private entities: GameEntities;\n    private interaction: GameInteraction;\n    private renderer: GameRenderer;\n    private state: GameState;\n    private ticker: GameTicker;\n    private onTick: (params: GameOnTickParams) => void;\n\n    get world() {\n        return this.entities.world;\n    }\n\n    constructor(\n        private canvas: HTMLCanvasElement,\n        mapSize: Vector,\n        {\n            maxHistory = 100,\n            onTick,\n        }: GameOptions = {},\n    ) {\n        this.onTick = onTick;\n        this.entities = new GameEntities(this, mapSize);\n        this.renderer = new GameRenderer(this, canvas);\n        this.state = new GameState(this, { maxHistory });\n        this.ticker = new GameTicker(this.tick.bind(this));\n        this.interaction = new GameInteraction(this, {\n            isHistoryEnabled: Boolean(maxHistory),\n        });\n    }\n\n    init() {\n        this.addListeners();\n        this.state.saveInitialStep();\n        this.start();\n        this.pause();\n        this.render();\n    }\n\n    tick({ turn: tick }: GameTickerParams) {\n        const entities = this.getEntitiesAlive();\n\n        this.state.tick(tick);\n        this.updateView();\n\n        this.onTick({ tick, entities });\n    }\n\n    updateView() {\n        this.render();\n        this.interaction.interact();\n    }\n\n    //\n    // TICKER\n    //\n\n    get isPaused() {\n        return this.ticker.isPaused;\n    }\n    set isPaused(value: boolean) {\n        this.ticker.isPaused = value;\n    }\n\n    get speed() {\n        return this.ticker.speed;\n    }\n    set speed(value: number) {\n        this.ticker.speed = value;\n    }\n\n    goTo(step: number) {\n        return this.state.tick(step);\n    }\n\n    start() {\n        return this.ticker.start();\n    }\n\n    stop() {\n        return this.ticker.stop();\n    }\n\n    play() {\n        return this.ticker.play();\n    }\n\n    playback() {\n        return this.ticker.playback();\n    }\n\n    pause() {\n        return this.ticker.pause();\n    }\n\n    step() {\n        return this.ticker.step();\n    }\n\n    stepback() {\n        return this.ticker.stepback();\n    }\n\n    //\n    // ENTITIES\n    //\n\n    getEntitiesAlive() {\n        return this.entities.getEntitiesAlive();\n    }\n\n    addCell(position: Vector) {\n        return this.entities.addCell(position);\n    }\n\n    tickEntities() {\n        return this.entities.tickEntities();\n    }\n\n    //\n    // INTERACTION\n    //\n\n    addListeners() {\n        this.interaction.addListeners(this.canvas);\n    }\n\n    //\n    // STATE\n    //\n\n    getState() {\n        return this.state.getState();\n    }\n\n    setState(value: EntitiesState) {\n        return this.state.loadForeignState(value);\n    }\n\n    //\n    // RENDER\n    //\n\n    render() {\n        return this.renderer.renderEntities();\n    }\n\n    renderCellDetails(cell: Cell) {\n        return this.renderer.renderCellDetails(cell);\n    }\n\n}\n\nexport interface GameOptions {\n    maxHistory?: number;\n    onTick?(params: GameOnTickParams): void;\n}\n\nexport interface GameOnTickParams {\n    tick: number;\n    entities: IWorldEntity<EntityState>[];\n}","import Vector from '../src/vector';\n\nexport default {\n\n    load(id: string) {\n        const json = localStorage.getItem(id);\n\n        return json ? JSON.parse(json, reviver) : null;\n    },\n\n    save(state: any) {\n        const id = getFormattedDate(new Date());\n        const json = JSON.stringify(state)\n\n        localStorage.setItem(id, json);\n\n        this.trim();\n    },\n\n    rename(id: string, newName: string) {\n        localStorage.setItem(newName, localStorage.getItem(id));\n    },\n\n    log() {\n        const keys = Object.keys(localStorage);\n\n        if (!keys.length) {\n            return;\n        }\n\n        console.log(`Found stored states:`);\n\n        for (const key of keys) {\n            console.log(`  load(\"${key}\")`);\n        }\n    },\n\n    trim() {\n        const keys = Object.keys(localStorage);\n\n        while (keys.length > 10) {\n            if (isDate(keys[0])) {\n                localStorage.removeItem(keys[0]);\n            }\n\n            keys.shift();\n        }\n    }\n\n};\n\nfunction reviver(key, value) {\n    if (typeof value !== 'object' || !value.$type) {\n        return value;\n    }\n\n    if (value.$type === 'vector') {\n        return Vector.from(value);\n    }\n\n    return value;\n}\n\nfunction pad(value: number, length: number) {\n    return (String(value) as any).padStart(length, '0');\n}\n\nfunction getFormattedDate(value: Date) {\n    const year = value.getFullYear();\n    const month = pad(value.getMonth() + 1, 2);\n    const date = pad(value.getDate(), 2);\n    const hour = pad(value.getHours(), 2);\n    const minutes = pad(value.getMinutes(), 2);\n    const seconds = pad(value.getSeconds(), 2);\n    const milliseconds = pad(value.getMilliseconds(), 3);\n\n    return `${year}-${month}-${date} ${hour}:${minutes}:${seconds}.${milliseconds}`;\n}\n\nfunction isDate(value: string) {\n    return getFormattedDate(new Date(value)) === value;\n}","import Game, { GameOnTickParams } from '../src/game/index';\nimport Vector from '../src/vector';\nimport { random, round } from '../src/math';\nimport Cell from '../src/cell';\nimport state from './persisted-state';\n\nmain();\n\nasync function main() {\n    await domLoaded();\n\n    const $fps = document.querySelector('#fps');\n    const $entities = document.querySelector('#entities');\n    const $tick = document.querySelector('#tick');\n\n    const width = window.innerWidth;\n    const height = window.innerHeight - 4;\n\n    console.log({ width, height });\n\n    let prev = Date.now();\n    const query = parseQuery();\n    const entities = query.get('cells') || 10;\n    const canvas = document.querySelector('canvas#world') as HTMLCanvasElement;\n    const game = new Game(canvas, Vector.of(width, height), {\n        maxHistory: query.get('history'),\n        onTick,\n    });\n\n    canvas.width = width;\n    canvas.height = height;\n\n    for (let i = 0; i < entities; i++) {\n        const x = random(0, width);\n        const y = random(0, height);\n        const cell = game.addCell(Vector.of(x, y));\n\n        cell.setDietType(Cell);\n    }\n\n    game.init();\n    state.save(game.getState());\n    state.log();\n\n    if (!query.get('pause')) {\n        game.play();\n    }\n\n    Object.assign(window, {\n        game,\n        rename: state.rename,\n        load(id: string) {\n            game.setState(state.load(id));\n            game.render();\n        },\n    });\n\n    function onTick({ tick, entities }: GameOnTickParams) {\n        const now = Date.now();\n        const delta = now - prev;\n\n        prev = now;\n        $tick.innerHTML = String(tick);\n        $entities.innerHTML = String(entities.length);\n        $fps.innerHTML = String(round(1000 / delta, 0));\n    }\n}\n\nfunction domLoaded() {\n    return new Promise(resolve => window.addEventListener('DOMContentLoaded', resolve));\n}\n\nfunction parseQuery() {\n    const keyValue = window.location.search\n        .substr(1)\n        .split('&')\n        .filter(Boolean)\n        .map((entry): [ string, number ] => {\n            const [ key, value ] = entry.split('=');\n            const num = parseInt(value);\n\n            if (isNaN(num)) {\n                throw new Error(`Invalid option \"${key}\" is not a number \"${value}\" \"${num}\"`)\n            }\n\n            return [ key, num ];\n        })\n\n    return new Map<string, number>(keyValue);\n}"]}