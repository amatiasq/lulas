{"version":3,"sources":["../src/emitter.ts","../src/stat.ts","../src/cell/behavior.ts","../src/math.ts","../src/cell/body.ts","../src/cell/diet.ts","../src/vector.ts","../src/cell/physic.ts","../src/cell/relations.ts","../src/cell/renderer.ts","../src/cell/senses.ts","../src/cell/state-decorators.js","../src/cell/state.ts","../src/cell/index.ts","../src/cell.ts","../src/world.ts","../src/game/entities.ts","../src/game/interaction.ts","../src/game/renderer.ts","../src/game/state.ts","../src/game/ticker.ts","../src/game/index.ts","persisted-state.ts","main.ts"],"names":["exports","buffer","Class","bufferProps","_bufferProps","_isDoubleBuffer","Object","assign","prototype","getState","prev","prop","state","setState","newState","_isBufferDirty","next","flushState","bufferProp","key","constructor","push","defineProperty","get","set","value"],"mappings":";;;;AAAA,MAAA,OAAA,CAAA;AAAA,kBAAA;AAEY,ACFZ,IAAK,IAAL,KDEY,SAAA,GAAY,IAAI,GAAJ,EAAZ;AAsBX,ACxBD,CAAA,UAAK,IAAL,EAAS;ADIL,ACHA,ODGG,ECHH,IDGA,CCHA,CDGmB,QAAnB,EAAqC,UCHrC,IAAA,CAAA,IAAA,qBAAA;ADII,ACHJ,SAAA,GDGQ,CAAC,CCHT,IDGc,MCHd,GDGS,CAAe,ACHxB,CAAA,EDGS,CAAmB,CCH5B,KDGS,CAAL,EAAiC,ECHrC;ADIQ,AGNC,AFGT,QEHS,CFGT,CEHS,GAAK,CFGd,GDGa,CGNM,EAAV,MHMD,CAAe,GAAf,CAAmB,ECH3B,IDGQ,ACHR,CAAA,CDGmC,EAA3B,CCHR,mBAAA;ACHJ,AFOS,AGNI,AFGT,MCJJ,ECCa,CFGT,EEHS,GAAM,AFGf,CCJJ,ICCwB,EAAL,GAAU,CAAhB,IFGT,ECJJ,EDII,CAAA,IAAA,CCJJ,SAAA,CAAA,CAAA,GDII;ACDJ,AFMQ,AGNK,AFET,MCFJ,ECAa,CFET,EEFS,EHMA,CGNM,AFEf,ECFJ,GCAwB,GHMhB,AGNK,CHMU,GAAf,ACJJ,CDIuB,GCJvB,CAAA,CCFJ,CFMQ,EAA2B,ACJ/B,IDII,CENR,AFMwC,OCJpC,CDII,CENR,CAAA,CAAA;AAEA,AFKK,AGNQ,AFET,MCDJ,ECDa,CFET,EEFS,GAAM,AFEf,ICDJ,CAAA,ACDwB,GAAX,YFET,IAAA,CAAA,IAAA,oBAAA;ACCA,AFKA,AGPS,AFET,QEFS,CHOJ,ACLL,EEFS,GAAM,AFEf,CDKA,CEJY,CFIS,EGPD,CDEpB,EACsB,ACHb,GHOT,EAAkC,CCLlC,IAAA,CAAA,IAAA,cAAA;ACCY,AERhB,AJaQ,AGPK,AFET,MGRJ,EDMa,CFET,GEFS,CDEG,CFKF,ACLV,CGRJ,ADMoB,EDEJ,GAAA,ACFS,GCNzB,CFQgB,ACFH,EHOa,ECLtB,GDK2B,CIb/B,AHQI,CGRJ,AHQI,IAAA,GDKsB,CAAe,GAAf,CAAmB,MAAnB,ACLtB,CDKI;AEJA,AERR,AJcQ,AGRK,AFEZ,AKTD,CLAA,EAAK,GGCL,AEDA,EHOa,GAAA,CHQD,ACfP,CDeQ,CGRM,CCNnB,AEDA,IHOwB,AFPf,EAAJ,CDeG,AGRK,AFPb,CKAA,CNewB,OIdxB,AEDA,CAAA,OFCA,SAAA,CAAA,CAAA;AFUI,AETJ,ACDA,ALeY,AGPZ,AFEA,AKTA,MFAA,ACDA,ACCA,ELSA,CCAS,ACFT,GDEI,AITJ,CAAA,CJSmB,CGVnB,AFQA,AFEA,CGTA,ADOuB,EFER,CEFf,EAAqC,CFErC,EEFA,EAAiD,KERjD,CDCA,OCDA,CDCA,QCDA,CDCA,ACDA,CDCA,ACDA,CDCA;AFUQ,AEPR,ACDA,ALaS,AGPL,AG0BA,MF/BJ,ACDA,EFMQ,MDEM,AEPd,ACDA,CDCA,ACDA,CCiCiB,CADb,CH1Bc,CG4BD,CAFb,EAEsB,EH5BlB,CDEiB,ICFI,CDEC,ACF1B,EAA4B,EDEP,CAAU,kBAAV,CAA6B,GAA7B,CAAjB;AAEA,AEeJ,ACrBA,ALWI,AGRA,AG0BS,aJvBJ,AFKA,AMkBI,CAAA,CH1BF,CCmBC,ACrBA,CC4BC,CAAA,CJvBE,AFKA,CIUf,ACrBA,AFGgB,ECoBJ,ACtBU,GHKlB,CCHO,CCkBX,AJVI,CGRA,CDGqB,AEiBG,EJZD,MELvB,EAA+B,CFK/B,EAAkC;AEJ9B,AEeI,ACrBA,AGPhB,ARkBY,AGRP,AG0BY,KH5Bb,CKRJ,KLUW,ECkBK,ACrBA,AC6BC,CAAA,CH1BF,CDGC,CEeA,ACrBA,AC6BC,CAAA,CEpCjB,CJ4BgB,ACrBA,AGPhB,CRkBqB,GIUL,ACrBA,CFGS,IHQb,EGRG,GDGmB,ECHE,CAAzB,EAA4B,GDGL,OAAtB,EAA4B;AACxB,AEeA,ACzBJ,AENZ,ACMI,AReK,AGRD,AG2BA,MCxCR,MDwCY,CFTI,ACzBJ,CFOE,CIbd,CCOgB,CLMR,CCkBQ,ACzBJ,ACkCM,CAAN,CElCR,CNUiB,AEeL,ACzBI,CGCM,EFiCF,CDlCA,CDyBR,ECzBI,EAAR,ACkCkB,CCxC9B,ADwCwB,CAAhB,EAA0B,GJxBlB,CAAsB,CKhBtC,KLgBgB,IKhBhB,CAAA,CAAA;ALiBa,AEgBL,ACvBA,AETR,ACMgB,ACPhB,ATsBK,AGRG,AG2BI,MCxCZ,AEDA,OLiCa,AI1BG,CLOF,CMdd,ANcQ,EIbR,ACMgB,CJ0BR,AEQU,CFRC,CI1BH,EFkCM,CGzCtB,CDOgB,EJ0BR,CEQU,CAAU,CFRC,GKjC7B,CLiCQ,AGhCR,AEDA,QFCA,WAAA,CAAA,CAAA,GDwCyD,IAAI,EAA3C,CAAN;AJvBH,AEgBD,ACtBJ,AEPJ,ACDY,ACDZ,AEHAA,AXAA,AGeK,AG2BI,MCrCT,AEFA,EEHQC,INYI,CDsBC,AI9BD,CGJZ,ENYI,AEPJ,CAAA,AILiB,CPkCT,ACtBoC,AIT5C,CL+BmB,AK/BnB,CDCY,GJ8BJ,AI9Bc,CHQlB,EDsBsB,ACtBgC,AMZhCA,CPkClB,AI9BkB,GAAJ,EAAV,AGJK,CAAgBC,KAAhB,EAAuB;AToBhC,AEeH,ACtBG,AEJJ,ACDI,ACCJ,AERA,AXDJ,AGiBI,AG0BC,QN3CL,EWCUC,CRgBC,EDGE,AGPA,ELbb,COUgB,AEAA,ANOA,CDGR,CAAU,AGPV,ALbR,CKamB,CEJf,AEAA,CNQO,CDGH,AGPA,AEFQ,AEDU,ANOJ,CEJC,CMZCD,CXDxB,EKaQ,AEJJ,AJQuB,EEJE,AEFG,CIVFE,GRgBR,EEJd,IFI+B,GQhBf,GAAqBF,ARgBA,GAAvB,CAAX,EQhBwCE,ERgBE,GAAjD,OQhByC,IAAsB,EAA/D;AToBC,AEdD,ACOC,AEJW,ACAZ,ACAY,ANQf,AGZG,QFCI,GEDG,ECIK,AEAA,AHJZ,CEIU,AFJA,CFCV,AEDA,ECIY,AEAA,AHJS,CFCV,AEDX,ECIY,ACAZ,ACAY,AHJkB,EEIR,EDAV,AEAA;APaZ,AEfI,ACQJ,AELY,ACAR,ACNJ,AEFAF,ARMJ,AGFQ,QDSA,AFPR,EQNUG,GJQM,ACAH,ACNT,CJWA,AFPJ,CCDe,AEDA,CDSc,CFP7B,CIEgB,AENZ,CHEe,CFCC,AIGZ,CNYa,AKZL,ACAK,ACNT,ENIZ,CKEQ,CJHO,AIGU,AGRrB,ALIW,CJgBX,AEfsB,AGGV,ADJU,CGFR,AHEH,CJgBiB,ASpBJ,CLIC,CAAd,CEIP,AFJA,CKJJ,CPKI,CKHU,MAAA,CAAO,CAAP,EAAU,QAAV,EACT,QADS,CACA,EADA,EAET,QAFS,CAEA,CAFA,EAEG,GAFH,CAAd;APmBI,AEfH,ACQG,AEVI,ACKP,ACDG,ACXR,APoBA,AGZK,MIRL,MLiBY,CAAC,AEVD,CLiBE,CQxBd,GLiBkB,CEVN,GFUC,AEVkB,CFUR,CEVX,GLiBe,EGPd,CAAiB,CKjB9B,CRwBgC,IAAL,AGPd,CHOwB,AGP7B,EAA+B,AKjBvC,QRwB2B,CAAqB,AQxBhD,CAAA,CAAA,GRwB2B,CAAnB;AAEA,AEfJ,ACOQ,AELJ,ACCJ,ACDA,ACTJ,ACCIC,ARgBJ,AGXI,MINJ,ENOQ,GKEG,AERAC,ALKA,CJgBC,AEfR,CIGS,CDDC,CHFF,AEDR,CINJ,AJMgB,CJgBC,AKbT,AGTR,ACCI,CNac,AILd,AERcL,ALKA,CEId,CDDgB,AEAwB,CPahC,AMZa,CNYH,AGRA,ACRA,CAAN,CKLQM,CLKC,EDQP,CHQN,AGRgB,CHQC,AKbT,ADHS,CAAb,EAAZ,CKLA,CTqBQ,AIhBmC,CJgBvC,ASrB2B,CJQf,CLaiB,AKbV,IAAnB,WFK4C,MAAM,EAAxC,CAAN;AHSA,AEfJ,ACOC,AELD,ACCA,ACDA,ACRJ,APgBJ,AGXQ,cCGM,AEAA,CLFC,AIIH,AFLG,CJgBC,AOZJ,ACRI,GDOF,AHHK,CFCC,AIIH,AEVb,CDUQ,CFFJ,AGPkB,GNKX,AGEU,ADHV,CJgBH,AEfc,AEDA,CAAX,CJgBa,CMXhB,ACFE,AHHe,CFCrB,AIImB,AFLZ,CGMH,AHNJ,GCGiB,CEAX,CDEF,ICEA,CFJa,ACGb,CDHoB,GEIf,CFJT,ACGS,GCHT,ODGI,CAAgB,MAAhB,CADA,IAEA,KAAK,SAAL,CAAe,MAAf,CAHJ;ANaQ,AEfX,ACQG,AENH,ACKA,ACAG,ACbQ,ACARC,ARiBR,AGZK,MHYC,OOjBU,CLcF,GKdE,ECAG,CDAH,CRqBK,ECJE,COjBP,APiBS,CDIT,ACJO,CDIG,CGPC,AFGC,EDIZ,ACJO,CDIO,CCJE,CEHA,EFGT,CDIP,ACJhB,CEH2B,CAAU,MAA7B;AHQK,AEfT,ACQI,AELJ,ACKA,ACDI,ACbA,ACAI,ARkBZ,AGZI,QFAI,AGGA,CJSR,EITI,ADHO,CFAP,CFaQ,AEbC,CCQC,AELH,AEIG,CDCC,CFRX,CAAa,CFAb,AONcC,CTqBC,CEfO,CIQtB,EAAuB,ACDJ,AHPnB,EKNqB,ARkBzB,AGZ0D,CHYhC,CQlBd,CLMiD,CDQhC,CIDC,CAAtB,CNKR,EAAwC,CGZpC,CDQgC,CCR2C,KDQvE;AHQQ,AEfR,ACQA,AELA,ACKA,ACDA,ACZJ,APiBA,AGZI,WHYG,ECZE,CCQC,AIDA,CFJC,ACKA,AFRA,GFAP,CAAW,CGGC,CLYC,AQpBH,CFaI,AFRA,CFAd,CKOgB,AHPT,CJeC,AKZD,ADFH,CJcc,AEfA,ACQA,AELA,AJSA,GITlB,ELYQ,AEfR,ACQuB,AGAhB,CAAiB,ALIrB,AGXQ,CGMc,EAAzB,ANK2B,AGXb,EEOe,EHAX,CAAc,CGAzB,CAAP,CFPsB,CHWc,CAAxC,CEJsB,ACPJ,CDOd,AFIuC,AGXZ,MAAD,IAAY,OAAO,CAA/B,CAAV,CADG,EAEH,OAAO,GAAG,QAAQ,GAAR,CAAa,MAAD,IAAY,OAAO,CAA/B,CAAV,CAFG,CAAP;AJgBK,AEdL,ACOA,AQxBR,ANmBK,ACKA,ACAG,ACbA,ACDI,ARkBJ,AGTH,MOnBL,MTiBY,ECOE,CKbC,CDaC,CEdC,CEVjB,EJwBQ,ACbY,ENME,CAAd,AOPe,ARkBA,COjBR,CNMU,AMNA,ACDAC,ERkBjB,CAAoB,COjBb,ACDQ,ENcQ,AMdAC,CDCC,CPiBC,CU5BjC,ERwBoC,AMdb,ARkBK,COjBS,APiBA,CQlBzB,CRkBgB,CEJG,CAAU,AKbT,APiBS,CU5BzC,AHW0C,ACDAT,MNcX,CAAkB,AKbjB,CAAkB,GCDtC,CEVZ,CAAA,AFUuD,CNcN,AQxBjD,AV4BwD,COjBN,KPiBT,CEJQ,CAAK,AKbJ,CAAK,APiBU,CAArC,CAApB,UEJuB,AKbC,CLaxB,AKbA;ARqBC,AEdG,ACOJ,AQrBR,ANgBI,ACMA,ACDI,ACbH,ACDWO,ARkBX,AGRD,ASjBJ,MFAA,AEAA,ERgBQ,CLMA,EKNJ,ADCO,ASjBX,CRgBY,AQhBZ,EVqBc,AGCA,CNMC,COPC,AHJZ,CFHa,AGEb,ADCa,EJWE,AW5BnB,ANgByB,ADCN,CFHP,AIQR,CGfiBC,CHeK,CFLH,CDIC,ACJP,CJWQ,AOPjB,AEdQ,CFcU,AHJA,GKVG,CFcC,AHJA,CJWX,AOPX,AHJS,CJWe,COPC,AHJ7B,CKV8BC,CEPlC,APiBgD,EJWX,AGPA,AIAA,CAA7B,CEdqB,CAAb,CTqBG,CAAJ,CW5Bf,CX4B4C,OGPpC,IQrBR,CAAA,CAAA;ACJA,AZiCY,AEdH,ACOD,AQrBR,ANgBQ,ACMA,ACDA,ACZJ,ACFS,ACTb,AT4BI,AGTI,ASdJ,MDRJ,ADKA,ADFA,KT4BW,EIVE,CFKC,CQrBd,ALsBe,AFLA,CQtBf,AL0BgB,AMjBC,CbwBA,CKZT,CAAW,CCMC,AFLA,ASdhB,CVkBiB,CELb,AEKA,AMjBqB,CNiBN,ACZA,EHOE,CGPrB,APiBsB,CDEd,AMNG,AIxBf,ANmBe,CJWa,AMNA,AEbK,AJQL,ECDpB,CMhBR,ALsBe,CM3Bf,AN2BgC,ACDA,ANKrB,CDEC,ACFR,ES5BJ,ANmBmC,CDIC,CCJR,CEKb,AFLuB,COjBtC,ALsBQ,ACDe,AHJK,CQtB5B,CRsByC,CGIC,AHJd,CDIP,ACJN,CAAP,EDIsC,CQrB9C,CAAA,CAAA,AJqB0C,GAAA,CJArB,CS1BrB,CAAA,AL0BgD,AGvBhD,CEHA,AT0BwD,AIAhD,AGvBR,YPuBQ;ASxBR,AZgCS,AEdJ,ACQG,AQtBR,ANgBK,ACMA,ACAG,ACbA,AETR,AT0BC,AGTI,ASdY,IHHI,ECArB,ECJA,KCOiB,EDPjB,AT0Be,AQtBf,CJsBgB,AGtBhB,CGGiB,CDPF,ECOE,CVmBT,COtBR,EGGiB,CVmBQ,AIAjB,CK1BO,EL0Ba,CJApB,EQtBR,ADAA,CAAA,CEJA,AL0BiC,KAAzB,CItBR,QAAA,CAAA,CAAA;AX6BK,AEbD,ACOI,AQtBR,ANiBI,ACMA,ACAI,ACdA,ACFI,ACQR,ATYJ,AGTI,ASnBQ,MFCZ,ETeQ,AGEA,CJUR,GGTY,CDIC,AUvBD,CXgBR,AIQU,AEdA,APkBd,CAAsB,CIVlB,AEMY,AGPA,CRDF,ACON,AQtBR,CRsBkB,CELF,AIVGF,ALWf,CEKA,AIRA,ATYJ,AGToB,CSnBR,CPwBc,AIPA,ATWW,CQpBzB,CNeJ,AUvBe,CNwBf,EHLJ,CDIwB,AKbA,AKVD,CTmBW,ESnBf,EFCvB,AHSiC,APkBe,AY5BpC,CZ4BZ,CELmC,CFKc,COlBrB,CAAU,CJSmB,EOlBzD,EPkB6D,CDIrD,CKboB,CAAkB,GJSW,CAAW,COlBpE,APkByD,COlBzD,CAAA,AHS8C,AJSyB,CAAd,CAArD,EAAqE,GIT3B,CAAK,YAAvB,CAApB;ARqBJ,AEdI,ACOA,AQtBR,ANiBQ,ACMA,ACAA,ACdA,ACFC,ACQO,ATYZ,AGTI,AShBA,MFFR,EV2BQ,CDEC,AShC0B,INyBtB,AGCA,AIRG,CFNF,AJSA,CJWV,AEdW,AGEA,CEMC,CPMK,AGPb,AOPQ,CPOE,CGCC,ACAX,CIvBR,ANiBoB,AEMA,AGRJ,CHQR,ANIa,CCZN,ACOP,AFKJ,AGTkB,CDIC,AICA,CAAf,AGRQ,ATYQ,CCZT,AGEA,ACMP,AEdiB,CNMN,AGEO,AEMA,CHLC,CDInB,CGCqB,AEdA,CLaC,CDPN,CKQhB,AHLc,CAAW,CCDzB,ACM0B,ACAA,CAA1B,CLRW,ACOX,AQtBR,CTe8B,AKQO,CHLC,GFHvB,AIQP,AFLc,CITG,CNMW,AIQO,AEdA,AJSA,CFH5B,ASff,AJuBqC,GAA7B,CLRiC,AMNO,EJS1B,EITqB,AJSS,CFHN,AMNO,ENM7C,CMNiB,CGTzB,CAAA,AHS0D,CGT1D,APkBsB,CAAd,SITiB,CAAjB;ARqBA,AEdH,ACQG,AQvBR,ANiBK,ACMO,ACAJ,ACbA,AEXI,AIRZ,AboCQ,AGTA,ASfJ,MFHJ,AGTA,EDYQ,KHJI,CV8BE,AIXA,ASfV,CVoBW,AKbA,AMnBf,AboCe,CKJC,ACAA,AMpBY,EHJhB,CPwBJ,AQvBR,CJuBQ,ANIY,AGTA,CMnBA,CV8BE,CMNC,CEbC,CEXA,AT4BT,AGTU,CHSC,CDEC,CU9BP,EFWL,AEXH,ANmBQ,CJWE,AQnBU,AMnBhC,AboCe,AGTgB,CJWC,AMNhB,ALIR,CKJyB,EKvBjC,CHU+B,AJQK,GJWd,AMNN,AQhChB,AV2BoB,CJWoB,AMN5B,AEb8B,CJQD,CEKC,CKvB1C,IX6BwC,CctCxC,AV2BoB,CU3BpB,CNmBoD,AMnBpD,AV2BkD,IJWV,CAAK,AW7B7C,AHUyD,CGVzD,CAAA,APkBoB,CAAZ,CIRO,CAAP,YRmBc,CAAd;AACA,AEdJ,ACQC,AQvBL,ANiBI,ACMY,ACAR,ACbH,ACHGG,ACOA,AIvBR,AEAA,AfoCK,AGRG,AShBA,MFHR,AGTA,AEAA,EdwBQ,AGEA,KDEK,AShBA,Cb0BC,AEdV,CAAW,AYxBf,AEAA,CX0BI,AEMY,CIvBhB,ANiBiB,AIVAC,ALYA,GFJb,CEIiB,AShBb,CXYY,AGEhB,AEMI,AMpBc,CPoBC,ACAA,AOhCvB,AEAA,CX0B8B,CIVtB,AIJA,Cb0BkB,Aa1BA,CPoBV,AGhBW,ALYA,CAAnB,CGIA,CHJsB,CGIC,COhC/B,AEAA,AHYQ,Cb0ByB,AW7BjC,AGTA,AEAA,CZ4BkC,EJUR,CAAW,CON7B,AHJ8B,CAA9B,CJUkB,CAAe,AW7BzC,APmByC,GAAjC,EJUsC,AIVA,IJUL,CAAU,AW7BnD,CAAA,CAAA,CX6B0B,CAAlB;AACA,AEdA,ACSJ,AQxBJ,ANiBQ,ACMK,ACAL,ACZJ,ACJQ,ACQR,AIxBJ,ACDA,ACIA,AfkCI,AGTQ,AShBP,MFHL,AGTA,ACDA,ACIA,IfkCU,COjBC,CEIC,CRAC,ACSA,AEPA,CLYC,CUdV,AIxBJ,CHSA,AJuBgB,CCZZ,ACJaC,ACQI,AKzBrB,AX6BiB,CFJT,AGEA,AWvBR,CdqBmB,ACSf,AEPe,AGNI,AQjBvB,EhBmCqB,AGLa,AFIb,AGTA,CGIb,CLRA,AKQe,CAAf,CHJiB,CFJC,AKQA,CFNlB,GAAsB,CLYC,AStBnB,AKhBZ,AV4B+B,COnB/B,APmBY,CFJc,AazB1B,CNiBkC,ALYA,CCF1B,AEM2B,ELRT,CAAK,AKQL,ANKY,AGTA,CKZ1B,AKhBZ,CHSA,CJuByC,AQjCzC,CX6B0C,CJUrB,AIVT,CJUgC,CIVC,CFJN,ADalB,CAAjB,CMLI,AOhCR,AV4BY,CJUS,AW7BrB,AGTA,CdsCQ,AW7BR,AGTA,AV4BkD,CFJN,ASf5C,CIVA,CbyB0B,AazB1B,CbyBQ,AazBR;AfyCQ,AEfH,ACSG,AQvBR,ANgBK,ACMI,ACAD,ACZA,AEIA,AIvBR,ACAA,ACGI,ACNJ,AhBuCI,AGTY,ASfZ,IFHA,EGTJ,ACAA,AEHA,GNYS,CAAT,CV2BW,AYxBA,Eb0BE,CGNC,AKbA,CEIC,AO1Bf,CVkCgB,AO/BhB,AEIgB,AfgCA,CDER,Aa1BJ,Cb0Bc,Ca1Ba,CHWX,AMpBhB,Cb6BiB,AYhCrB,AdoCW,CMLH,AQ/BR,ACKgB,Af+BM,AGTA,CJWd,AOPe,AUlCvB,CjByCwB,AOPA,ACZA,CEIT,CAAW,EVelB,AGNoB,Aa7BxB,AZwBwB,CIRC,AEId,CHQP,AGRsB,AMlBW,Af+BX,CGTR,CGIU,AO/BhC,AGHA,Ab8BgC,CIRR,AEIT,AO1Bf,CTsBkC,AEI1B,ANI0B,CAAF,EAAK,CIRb,APiBb,AGTqB,CDKxB,AIDA,CO/BR,AV2BsB,CIRmB,AJQzB,CHS0B,MOjBM,EMnBhD,AboCI,CapCJ,CNmBQ,AMnBR;AduCK,AEND,ACCI,AQxBR,ANiBI,ACMI,ACDA,ACZA,ACJI,ACQP,AIrBL,ACII,ACHY,ACLhB,AhBsCC,AGTY,ASfL,MFHF,AGPN,AGJA,IZ4BU,GWvBM,AHSH,CFHU,AHUT,CNaF,ACCG,AEPX,ACMW,AWlCf,CViCgB,AQxBA,AEThB,CZ4BuB,AIXN,AOZD,CFDhB,CAAA,CX+BoB,AGDZ,AS1BJ,ACHY,CLMsB,AEG9B,CEJA,AFIc,CJGC,CMPb,ACLM,Cb8BD,AIFP,ACZiB,ACJAJ,CNkBC,AQxBH,EEGf,CVqBO,AQxB+B,AFMvB,AIHM,CVqBC,AKdA,CGV9B,AFM+BC,GNkBhB,AKdU,CAAU,AKP3B,CJGe,EDIE,ACJaI,CNkBC,AKdA,CLc/B,AYzBA,ENOe,EAAX,CMP2C,EPW9B,AObrB,CPa4C,ACJAb,CMPS,MPWF,GAA9B,CAAjB,ACJI,EAAiD;ATyBzD,AEPI,ACCH,AQvBL,ANgBQ,ACMH,ACDG,ACZA,ACJQ,ACSZ,AInBA,ACCY,ACHA,ACQZ,ACjBJ,AjBkCA,AGDS,ASfJ,MFFL,AOhBA,EjBkCA,EUlBA,CAAA,CDcY,CKlBI,ACHA,AfyBhB,CCIc,AGNA,AGPA,CRoBC,AUfX,CHOY,AOzBA,AGMA,AClBhB,AjBkCA,CSJuB,AKlBP,AGZhB,EFSgB,CT4BR,AO1BJ,ACCY,AEKZ,CjB4BA,ASxBiBS,ARarB,CSJI,AIjBI,AEJQ,ACUR,CjB0BmB,CEPH,AGNA,AKFY,AKlBpB,AEON,EREM,EDIY,AQhBZ,Cd6Ba,AGNA,ASrBzB,CLU0BE,CKRP,EZyBC,AGNA,AGPS,CNaC,AGNA,AYb1B,GTMoB,CAAU,CCJCH,AQFI,EfmBnB,AGNA,AYfpB,CfqBsC,AGNA,CIXZ,AQFe,CRE7B,CDIY,CAAkB,GNaJ,AGNA,IGPI,GNaJ,AGNA,CHMK,AGNA,GGPD,CAAK,MHO3B,CAAhB,KGPoB,CAApB,CNagB,CAAhB;AFQA,AENA,ACpCR,AQyBI,ANII,AC/BR,ACqCQ,ACZA,ACLQ,ACSR,AInBQ,ACNZ,ACII,ACQQ,ACYZ,AdIC,ASdD,aHWS,AInBG,ACNZ,AEYY,CjB4BF,AKbA,CHOC,AMbA,CDYC,AWRA,CJnBA,AGMA,CNWZ,ADEI,AKzBJ,CLyBe,CRSC,AY5BJ,AGMA,CZeK,AIXAK,AMhBD,CfwCE,AUfd,CHQA,AGRe,AGXH,CXoBL,AY5BC,AGMA,ACYZ,CTRY,AMhBZ,CV2BsB,AGNA,AEIlB,AQAoC,ClBejB,AENA,CQTC,CDTCF,CJWR,CLaC,AKbS,CLaC,CQnBjB,AEIP,CRSA,CGPA,EGN6B,CCLCH,CTwBhB,CAAkB,ESxBX,CAAb,ITwBwB,CQnBhC,MRmBgC,CAAK,mBAAvB,CAAd;AACA,AENH,ACrCL,AQcY,ANgBJ,AChCR,ACsCK,ACZA,ACLQ,ACSR,AIjBG,ACRI,ACKR,ACPQ,AC0BI,AdcZ,ASxBI,QVjBR,AGFA,AF2CQ,KO3BI,AGHC,ACRD,AEFA,AC0BI,ClBgBF,AKbA,ADWV,CDzCJ,AGFA,AOmBe,CAAC,CTwBF,CDzCd,AGFA,AQaQ,CDMW,CIhBP,CNaA,AGHS,AEHH,AEmBF,EbGO,AY7BD,CNaC,AIXX,AGwBI,ALVQ,CCNC,CdgCC,AG3C1B,CE8B2B,AU3BD,AEFA,CNaC,EMbL,CXHtB,CDgCgC,AU3BpB,AEFA,AC0BI,ALVD,Cb0BkB,AchCR,ADMjB,ERamB,CLaD,AKbU,CLaC,EW7BV,CX6BD,AchCL,CdgCoB,AchCV,ETmBY,GLaG,AW7BvB,CAAiB,CGHnB,CAAb,CdgCiC,AKbd,CLawB,AW7B5B,CAAX,ANgBwC,CAAzB,CLaD,AKblB,CLaA;AACA,AELJ,ASxBQ,ANgBJ,AEhCR,AC2BI,ACNK,ACUL,AIlBC,ACRO,ACKJ,ACQA,ACnBI,Ad4CJ,ASxBH,SJjB8B,GPsC1B,CSxBG,AIXA,AEaC,ACnBD,ClB8CE,AKbA,AWtBA,CRiBC,AJgBA,CYjCC,CLMJ,EOjBA,CPiBO,AKNL,AZiCM,CJEC,AQlBjB,AJgBW,CWtCH,ACKU,AEXD,CV4BM,ASTnB,ACnBI,CPiBW,CIXC,CEaE,AbyBA,CAAX,CYjCD,CXsBe,AU3BD,EfwCG,AW7BR,AP2BQ,CWtCP,CCKS,CDLrB,CV2BuB,CYd3B,AbyB4B,CYjC5B,AZiCuB,CO3BZ,CAAa,GP2BU,CJErB,AW7BF,ANgBU,ADWrB,CJEoC,AW7BhC,ANgBgC,EAAE,GLazB,AKb4B,CLazC,KKboC,EAAa,GAAG,MAAhB,EAAf,CAArB;ALeA,AENA,ASxBI,ANiBJ,AElCR,AC4BQ,AEIJ,AIjBA,ACHI,ACDA,ACQH,ACnBO,Ad4CP,ASvBD,QNrBJ,IOeY,CdgCC,AW9BD,ANiBC,AUtBA,AGZD,ChByCE,AMbA,AQjBA,CTXd,CSWgB,ChBoCR,CAAU,AO/ClB,AMqBkB,CRaV,AalCI,CbkCQ,ASnBhB,ACHI,CCDM,CLMF,AGFgB,AIfP,ClB+Cb,AenCe,ACDA,AEXD,ALqBlB,Cb0BoB,AENA,AGPhB,AalCI,CPiBY,ANiBC,AGNA,AKPM,Gb0BvB,AenCoB,Cb6BC,ASxBD,AKNd,CTXd,AC4B8B,GNaN,CAAU,AMbT,AQjBS,CRiBC,AOhBZ,CAAa,CVsB5B,CGNiB,CAAc,COhBhB,ACDf,Cd8BgB,ASxBI,AILa,Cb6BC,Ga7BnB,CAAf,CPgBiB,CGXD,AHWwB,CNaN,ASxBA,IAAlB,CAAZ,CHW2C,CNab,CAAK,CMbtB,CAAjB,gBNagB,CAAhB;AFOH,AENG,ASxBI,ANiBP,AGNG,ACNAM,ACUJ,AIjBI,AKjBR,AJcQ,ACDA,ACNJ,ACLQ,Ad+CR,AS1BI,MMvBR,EFOgB,Ab0CR,KO9BI,AILC,AGZD,ChByCE,AMbA,AMbA,AEJA,AHUA,GT0BV,EejDJ,CfiDiB,CO9BL,AFKS,AKPA,CGVjB,ACLQ,CLqB2B,CFJhB,AILf,CDGiB,AEJA,ACNK,ACLN,ALqBhB,EXoBmB,Aa7BA,CJKA,AHWC,EQjBE,AEXlB,EhByCoB,AY1BP,ACHO,CPgBC,EW9BjC,EjB2C2B,AMbC,CNaU,AMbA,CGXX,AGFN,EAAb,CNaoB,CNae,AiB3C3C,AJc2B,CAAiB,CPgBC,CGXtB,AKNE,Cd8Ba,ASxBE,CILb,ACDnB,CDCyC,Eb6BE,ASxB5B,CAAX,AHWwC,COhBzB,CAAnB,CIdR,CX8BQ,AW9BR,CAAA,IjB2C6D,CAAvB,CAAX,CAAnB;AFxCR,AEyCQ,ASxBI,ANkBR,AGNI,ACPI,ACWR,AIjBI,AKlBR,AJcQ,ACDA,ACNA,ACLJ,Ad+CI,ASzBA,MMxBR,MfiDY,CO9BA,ANkBC,ASnBA,ACJA,AGZT,ALsBS,CXmBC,Ac9BA,CRkBC,AEIH,AO5BG,CRiBC,CAAC,AKNT,AV+BS,EO9BL,AEKO,CCNC,CIhBhB,CPiBiB,AFKCF,AUxBtB,AFOe,CFOP,AXmCA,CCZgB,ASnBA,AELA,AEXT,CDKA,Ab0CU,ASzBjB,CFLiB,AILC,AEPP,CTwBQ,CNYC,CGNC,AY9BP,ACLlB,ALsByB,ECNL,AELO,Ed8BE,CepCN,AJiBO,CFLT,CFKb,CJaR,ASnBoB,CNahB,ACP8B,AKNP,AKlB/B,CjB2C4B,AGNS,ASnBb,CAAhB,CELgB,ACNF,CfoCoB,ASxBrB,AKNqB,ACNP,AJiB3B,CFL4B,CEKQ,CET9B,CIfd,AHawB,ACNF,CNYD,AKNb,CLMI,AMZG,CAAP,CFQW,Eb4BX,SiB3CR,CAAA,CAAA,IJec,CAAuB,IAAvB,CAA4B,IAA5B,CADY,GAEZ,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAFN;AfZR,AE0CQ,ASxBI,ANkBJ,AGNH,ACPW,ACWR,AIjBA,AKlBR,AJgBK,ACFG,ACPH,ACsBG,AdoBI,ASzBA,AO5BZ,MDIA,ACJA,EpBKA,KWkBY,AGDC,AIWA,ChBcC,AGNA,CLpCd,AUkCe,CIjBP,AEJQ,CIlBhB,CpBKA,AWkBY,AEKM,CHWV,AIjBW,AKlBnB,AD6BQ,AdoBW,CAAP,ASzBQ,CFLA,AEKF,CKKI,CLLC,CAAL,CXmBO,ASxBD,ANkBC,AWvBjB,CAAkB,Cd6BlB,AYzBA,AEJA,AEemB,EFfE,AHUA,CbvB7B,AKoC8B,AWvBtB,EAAwB,CLKR,AOUF,AEjCtB,CfyCyB,AaRS,CbQC,AcrCnC,ANwBmC,EGV3B,CEec,CFfiB,AEeA,ALLV,CFLT,AEKoB,CFLN,ASvBlC,CfyCyB,CAAkB,AcrC3C,AD6BsB,CAAd,CPVY,AKLZ,CLKI,CEKmC,GRaJ,AQbd,CAAjB,IMxBZ,CAAA,ACJA,CfyC2C,AcrC3C,ACJA,CfyCgD,AezChD,QfyCyB,CAAjB;AHQA,ASzBI,ANkBJ,AGLJ,ACRS,ACWR,AIhBG,AKnBR,AJiBI,ACFI,ACPJ,ACqBC,AdoBI,ASzBG,AO3BZ,MDGA,EFQgB,AGXhB,KlB+Ca,ASzBD,AGAC,AEJA,CXsBC,CUpBF,AKpBZ,CDGA,CjB4CiB,ASzBL,CHaM,AKRA,AO3BH,CJkBI,CLIA,AGAX,ADKY,CXoBC,AYzBA,CZyBb,AepCJ,EfoCoB,ASzBD,ANkBC,AGLpB,AKRc,CGTV,ACPsB,CTwBA,ENYF,AYzBP,CTkBQ,AWtBA,AHSA,EFLN,CQnBvB,CdqCwB,CAAU,CSlBb,ADKT,CCLc,CEJlB,Cd6BA,ASzBW,CAAa,AKJO,Cd6BC,AiB5CxC,CdqCwB,CAAkB,CHOlC,ASzBW,ETyB0B,ASzBP,INkBI,AcrC1C,CRmB2C,AQnB3C,CAAA,IRmBmB,AGAX,CHAI,ANkB8B,CAAK,ASlBA,CAAvC,STkBgB,CAAhB;AHQI,ASzBA,ANkBJ,AGLA,AEIJ,AIjBI,AKnBR,AJiBQ,ACFI,ACPJ,ACPJ,AdiDI,AS1BI,AQ9BZ,ADII,MDEJ,AENA,EHOQ,CEHC,EAAL,ChBoDQ,CO/BA,ADiBC,AIjBA,AIlBT,AdiDS,AgBpDM,CfuCL,AUpBA,CPeC,ASxBA,CZ6BC,AUpBA,AGhBH,AGPb,CFMA,CjB4CkB,AEMA,AS1BA,CFLN,AKJO,CXsBL,AGLM,AMbZ,ACFM,CLmBV,AIjBiB,CHAA,AMXN,CP4BwB,CFJxB,AEI4B,CLClB,AGLA,AOfA,ACFb,ACPG,CfoCW,ASzBD,AKJC,ACPP,EHWE,AV+Bb,AS1BoB,CLQb,AOfP,AETc,CfoCQ,AGPA,ADaA,EIlBE,AKRA,AQ9BhC,CFMA,AHeY,CXsBJ,AY7BmB,CNWF,AGAJ,CAAK,ADKE,EXoBE,CMZS,CKRC,AQ9BxC,CFMA,AFQsB,CNWD,AMXc,CNWC,AHa5B,CMbA,ADKoC,CXoBlB,CYzBU,AGXd,CfoCV,ASzBS,CMXN,AJgBH,CFL8B,AGAlC,AGXA,EERR,CAAA,CAAA,CRmB+C,KAA1B,AUzBrB,CVyBY,AUzBZ,CAAA;AnBmDY,ASzBA,ANkBJ,AGLH,ACRO,ACaR,AIlBI,AKlBR,AJgBQ,ACFC,ACPJ,ACPG,AdiDI,ASzBA,AQ/BZ,ADIQ,MDGR,AEPA,IFOA,CAAA,ERkBY,AGAC,CTkBC,AUpBA,AKnBA,CFGC,CHgBC,AFQA,CJDCA,ACaH,ANaG,AiBxDjB,CnBkDkB,AQPC,EClBP,AGAJ,AIlBY,CJkBC,ACFP,AKnBO,ETqBC,CTyBV,Ea3Bc,AGhBlB,ChB2CmB,ASzBD,AP+Bd,ASzBe,CCNN,ECFb,AXiCsB,CCbC,AIbnB,EY9BZ,CZ8BkC,AICA,AO3BA,CfuCC,ASlBd,AV+Bc,CU/BT,CHAA,AEMC,CXmBf,AWnB0B,CJD1B,CL0BkB,CAAW,AiBxDzC,ADIqB,CAAqB,CfuClC,CMlBc,ASrBD,CAAb,CTqBI,AP+BkC,ASzBnB,CTyBG,ASzBiB,ETyBE,GSzBtB,CCNnB,CV+B8C,CU/BT,AV+Bf,CU/BtB,AV+BI,AiBxDZ,CR+ByD,AQ/BzD,CAAA,GR+BY,EAAmD;AXoBnD,AStBJ,ANeA,AGzCR,AEEA,AIqBQ,AKPJ,AJMI,ACHH,ACCD,ACfC,AdiDI,ASzBO,AQ/BhB,ADKQ,CVDR,KWJA,GJsBS,GFEG,CJIC,AGHA,ACDA,CVmBC,CMfN,AMNJ,AItBJ,ADKe,CDcC,CjB+BC,Ae5BM,CNML,AIJA,EDCV,CAAa,CHGb,AQVJ,ACbkB,CLmBd,AFOe,AQ/BvB,CnBkDY,AiB9BJ,CjB8BiB,Aa1BA,EVmBE,AQZX,AO1BW,CNoBN,ADMO,EXmBhB,CiBhCR,CCbkB,CDgBd,AChByB,CfsCC,AQZlB,CCNK,AKJX,CLIgB,AOzB1B,CAAA,ADKsB,EAAiB,EfsC/B,OctBe,CLIf,EAAiC,AKJjC,CChBc,CNoBd,AMpBO,GDgB6B,AChBY,EDapD,EAG0C,AChBtC;AlB8CI,ASrBJ,ANcA,AG1CR,AC6BY,ACtBR,AIiBI,AKPQ,AJMJ,ACFR,ACAI,ACfJ,AdkDI,AS1BK,AQ/Bb,ADKK,KANU,CCCf,EbCA,AUMQ,GRCJ,CADC,AOeO,CHGC,AKPG,ADXZ,CPsBU,ANcA,AapCA,CVNd,AJwDe,AiBzDf,EZ8BiB,AQRA,CTrBjB,CG4BmB,AQXH,ADXZ,CJkBI,AVgCY,CFPC,ASrBb,AGJa,AIlBF,CCWH,AHIM,CXqBC,AIbA,CQRX,Cf4BA,ASrBa,AFCAH,AQRA,Cf4BC,Ac5BtB,ERrBJ,AMwBqB,AKPL,AHIgB,CLOxB,CFCe,AL2Bf,CFPI,AQ3CP,AOeO,AItBZ,CZ8BgCI,AQRxB,EAA0B,CHGb,CLKE,AKLG,ELKd,CY9BZ,ChB2CwC,CKnCpC,CDsBsCb,ACtBtC,CLmCmB,GAAuB,ASlBtC,EAA8B,GAA9B,COzBR,CZ8BY,AY9BZ,CAAA,CZ8BuD,IJaI,GAAnD,CKnCJ,WAAA,QAAA;AR2CK,ASrBD,ANeA,AIdQ,ACpBZ,AIeI,AKJA,AJGC,ACFD,ACAI,ACfJ,AdkDH,AS1BI,AQ/BT,ADMI,MCNJ,GDMS,EVIL,CADC,AQFO,CPsBC,ANeA,ASnBA,AKJA,AHCA,CIhBT,EAAe,CHgBF,GHGT,CTmBA,AIdaS,AKLA,AKJb,CDdc,CPsBd,AOtBI,CbqCY,AcvBA,CFCZ,CRQI,AQRU,AItB1B,CHO2B,CJkBN,AKJO,CHCpB,CPQsB,AORA,CNbzB,AOa0B,EZsBE,CWtBzB,CPQ2BI,AKLd,CAAK,CIlBW,CDeX,ACfY,CTuBR,AUTF,AFCW,ACf/B,CTuBQ,CJcQ,AKlCpB,AQHqC,CbqCC,AKlCtC,AOYsB,AItB1B,CJsB2C,CZsBC,EcvBpB,CduBuB,AcvBN,CLIjC,CGHkB,CHGc,AGH5B,AItBZ,CFqBwB,CLIhB,CTmBkC,AcvBK,EduBQ,GAAG,EcvBlC,CAAhB,ETXJ,CLkCsC,EAAlB,CAAhB,EgB5CR,CAAA,CXUI,AWVJ,QXUI;AR0CI,AStBH,ANeA,AIdQ,AClBT,AIaI,AKJA,AJIA,ACHA,ACAI,ACfA,AdmDR,AS1BI,AQ/BR,ADKQ,QhBoDA,GM9CJ,CADC,CRwCQ,AY1BA,AKJA,AHCA,CDGC,AKnBA,ChBoDV,AS1BW,EXmBP,CAAU,AgB5CA,AdmDH,CgBpDI,CNmBX,CAAa,AKJb,ANWA,CXmBA,Aa1Bc,AGlBA,ChB4CC,CiB9BC,GDdN,CJkBG,AKJO,AJIA,AGlBA,EhB4CpB,CQxCH,AMWG,Cd6BwB,Ac7BA,GFGX,CAAK,AEHlB,AIhB4B,GDeR,CjB8BpB,AkB7CgC,CVMpC,AKakB,CLblB,AKasC,EKnBN,CFCS,CCcrB,ACfL,CDesB,AJIM,AKnBvC,GFC0C,CCc1B,CJIF,AGlBJ,CCc6B,AJIvC,AGlBI,CJkBJ,EAAsC,EAAtC,CKJgB,CAAhB,GTTJ,OAAA,QAAA;ARwCI,ASrBJ,ANeA,AIfK,AChBL,AIWI,AKJA,AJIA,ACHH,ACAI,ACfA,AdmDD,AS1BH,AQ9BL,ADIQ,WfuCA,AK/BJ,CADC,AN6CO,CFPC,AY1BA,AKJA,CJIC,AKnBA,CTwBF,AU5BP,CnBiDG,CEOS,CerCT,CEnBR,CPuBQ,CAAa,AKJA,ACfA,CCJhB,CjBwDG,CWjCgB,CIJC,AfqCA,CgBpDC,ENmBL,ACAO,GLZvB,AKYmB,CAAQ,CIJP,AJIS,EDAb,AMnBA,CNmBK,ACAW,AKnBD,IDef,CTPjB,ASO+B,AJIO,AKnBrB,CVQjB,AURI,GDea,EAAoB,CLIjC,CKJmC,CLIH,ACAR,EAAqB,CDA7C,ECAgD,IIJf,CJIT,CIJX,AJIG,CIJhB,AJIA,CLXJ,YAAA,QAAA;ARuCI,AStBA,ANeA,AK9Ca,AI2Bb,AKLA,AJKA,ACHI,ACAJ,ACfA,AdkDI,ASzBR,AQ/BA,ADKI,UCLE,EXHoB,AOwBlB,CHGC,AKLA,AJKA,AGlBA,CbqCC,CHOC,AStBA,GEGG,CMZV,AJKW,AGlBX,AdkDW,CAAP,CYnCiB,ACAR,AIrBjB,ADKiB,CDcC,ADbA,ChB4Cd,AQrDsB,AI2BtB,ACAA,AFOJ,CFHoB,ADhCvB,CMyBW,AHUqB,CMZP,AFEA,CFGC,ACHY,AEf/B,CbqCoB,AetCpB,CTuBqB,ASvBA,ETuBE,AEG3B,AO1BI,EfsCyB,AQZc,AO1Bd,CTuBzB,AIJA,CILkB,CJKU,CVmBR,AetCpB,CfsC8B,EYtB9B,EEFc,AFEoB,CPzBzC,ASuBoC,EdwBT,CAAkB,EcxBJ,CTtBZ,CAAA,EAAT,ASsBgB,CdwBS,AcxBC,IAAV,CAAe,EdwBN,CAAK,AK9CrB,CAAT,ASsBgB,CAAf,CAAd,SdwBoB,CAApB;AHQH,AStBA,ANeG,AIhD2B,AK8B3B,AKNA,AJKI,ACHJ,ACAI,ACfP,AdkDI,ASzBD,AQ9BJ,ADKI,KXXJ,KYMM,EhB0CE,CSlBC,AKNA,AHEA,AIfA,CPyBC,EIVE,CFGC,AKlBT,CVVa,AI6Bb,AOxBU,CPwBC,AEJA,GFIX,ADMc,CRYC,ASlBA,CKNf,CElBiB,CLoBjB,CFIA,AKNmB,AFEA,CZsBC,AYtBhB,AJUgB,EGVE,ACAA,CEFC,ANYT,CAAU,EEPpB,AFOsB,CEPC,ACHA,AKpB/B,ChB0CI,CQZ6B,EEPzB,IFOoB,EMZD,ANYc,GAAG,IMZrB,CAAoB,AHEjB,CAAwB,AHUtB,EAAV,CMZK,ANYnB,EMZ6C,AHEM,IAAL,CAAU,KAAlC,CAAtB,EAAgE;Ad+BpE,AStBA,ANeI,AIhBP,AKFO,AKPI,AJKH,ACHG,ACAI,ACdZ,AdkDI,AS1BA,AQ9BJ,ADKC,CXjBL,IWEe,GFgBP,EhB4CD,AmBlDG,GhB2CG,CDaC,AS1BA,CCLC,CV+BC,CYpCC,AEdb,AdkDU,ECbK,ASlBX,AV+BW,AiBxDA,CHMF,AdkDH,AS1BM,IRaZ,AYvBgB,CDAZ,AZoCa,CYpCC,AHUA,AQ9BA,EhB2CE,AYvBZ,CAAa,AboCrB,AS1BY,CMZU,ANYA,CGVC,CHUC,CRaC,CWvBrB,CHUuB,CGVC,CKpBjB,CFkBmB,CdyB9B,CgB3CgC,ChB2CC,AQbX,AQ9B1B,ER8BuC,CGVC,EHUE,CGVlC,CGFkB,CHEmB,CCAjC,EJUc,EAAV,CAAZ;AXqBA,AStBJ,ANeQ,ASlBP,AKTgD,AJOhD,ACHW,ACAH,ACdL,AdkDA,AS1BA,AQ7BJ,ADKA,SDUuB,CAAnB,CCVG,ChBkDC,AiBvDA,CnBiDC,AkB5CT,CPwBU,CKxBC,AGLX,ADKmB,CCLP,EnBiDR,AmBjDU,CnBiDC,CgB5CC,CdkDC,CgBlDjB,CfqCmB,AWvBA,AHUgB,AQ7BvB,CDKsB,CFAvB,ALwBP,AQ7BiB,CnBiDjB,Ac/ByC,AZqCvB,GFNG,CgB5CC,AdkDT,CclDb,AdkDuB,AiBvDf,ChB0CgB,CgB1C5B,CnBiDI,CGPe,ADaY,CCbC,ADaf,CAAb,ICbe,CAAX;AHQJ,AStBJ,ANeK,AIhBThB,AKDI,AKRC,AJMD,ACJY,ACCJ,ACfP,AdmDG,AS1BA,AQ7BJ,ADII,QXqBAkB,EYzBE,EjBuDE,CFPC,AWnBA,IXmBL,Aa1BS,AEHA,Cf6BC,AOvBlB,AYzBkB,CR6BC,EJJE,AL8BA,AgBnDA,ClB4Cb,Ae7BI,AboCJ,CFPe,AYxBH,ACFhB,ACJmB,CZqCC,CWjCkB,AFOlC,GXmBA,AkB5CA,CPyBqB,AOzBA,ClB4CC,AOvBAA,AYzB1B,IR6B8B,CXmBC,CkB5C3B,EAA8B,ClB4C9B,COvBa,CAAoBV,CIIjC,EAAoC,MJJvB,CWrB8B,CXqBCW,GAA/B,EAAoC,CWrBnB,CAAqB,EAArB,CAA9B;AlB6CH,ASrBD,ANeI,AIjBJ,AKDI,AKzBJ,AJuBI,ACPyC,ACIxC,ACdL,AdkDQ,AS1BA,AQ7BR,ADIC,KAnBU,GDcP,ADMA,EToBEjB,AYzBA,EV2BE,ANeA,AUpBA,CIvBR,AHgBQ,ELYR,AGHW,CKzBF,CR4BQ,AILJ,CNGCM,AIIA,CKxBd,CJmBgB,ADKA,CRaC,AQbH,AQ7BG,CHKF,AdkDG,CS1BC,CAAL,CCLH,CAAW,CV+BC,AiBvDA,CZyBCY,AMHpB,CXiCI,AS1BiB,CRajB,AUpBkB,AMtBT,CAAU,EhB0CE,GQbG,EQ7Bf,CZyBjB,AIIQ,GCLG,COxB4B,ChB0CnC,ASlBA,COxBJ,ChB0C0C;AHQlC,AStBJ,ANeI,AIjBR,AKDC,AKzBG,AJuBI,ACJH,ACED,ACfA,AdkDC,AS1BG,AQ7BR,ADKA,UXoBMjB,AYzBA,ADKH,ElB4Ca,GStBL,AQ5BA,AFqBA,ACfA,CDeC,Cf6BJ,CWpBM,CXoBa,Aa3BZ,AMtBA,CV2BC,AQ5BA,ADMA,CDeC,EZsBE,CIjBCD,AMHZ,CJKG,AOtBA,CPsBW,AEEA,EM9BX,AFqBC,AIpBY,CFDC,AFqBA,CRKCE,ASpBA,CAAC,CbqCC,AarCxB,CPsBO,CAAmB,AQ5B1B,CFqBQ,AJSmB,CIT3B,CNOO,CAAP,AMP8B,GIpBnB,CZyBK,AIIkB,AQ7BA,EhB0CnB,CAAsB,AIjBAF,CIIjC,KJJuCE,KJiB5B,AgB1CJ,ChB0CP,AgB1CR,MZyByC,IAAsB,EAA/D;APyBI,AStBH,ANeI,AIjBL,AKAA,AK1BC,AJuBI,ACHD,ACCI,ACfP,AdmDG,AS3BI,AQ7BR,ADKI,UXoBEQ,AYzBA,EjBwDE,EFPE,Ac9BA,AIdA,EhBmDE,CapCC,AboCL,AiBxDK,CZyBE,AIID,CCJF,EV+BM,AiBxDD,ADKA,CXoBCO,CPwBd,CAAgB,COxBE,EAAtB,AL+BwB,CYrCA,ACChB,AboCU,AS3BM,AOxBA,ClB4CC,AmBjDR,GjBwDY,AgBnDZ,ClB4Cb,Ac9ByB,AHUA,AOxBA,GhBmDI,AiBxDpB,CjBwDT,AiBxDkB,EjBwDe,AS3BF,CAAX,GQ7BX,CR6B2B,CQ7BV,ADKb,CAAb,CJcoB,EAApB,AHUyC,IAAI,CAAzB,AQ7BM,IR6BwB,GQ7BxB,CAAO,CR6BsB,CQ7B7B,CAAU,IR6ByB,CAAzC,AQ7BM,EAAiB,ER6BuB,IQ7BxC,CR6B6C,AQ7B9D,EAA2C,ER6BuB,CAAvE;AXqBP,ASrBD,ANeI,AIlBJ,AKAI,AKXJ,AJSI,ACHA,ACAC,ACdL,AdkDQ,AS1BA,AQ9BJ,ADMA,QFAA,ETmBEH,CUXF,CRcI,AStBA,CfqCC,AWvBA,AIdA,CNmBC,CHGV,CGHY,ADKA,CFFO,AFHL,AMFD,CKjBC,CfqCV,CAAY,AarChB,AGNgB,CZyBCG,AKAP,CHGV,AP4BkB,CYpCd,AEdY,CPsBgB,AFHX,AOLD,AIdhB,EfqCA,ASlBkB,AOzBA,ADMA,ChBkDC,AS1BA,ERaE,AWvBA,AZoCjB,AiBxDQ,ChB2CZ,ASlBA,AOzBsB,CZyB1B,COLI,CDGA,CAA0B,ACHA,AHUA,GAAP,CAAW,CQ9BlB,KNuBZ,CCHA,CDGsC,AFOnB,CGVoB,AHUA,IEPI,CFOxB,KAA8B,IEPjD,CFOI,EAAoD;AX7ChE,AS4CQ,ANeA,ASlBA,AKXA,AJSA,ACHI,ACAP,ACdG,AdkDC,AS1BO,AQhC4C,ADQhD,KCRK,CAAb,OV8BS,ANeA,Ac7BA,CLWC,CCFC,AGjBA,CbqCP,EMfA,CAAW,ANeA,AWvBA,CEdC,GLwBG,CRaC,CSlBC,AKXjB,CRcA,AOtBO,CPsBY,ANeR,AQbH,CRaY,AQbA,EFFpB,AGHsB,AInBA,CbqCX,AUpBX,AGjBA,CPsBwB,ANeA,AUpBA,EFOhB,GFFR,GNeW,CAAX,EUpBA,EAAqC,CDEpB,EAAjB,ECF0C,WAA1C;AbvCR,AS6CK,ANgBG,AInBJhB,AKCI,AKZA,AJSA,ACLuC,ACG3C,ACfC,AdmDG,AS3BK,AQ7BT,ADKK,QlBvBT,CcmCQ,EKjBG,EhB2CE,ASlBA,AKZA,EjB/Bb,AawCe,AXkCA,CKhCCkB,AYxBZ,EnBlBJ,AiB+BQ,CLYW,AKZA,AEbA,CZwBf,CJmBI,AInBa,AQJA,AboCb,CCbc,EgB3ClB,CPyBI,CZ3CR,AesCI,EAAqC,CHKZ,CTkBrB,CUrBA,CAAwB,EITxB,GLYA,EAA+B,ACH/B,EAAiC,KAAK,OAAtC;AJOJ,ANeC,AInBGV,AKCI,AKZJ,AJSH,ACFA,ACAG,ACRJ,Ad4CC,AS3BI,AQ7BL,ADMI,WCNG,EFaE,AFOA,CRICQ,CEIF,CGHI,AMnBA,CXiBK,AYvBjB,CFaI,CCPA,CCNY,ADMA,IHcZ,EIpBJ,CJoBuB,KAAnB,EHK0B,OAAA,CMnB1B,MNmBQ,IAA0B,CAAC,OAAO,OAAtC,EAA+C;AHInD,ANhDR,AI4CQP,AKCQ,AKZR,AJUI,ACFA,ACDJ,ACRJ,Ad6CA,AS3BI,AQ7BJ,ADMI,SCNC,GNsBW,CNDC,AUTR,AFOA,AInBA,ADMA,ETqBE,AEEA,EEPH,AXkCK,AiBxDA,CFYT,AFOA,AInBJ,CNsBiC,AKhBlB,CTqBC,AU3BA,CR6BZ,CCLc,AVgClB,AgBlDI,CJcuB,CZoCD,AiBxDN,CV2BT,CAAW,ASrBA,CJcd,CFII,CAAa,AEJY,CIdjC,ECNJ,ADM4B,ETqBjB,AU3BmB,CPwBlB,CHGR,CU3BJ,EAAmC;AV4BlC,ANjDL,AI6CQI,AKCQ,AKZR,AJUA,ACFA,ACDH,ACRD,Ad6CI,AS3BH,AQ7BG,ADMI,Qf5BZ,ID8EY,Ce5CC,AJUA,CCFC,AKpBA,ChBtBd,ED8EiB,CC9EjB,AU4CQ,AMtBU,CFYV,CCNY,CLgBC,EKhBT,CAAY,CCNN,CjBwDN,EC9EZ,EU4CqB,CXkCU,AiBxDb,CjBwDV,AiBxDiB,CAAP,CjBwDgB,CYpCC,AKpBP,ADMO,ELgBd,CAAO,ACFpB,AId8B,ECNpB,CAAV,CNsBa,AKhBT,CLgBqB,KAAZ,CAAb;AJOJ,AFTiB,AKKR,AKZR,AJWG,ACHA,ACAJ,ACRA,Ad4CQ,AShFZ,AQwBQ,ADMC,KXaL,OSPK,CPgBI,CILC,ACHA,AKpBA,CJoBF,CFGI,EJKZ,AU5Bc,CjBwDC,CO5BiB,AILtB,EAAQ,GMvBJ,CjBwDQ,EAAP,CYpCU,AZoCA,EWjCf,AMvBI,CAAO,CAAP,CLoBgB,AZoCf,CiBxDS,CNuBQ,AXiCA,CAAjB,CAAP,EWjCJ,CMvBU,CLoBW,AKpBrB,CLoBmC,QAAd,CAAuB;ALS5C,AGHI,AKZR,AJUI,ACHI,ACAJ,ACRA,Ad4CC,ASjFT,AQyBQ,ADMH,KAjCU,GPEf,CMsCS,EAAE,CDDC,EHWE,AMvBA,CV4BC,AQfN,AHOM,ACAA,AJ7Cf,CEgDgB,CIVZ,ADDa,CLrCjB,CCkDmB,AKZgB,CRef,AMRA,CFGN,AMvBO,EPyBT,ADlDZ,CCkDwB,CHGT,CAAW,AILA,AGXlB,AGZkB,CJoBX,CAAa,ACRA,CJahB,CCFJ,CEHO,CAAiB,CDDoB,AKnB/B,CV4BN,AU5BmB,CV4BC,EMRE,GNQtB,CAAP,EU5B0B,OAAA,CJoBnB,AIpB0B,CJoBjC,CIpB0B,CAAU,CAAV,EAAa,CAAb,CAAb,CAAb;AV6BH,AFLDV,AKEK,AKZD,AJUA,ACHI,ACAP,ACRO,Ad6CJ,AiBxDA,ADMJ,WXgBOgB,AWhBH,ECNK,CFYC,AJUA,AXkCA,CYrCC,ODGO,AXkCA,EiBxDd,CZsBJ,AUVqB,AEZA,CZsBCd,CLkCC,CWlCC,EIVE,EEZL,GZsBrB,CLkCkB,CKlCeW,ELkCE,AiBxD/B,CZsBJ,CMAkB,CNAoB,AMAA,EXkClC,Ee5CiB,CJUsB,CIVvC,IJUc,CAAd;AJOJ,AGHI,AKbA,AJWA,ACP4C,ACIhD,ACTK,Ad6CD,AiBxDH,ADMG,SJUqB,CAArB,ECIC,CFGI,CKjBC,CNmBC,AV+BA,Ce5CC,CRgBF,EQhBN,AJWW,CIXC,CCNC,ChBkDC,CU/Bd,ACFA,CIXA,Af4CO,CAAU,Ce5CC,CJWC,CKjBC,EhBkDE,CAAL,CWjCjB,AKjBa,CAAY,CLiBW,AXiCV,Ce5CC,If4CpB,Ee5CP,Af4CiC,IgBlDpB,ChBkDyB,AgBlDtC,ChBkDiC,GAAS,KAAnC,CAAP;AO3BA,AFNAI,AKGH,AKZG,AJUI,ACHJ,ACAA,ACRA,Ad4CH,AiBvDD,ADMI,SCNC,IFYI,AHOA,ACAA,ACRA,AGXT,CZqBU,CEMC,ASrBA,CLgBC,EIVR,CAAW,CReC,ASrBA,CJaZ,ACAA,CDAc,ACAA,ACRd,CCCA,CAAgB,CReT,AOhBU,CPgBC,AILA,AKhBX,CJaY,ACAA,CEPnB,CJUQ,AGXR,AELqB,CLgBC,ACHtB,CIbA,CJawB,CIbC,CLgBjB,CAAJ,CJKG,CILsB,CJK7B,AMRA,ODAqC,GAAb,CAAiB,KAAK,GAAtB,CAAxB,EAAoD;ALSvD,AFNO,AKjDZ,AKwCQ,AJUQ,ACHJ,ACAJ,ACRA,Ad6CJ,AiBxDA,ADMQ,aDMC,AFOA,AbqCA,GgBlDG,GXeG,AOFA,AZqCf,CarCI,CAAa,AbqCM,CiBxDvB,CFYI,ACNe,CXeCX,COHoC,CDIlC,AEHlB,EGboB,CXeT,AYrBf,ADMmB,CXeX,ASVkB,AGXpB,ADMM,CAAJ,CLgBI,CAAiB,AKhBA,CCN7B,CHW+B,AGXpB,ENsBC,GMtBI,CHWZ,OGXO,EAAX;AV6BA,AFPK,AKlDT,AKyCK,AJUQ,ACHD,ACAJ,ACRH,Ad6CG,AiBxDJ,ADMY,QNnChB,CL8C0C,IMG9B,AEDC,EHhDb,AVqFe,GUrFf,CCmDmB,ACHA,CCAX,AbqCY,CarCC,CInBjB,CjBwDW,CarCP,AbqCgB,CarCC,CAAjB,EAAoB,CInBxB,ADMyB,CNnC7B,AVqFe,AiBxDL,EjBwDsB,CarCC,AInB7B,MDMY,CAAwB,ChBkDhC,GarCA,CGbqC,CAAL,CAAxB;ATuBZ,AQfA,AJSY,ACN4C,ACGvD,ACPD,Ad4CC,AiBvDD,ADKS,QCLL,CLeA,AKfC,EHWD,IGXO,EFYD,CEZL,CAAU,ONqBO,AMrBjB,CAAL,ENqBY,AMrBa,CNqBC,IAAd;AJOZ,AFPIY,AURA,AJSK,ACHR,ACCD,ACRI,Ad6CJ,AiBxDI,ADMI,OhBkDL,EAAE,GKpCGC,AQDA,CEPC,ADDA,Ad6CA,AiBxDA,IZoBL,AYpBA,ADMS,CHab,AbqCc,CKpCC,AURX,Af4CD,CarCmB,CbqCL,Cc7Cb,AELI,GFKa,Ad6CA,Kc7CjB,Ad6CsB,CAAvB,EAAH,EAA4C;AO3B5C,AFRQ,AURJ,AJSC,ACFL,ACAI,ACRH,Ad6CG,AiBxDH,ADMI,OTsBF,MAAH,AQhBS,AHOA,ELSU,AMTR,AbqCA,EKpCET,AODb,EAAuB,CCAP,AbqCA,CKpCR,AODR,AZqCW,EO5BX,AKTmC,CGP/B,CRgBiC,AFRhBS,AURA,AHQjB,CZoCkB,CarCX,AbqCA,CarCa,ERChB,CQDG,AbqCgB,CarCC,CEPxB,AHQQ,GZoCoB,CAAL,CarChB,CAAP,CDA+B,EAE/B,AZmCkC,CAAlC,OYnCQ,CAFuB,KAG/B,EAHJ,EAGM;ALOF,AFRI,AURP,AJUG,ACAA,ACHH,ACPD,Ad4CC,AiBvDD,ADKC,WCLM,EV2BE,AINA,CCAC,GPFGV,AMET,AMrBJ,CNqBc,AMrBA,EV2BV,CAAa,EAAb,CAAgB,AKNA,AKrBpB,EAAsB,ENqBlB,CCAqB,CLMrB,CFRI,CEQoB,EFRE,COEV,CAAY,EPFxB,EEQJ,MKNgB,CAAuB,IAAvB,CAAhB;ALOH,AFRI,AUPL,AJSC,ACCG,ACHJ,ACRA,Ad6CA,AiBxDI,ADzCO,CAAf,OhBiGQ,EAAE,EiBzDgB,EjByDZ,CAAN,CYlCQ,CZkCC,IAAI,CarCF,AbqCX,EAAJ,CYlCI,CZkC+B,EYlCX,KAApB;ALOJ,AQhBA,AJUQ,ACAJ,ACHA,ACRJ,Ad6CI,AiBxDA,ADOR,STqBS,ASrBT,KHYc,CNSV,AINmB,AXkCR,CYlCC,AKtBA,CV4BS,GINb,EAA+B,AXkCrB,AgBjDtB,CAAuB,ChBiDR,CO5BX,AMTqB,AbqCA,CgBjDzB,CTqBsC,AKN9B,CIfoB,EJeE,ACHA,AbqCA,CAAL,EgBjDzB,CHYyB,AbqCS,AiBxDlB,CLsBR,ACH2B,AbqCpB,AgBjDkB,EhBiDI,IiBxDrB,CjBwD0B,AiBxDpB,CjBwDe,GAAS,CarCrB,AbqCV,CAAP,AiB1DkB,CJqBlB;ANUA,AFpBkC,AUItC,AJUI,ACAA,ACHA,ACPJ,Ad4CC,AiBxDG,ADOJ,KXCA,GWDI,GFKA,EPgBK,AU5BA,CJmBC,CInBN,ADOO,CLeC,ACAA,CKtBO,GV4Bf,ASrBA,CTqBa,CINC,AEHe,EAA7B,CNSA,AKNA,AIfiB,CTqBC,AINlB,MJMA,CSrBA,CTqB0B,GSrBG,KTqB7B,ESrBoC,KAApC,IAA6C,OAAO,KAAxD,EAA+D;ATsB9D,AFTJ,AUNG,AJSQ,ACAJ,ACFA,ACRA,Ad6CJ,AiBzDQ,ADOJ,CXZR,OUkBQ,Af4CA,EAAE,GarCG,ACRA,Cd6CC,CAAN,AgBlDO,CDMX,AHSY,CDAC,AXmCA,AiBzDA,CHYT,CCCQ,AFOG,ECRE,Ad6CA,CYnCb,AEVA,Ad6CA,CYnCe,CDAX,AXmCR,AgBlDW,CHaP,AIpBI,CjByD2B,AiBzDb,ELsBE,CAApB,ACFqB,EDEE,AIfhB,CAAO,IJec,AIfrB,CJeP,ACFA,AGbmB,EHaY,GGbxB,CAAP,CCPkB,OAAA,CAAM,IAAN,CAAW,EAAX,CAAd;AV8BR,AQhBI,AJSQ,ACAR,ACFI,ACRJ,Ad6CA,AiBzDI,ADOP,aFKQ,ECCE,Af4CA,CYnCC,CKtBC,CJoBC,EEPE,CJSC,AGVb,CFUA,AZmCc,CYnCC,AKtBX,CHYY,Ad6CT,CWnCC,AEFS,AbqCA,Ce5CV,AJSW,ACAA,CGTC,AHSnB,ACFI,EDEiB,AEVrB,Cd6CsB,CarCC,AbqCN,CYnCO,CAAxB,CDAQ,AXmCkB,Ce5C1B,Af4CO,EWnCsB,AXmCA,CWnCC,AEFA,IbqCI,CWnCC,AXmCN,GarCN,AbqCe,CWnCR,AXmCvB,CWnCiC,AEFpC,AbqCJ,QWnCQ;AJQZ,AQhBC,AJMG,ACGA,ACFC,ACRD,Ad6CH,AiBzDI,ADQL,WAAO,EFIE,GFUG,AIdZ,EFII,OFUA;ALQJ,AQhBA,AJSC,ACAG,ACDA,ACTH,Ad8CD,AiBjEsB,ADezB,KCfG,GFoBI,KFQK,AbqCA,EAAE,Ce7CX,AHSY,CGTC,Ef6CE,CAAN,Ee7CT,AHSI,AZoCc,Ee7CS,AFQvB,EbqCkB,CarCC,AbqCd,EAAT,EAAwC,CarCpC;ANUJ,AQjBI,AJUI,ACDP,ACDG,ACRJ,Ad6CI,AiB1DP,ADSD,QTqBQ,CSrBR,GAAA,CDIa,AFQA,AGZA,ETqBT,AOjBQ,Ad6CG,GO5BA,AMTP,AGZR,CDIQ,CAAY,ACJQ,ELcE,AXmCR,EAAP,CAAU,CgBjDzB,CLcY,CIVJ,ACJkC,CLcQ,CXmCpB,Ce7CC,Af6CN,GAAS,CAAnB,Ce7CP,Cf6C6B,KAAK,CAAL,GAAS,CAA/B,CAAP;AO3BA,AQjBH,AJUG,ACAJ,ACFC,ACRG,Ad6CH,AiBzDL,ADQI,SCRJ,EDQY,EFIC,EPiBE,AKPA,CDAC,CCAZ,CEVI,AGZR,ADQmB,CJcQ,CLOP,COjBC,AGZrB,CNsBsB,AGVA,CAAd,AEJI,CTqBG,CAAU,AKPrB,AId8B,CLc1B,CCAmC,EACnC,GLMA,CSrBI,CAA+B,GJe3B,GIfJ,EAAuC,EJcR,CId/B,CJgBJ,AIhBJ,QJgBY,CAF2B,KAGnC,EAHJ,EAGM;ALKL,AQhBD,AJSQ,ACGJ,ACJJ,ACTI,Ad8CJ,AiB1DA,ADQH,QDKO,Cf6CC,EAAE,AiB1DA,EFaP,AFQS,ACTA,CFaC,CZiCC,AiB1DA,CFaF,CJSI,CEDb,EAA6B,AbqCb,Cc9CZ,Ad8CC,CiB1DE,CjB0DY,AiB1DA,CNsBX,ACGY,AEbA,Gd8CG,EYjCE,AEbrB,Gd8CwB,CAAvB,CiB1DyB,CLyBV,AZiCpB,CYjCgC,CZiCc,IiB1DT,KLyBjB,CAAuB,IAAvB,CAAhB,KKzB0B,CAAwB,kBAAxB,EAA4C,OAA5C,CAAvB,CAAP;AV+BA,AQjBI,AJSQ,ACIR,ACLA,ACTA,Ad8CA,AiB1DP,ADSD,QTqBQ,CSrBR,GTqBI,COlBS,EPkBD,AQjBG,Af6CA,CYhCC,EEdR,ECCY,CJSC,CXoCC,EAAP,CWpCC,ACIR,AZgCiB,AgBjDzB,CDIe,AJSW,AKbA,CDIC,CHaC,GIjB5B,CDIQ,Af6CiB,CYhCjB,AIjB6B,CLarB,CXoCS,CAAI,CWpCQ,CAAC,GXoCJ,CAAL,CWpCc,EXoCL,CAAb,CWpCa,AXoCvB,CWpCiC,CXoCN,OWpC1B,AXoC0B,GAAA,CAAI,KAAK,CAAL,GAAS,CAAb,CAA3B,CAAP;AO3BA,AQjBH,AJSW,ACIR,ACLA,ACTH,Ad8CA,AiBzDL,ADQI,SCRJ,CDQU,IHYI,CNSC,CKJC,CIjBC,ECRjB,CV6BoB,EU7BpB,CDQuB,CTqBR,CAAU,AMTA,EDKjB,ELIA,CKJsB,ACLA,IAAL,AGZR,CJiBT,ACL2B,CGZ/B,eHYqB,EAAjB;ANUH,AQjBD,AJUQ,ACGJ,ACJA,ACTJ,Ad8CA,AiB1DA,ADQA,QDII,EEZE,ADQA,CFIF,ECAJ,AFSS,CETC,Cf8CF,CYjCI,CDHC,CKdC,CDId,AFSe,EETQ,AEZN,CDQC,CLcV,ECGJ,ACJA,GIrBoB,ADQA,CHaC,OIrBR,ADQC,CHad,AIrB6B,EJqBE,EGbE,CAAvB,CCRG,CACZ,ADOmC,CAA1B,CAAd,ICRiB,CACL,CADK,EAEZ,KAFY,CAEN,GAFM,EAGZ,MAHY,CAGL,OAHK,EAIZ,GAJY,CAIP,KAAD,IAA8B;AV0BvC,AQjBI,AJUI,ACGJ,ACJI,ACTJ,Ad8CA,AiBtDI,ADIR,QTqBI,ESrBE,ETqBN,CAAS,AQjBA,ADAA,CGRK,CjBsDH,AiBtDK,CLqBJ,CDHC,AKdA,CTqBb,AOjBI,AGRU,CFQV,AHaA,CLIU,AQjBE,AHaA,AKrBK,CHQJ,AEJA,CFIb,CHUI,ACGW,CAAf,CGbA,AERU,CLqBQ,AZiCA,CgBlDC,CDIC,CHaC,AKrBM,CLqB3B,CZiCuB,CYjCC,AZiCA,Ce9CxB,CCJa,CCJoB,CDIxB,ChBkDoB,CYjC7B,AIjB8B,CAArB,CJiBuB,AKrBL,ADI/B,CJiBI,AKrBuC,CjBsDL,CYjCC,AZiCA,CiBtDR,CAAvB,EjBsDJ,GYjCmC,GAAnC;ALKA,AQjBH,AJUW,ACGR,ACJI,ACTJ,Ad8CH,AiBtDO,ADIR,UAAM,GTqBG,AOjBA,CGRK,ELqBF,CLIR,ASrBS,CTqBC,CMRC,CIjBK,CNkBH,AGVb,AEJa,CTqBb,EOjBgB,CPiBC,AIPT,ACGR,CDHkB,CEDd,AGbe,CHaC,ACTpB,CGRyB,CVyBzB,IIPQ,AEDkB,AIjBV,CAAZ,ADIS,EAAJ,EAAsB,CAAtB,CHawB,AGbrC,EHawB,CAAhB;ANSP,AQhBD,AJSY,ACGR,ACJC,ACTD,Ad+CJ,AiBtDQ,ADGR,SDKK,CCLC,ECHM,CFQZ,ADDS,Ad+CH,Ee9CW,CHYL,EKpBM,EHOd,AEJY,CCHJ,CLoBR,AKpBI,EAAgB,ADGJ,MAAM,UAAN,EAAJ,EAAwB,CAAxB,CAAhB;ATuBA,AQjBI,AJUI,ACEP,ACJA,ACTA,Ad+CG,AiBtDQ,ADGZ,QTsBI,EStBE,ITsBN,CQjBW,Af8CA,EO7BD,AIPG,AXoCA,CiBtDK,EFQF,Af8CA,AgBnDA,ECHM,CNkBd,CKfY,CDKT,Af8CU,Ce9CC,Af8CX,CiBtDO,CjBsDM,AiBtDI,EFQjB,ACLe,CDKC,Af8CA,Ie9ChB,CAAP,Af8C4B,CAArB,EAAP,CgBnDgB,EAAJ,EAAwB,CAAxB,CAAhB,CCH+C,GAAG,sBAAsB,KAAK,MAAM,GAAG,GAApE,CAAN;AV0BR,AQjBH,AJUO,AChFZ,AC+EY,ACTR,Ad8CC,AiBtDQ,ADGT,UAAM,KTsBK,AOjBH,EHUK,CEDM,ENQH,GIPR,CJOG,CAAU,AStBA,IAAI,ETsBrB,IStB2B,eAAN,EAAJ,EAA6B,CAA7B,CAArB;ATuBC,AQhBD,AJSY,ACjFhB,ACgFQ,ACTA,Ad1ER,AiBmEY,ADGR,QJnEJ,GImEW,CDKF,CDDI,CDSC,AGbA,CJnEd,AKgEmB,CAAE,ELhErB,AEuEQ,AEJU,CCHC,ENiBE,AGVA,AGPK,CHOJ,AEJA,CFId,CGPW,CNiBH,AEDS,AIhBb,CNiBc,CKdC,GJnE3B,ACgF8B,CGbC,GLcf,AEDS,CAAU,AGbA,IAAI,IAAI,IHalB,AGbsB,EHavC,KGb8C,IAAI,OAAO,IAAI,YAAY,EAA7E;ATsBA,AQhBI,AJSQ,AEDR,ACTA,AdzEG,AiBkEF,ADGR,KChBoB,CAAjB,CjBrDO,CO0FH,GP1FG,EcyEE,CPiBT,AMRU,AblFI,CO0FH,AQhBA,KRgBX,AQhBgB,CDDZ,AdzEiB,CO0FL,CP1FF,CcyEM,AdzEI,CakFY,AblFtB,Ce0EH,CAAY,AFQnB,AblFuB,CcyEvB,AdzEU,CAAP,Ge0EI,EAAP;ARiBA,AQhBH,AJUO,AEDJ,ACVA,Ad5ER,AiBsEI,ADGJ,QhBzEA,CgByEA,ECHW,EVuBE,AMPA,ACVA,Ed5Eb,AiBsEe,ADGf,CAAgB,CToBR,AINS,CJMC,AP7FlB,AiBsEW,CJgBQ,AIhBgB,CHM3B,CEHR,ELcY,AKdiB,CToBrB,AP7FR,CasFQ,ENOmB,AUvBhB,CAAP,CJgByB,GNOrB,KMPA,EAA+B;ANQlC,AQfD,AJSQ,AEDA,ACVP,AGNJ,ADGG,WDKI,ACLG,MLcM,EEDE,IFCP,KKdgB,CHahB,GGboB,IAAJ,CAAS,KAAT,CAAjB,MAAsC,KAA7C;ATsBA,AQhBI,AJSQ,AEDJ,ACTR,AEJH,YFIQ,GPiBG,AQhBG,KAAK,CJSC,AEDA,IFCL,CITD,AJSW,CITC,CFQC,EFCZ,AEDJ,CERG,EAAP,CFQ0B,OAAO,QAAP,EAAtB;ANSJ,AQhBH,AJSW,AEDP,ACTD,aAAK,EPiBE,KAAK,COjBZ,GPiBO,AOjBS,CPiBC,GOjBjB,KPiBO,EAAP;AACH,AQfD,AJSQ,AEDJ,ACVH,WCEG,EFQK,IFCI,IEDT,CAAc,CFCV,OEDJ;ANSJ,AQhBI,AJSI,AEDP,ACTD,YPiBK,GQhBM,EJSE,GITG,MAAL,CAAY,CJSf,GITG,EAAP;ARiBA,AQhBH,AJSW,AEAJ,ACVR,aDUiB,ENON,KAAK,CIPC,AEAT,EAAgC,CNO7B,CAAU,AIPT,CAAU,IJOX,AIPC,EJOR;AACH,AQfD,AJQY,AEAR,ACVJ,cDUU,CERF,CFQI,OAAF,KAAc,IAApB;ANSJ,AQhBI,AJSI,AEAJ,ACVI,cAAO,CCCJ,CFSC,GAAR,CETY,AFSA,KAAK,CETV,CAAY,QAAZ,EAAP,EFSY,GAAsB,CAAlC,EAAqC,QAArC;ANQJ,AQhBC,AJSO,AECJ,ACXA,YDWI,ACXA,KAAK,GDWG,IAAR,GAAe,CCXf,IDWoB,ACXA,KAAK,KDW7B,EAAoC,KCXpC,EAA2C;APkB/C,AQfA,AJnBI,AE4BI,ACXA,YCEH,QFSW,ACXA,IAAR,CAAa,CDWb,CAAe,KAAK,cAApB,SCXA;APmBR,AQhBI,AJQH,AECI,ACXG,eCEG,CRgBC,COlBC,GPkBb,AQhBgB,ERgB4B,GOlBpC,CCEG,CAAY,CDFC,ICEb,ADFH,EPkBgD,AQhBpD,CRgBJ,EAAyD;AACrD,AQhBH,AJSO,AEAP,ACXO,aPkBC,GIPW,CJOhB,CAAU,GIPN,EAA6B,EJOjC,CAAkB,IAAlB,EAAwB,SAAxB;AACH,AQfD,AJQI,AEtGR,AC2FS,WCGD,EJQK,KAAL,GAAa,SAAA,OAAA,CAAO,IAAP,CAAY,KAAZ,CAAb;AJSJ,AQhBI,AJQA,AEvGR,AC6FQ,QPkBA,AM/GR,KFuGa,AGVA,CPkBT,CQhBW,AF/Ff,CN+G6B,CIRrB,CAAU,AEvGlB,CC6FQ,CCEY,GDFG,GCER,CAAY,AF/F3B,CFuGQ,AGVoB,GCEb,EAAP,ADFA;APmBA,AQhBH,AJQA,AGVG,aAAK,EPkBE,KAAK,COlBZ,CAAc,EPkBP,CAAU,COlBjB,CAAmB,CPkBZ,CAAc,EOlBrB,EAAyB,EPkBlB,CAAP;AACH,AQfD,AJjGJ,AG8FY,eCGA,GDHM,KAAK;APoBnB,AQhBI,AJlGR,AG6FiC,QH7FjC,CG6FQ,EPqBG,IQhBI,AJlGf,EJkHI,CIlHJ,CJkHgC,CQhBZ,MAAL,CAAY,MJlG3B,EIkGe,EAAP;ARiBA,AQhBH,ADHA,YPmBO,kBAAkB,IAAlB,IAA0B,KAAK,QAAL,CAAc,MAAd,CAA9B,EAAqD;AACjD,AQfR,ADHQ,aAAM,MPkBC,KAAP;AACH,AQfL,ADHI,YAAI,CAAC,KAAK,SAAV,EAAqB;APoBrB,AQhBJ,ADHQ,ePmBG,KAAK,YAAL,CAAkB,MAAlB,IAA4B,CAAnC;AACH,AQfD,ADJK,uBCIW;ARiBhB,AQhBI,ADHA,eCGO,ERgBE,GQhBG,GRgBhB,EAAkC,GQhBvB,CAAc,CDHC,KAAK,MAA3B,ICGO,EAAP;ARiBA,AQhBH,ADFG,YAAI,CAAC,CPkBC,IOlBI,QAAV,CPkBmB,COlBC,IPkBI,IAAL,CAAU,QAAV,CAAmB,MAAnB,CAAnB;AAEA,AQhBJ,ADHQ,YPmBA,AQhBA,KDHK,GCGb,EAAwB,EDHhB,MPmBkB,IAAtB,EAA4B;AACxB,AQhBJ,ADHC,eCGM,IRgBI,CQhBC,QAAL,CAAc,GRgBG,IQhBjB,CRgBsB,AQhBA,QAAtB,CAAP,IRgBwB,CAAmB,MAAnB,CAApB;AACH,AQhBJ,ADHA;APqBG,AQhBJ,ADrHJ,ePqIe,IQhBC,MRgBR;AACH,AQhBG,ADtHR,QAAA,OCsHe,ADtHf,GAAA,ECsHoB,QAAL,ADtHf,CCsH6B,YAAd,EAAP;ARkBJ,AQjBC;ARkBD,AQhBA;ARiBA,AQhBA;ARkBA,AQjBA,qBRiBc;AACV,AQhBJ,eRgBW,IQhBC,CRgBI,MAAL,CAAY,cAAZ,EAAP;AACH,AQhBG,aAAK,WAAL,CAAiB,YAAjB,CAA8B,KAAK,MAAnC;ARkBJ,AQjBC,uBRiBkB,GAAnB,EAA6B;AACzB,AQhBJ,eRgBW,KAAK,MAAL,CAAY,kBAAZ,CAA+B,GAA/B,CAAP;AACH,AQhBD;ARkBA,AQjBA,WRiBO,MAAP,EAAmB;AACf,AQhBJ,eRgBW,AQhBH,KRgBQ,MAAL,CAAY,MAAZ,CAAmB,MAAnB,CAAP;AACH,AQhBG,eAAO,KAAK,KAAL,CAAW,QAAX,EAAP;ARkBJ,AQjBC,eRiBU,MAAX,EAAuB;AACnB,AQhBJ,aAAS,ERgBE,GQhBX,ERgBgB,AQhBa,MRgBlB,CAAY,UAAZ,CAAuB,MAAvB,CAAP;AACH,AQhBG,eAAO,KAAK,KAAL,CAAW,gBAAX,CAA4B,KAA5B,CAAP;ARkBJ,AQjBC,kBRiBa,MAAd,EAA0B;AACtB,AQhBJ,eRgBW,KAAK,MAAL,CAAY,aAAZ,CAA0B,MAA1B,CAAP;AACH,AQhBD;ARkBA,AQjBA;ARkBA,AQhBA,aAAM;ARiBN,AQhBI,eAAO,KAAK,QAAL,CAAc,cAAd,EAAP;ARkBJ,AQjBC,cRiBS,MAAV,EAAsB;AAClB,AQhBJ,aRgBS,SAAL,AQhBc,CRgBC,GQhBnB,EAA4B,IRgBxB,CAAyB,MAAzB;AACH,AQhBG,eAAO,KAAK,QAAL,CAAc,iBAAd,CAAgC,IAAhC,CAAP;ARkBJ,AQjBC,aRiBQ,MAAT,EAAqB;AACjB,AQjKR,eRiKe,KAAK,SAAL,CAAe,QAAf,CAAwB,MAAxB,CAAP;AACH,AQlKL,QAAA,OAAA,GAAA,IAAA;ARoKI,eAAW,MAAX,EAAuB;AACnB,eAAO,KAAK,SAAL,CAAe,UAAf,CAA0B,MAA1B,CAAP;AACH;AAED,cAAU,MAAV,EAAsB;AAClB,eAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAP;AACH;AAED,cAAU,MAAV,EAAsB;AAClB,eAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAP;AACH;AAED;AACA;AACA;AAEA,QAAI,GAAJ,GAAO;AACH,eAAO,KAAK,MAAL,CAAY,GAAnB;AACH;AACD,QAAI,GAAJ,CAAQ,KAAR,EAAa;AACT,aAAK,MAAL,CAAY,GAAZ,GAAkB,KAAlB;AACH;AAED,QAAI,QAAJ,GAAY;AACR,eAAO,KAAK,MAAL,CAAY,QAAnB;AACH;AACD,QAAI,QAAJ,CAAa,KAAb,EAAkB;AACd,aAAK,MAAL,CAAY,QAAZ,GAAuB,KAAvB;AACH;AAED,UAAM,KAAN,EAAmB;AACf,eAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,CAAP;AACH;AAED,WAAI;AACA,eAAO,KAAK,MAAL,CAAY,IAAZ,EAAP;AACH;AAED;AACA;AACA;AAEA,SAAK,GAAL,EAAe;AACX,eAAO,KAAK,QAAL,CAAc,IAAd,CAAmB,GAAnB,CAAP;AACH;AAED;AACA;AACA;AAEA,WAAO,OAAP,EAAwC;AACpC,eAAO,KAAK,QAAL,CAAc,MAAd,CAAqB,OAArB,CAAP;AACH;AAhNL;AAAA,QAAA,OAAA,GAAA,IAAA","file":"main.78ec9bba.map","sourceRoot":"../demo","sourcesContent":["export default class Emitter {\n\n    private listeners = new Map<string, Listener[]>();\n\n    on(signal: string, listener: Listener) {\n        if (!this.listeners.has(signal)) {\n            this.listeners.set(signal, []);\n        }\n\n        this.listeners.get(signal).push(listener);\n    }\n\n    emit(signal: string, argument: any) {\n        const listeners = this.listeners.get(signal);\n\n        if (!listeners) {\n            return;\n        }\n\n        for (const listener of listeners) {\n            listener(argument);\n        }\n    }\n\n}\n\nexport type Listener = (event: any) => void;\n","enum Stat {\n    ESCAPE_ACCELERATION,\n    FRICTION,\n    HUNT_ACCELERATION,\n    MAX_BITE_SIZE,\n    MAX_RADIUS,\n    MITOSIS_MIN_RADIUS,\n    VISION_RANGE,\n    MAX_VELOCITY,\n}\n\nexport default Stat;\n","import Stat from '../stat';\nimport World from '../world';\nimport { IEnergySource } from './diet';\nimport Cell from './index';\n\nexport default class CellBehavior {\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    tick(map: World) {\n        const entities = this.cell.getVisibleEntities(map);\n\n        for (const entity of entities) {\n            if (entity instanceof Cell) {\n                this.interactWithCell(entity);\n            }\n        }\n\n        this.cell.move();\n    }\n\n    interactWithCell(other: Cell) {\n        const isTouching = this.cell.isTouching(other);\n\n        if (this.cell.canEat(other)) {\n            if (isTouching) {\n                this.cell.eat(other);\n            } else {\n                this.hunt(other);\n            }\n        } else if (other.canEat(this.cell)) {\n            this.escapeFrom(other);\n        }\n    }\n\n    hunt(target: Cell) {\n        const force = this.cell.getStat(Stat.HUNT_ACCELERATION);\n        const direction = target.pos.sub(this.cell.pos);\n        const push = direction.setMagnitude(force);\n\n        this.cell.shove(push);\n    }\n\n    escapeFrom(target: Cell) {\n        const force = this.cell.getStat(Stat.ESCAPE_ACCELERATION);\n        const direction = target.pos.sub(this.cell.pos);\n        const push = direction.setMagnitude(force);\n\n        this.cell.shove(push);\n    }\n}\n","export const PI = Math.PI;\nexport const TAU = Math.PI * 2;\n\nexport const abs = Math.abs;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sqrt = Math.sqrt;\nexport const pow = Math.pow;\n\nexport function random(min?: number, max?: number) {\n    if (arguments.length === 0) {\n        return Math.random();\n    } else if (arguments.length === 1) {\n        max = min;\n        min = 0;\n    }\n\n    return Math.round(Math.random() * (max - min)) + min;\n}\n\n//\n// Round\n//\n\nconst roundOperators = [ 1, 10, 100 ];\n\nfunction getRoundOperator(digits: number) {\n    while (roundOperators.length < digits + 1) {\n        roundOperators.push(Math.pow(10, roundOperators.length + 1));\n    }\n\n    return roundOperators[digits];\n}\n\nexport function round(value: number, decimals = 2) {\n    if (decimals === 0) {\n        return Math.round(value);\n    }\n\n    const operator = getRoundOperator(decimals);\n    return Math.round(value * operator) / operator;\n}\n","import { pow, sqrt } from '../math';\nimport Stat from '../stat';\nimport Cell from './index';\nimport CellState from './state';\n\nexport default class CellBody {\n\n    get isAlive() {\n        return this.state.isAlive;\n    }\n\n    get size() {\n        return this.state.size;\n    }\n    set size(value: number) {\n        this.state.size = value;\n\n        if (value === 0) {\n            this.die();\n        }\n    }\n\n    get energy() {\n        return pow(this.state.size, 2) * Math.PI;\n    }\n    set energy(value) {\n        this.state.size = sqrt(value / Math.PI);\n    }\n\n    constructor(\n        private cell: Cell,\n        private state: CellState,\n    ) {\n        this.state.isAlive = true;\n        this.state.size = 1;\n    }\n\n    canMitos() {\n        const minSize = this.cell.getStat(Stat.MITOSIS_MIN_RADIUS);\n\n        return this.size > minSize;\n    }\n\n    mitos() {\n        const minSize = this.cell.getStat(Stat.MITOSIS_MIN_RADIUS);\n        const childCount = Math.floor(this.size / (minSize / 2));\n        const childEnergy = this.energy / childCount;\n        const children = [];\n\n        for (let i = 0; i < childCount; i++) {\n            const child = new Cell();\n            child.energy = childEnergy;\n            this.inherit(child);\n            children.push(child);\n        }\n\n        this.cell.emit('mitos', children);\n        this.die();\n\n        return children;\n    }\n\n    die() {\n        this.state.isAlive = false;\n        this.cell.emit('die', this.cell);\n    }\n\n    private inherit(child: Cell) {\n        child.setParent(this.cell);\n    }\n\n}\n","import { round } from '../math';\nimport Stat from '../stat';\nimport Cell from './index';\n\nexport default class CellDiet {\n\n    private types = new Map<IEnergySourceConstructor, number>();\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    addType(Type: IEnergySourceConstructor, weight: number) {\n        this.types.set(Type, weight);\n    }\n\n    eat(target: IEnergySource) {\n        if (!this.cell.canEat(target)) {\n            throw new Error(`Invalid food source: ${target}`);\n        }\n\n        const selfEnergy = this.cell.energy;\n        const targetEnergy = target.energy;\n        const nutrition = this.consider(target);\n        const maxBitePercent = this.cell.getStat(Stat.MAX_BITE_SIZE);\n        const maxBite = selfEnergy * maxBitePercent;\n        const bite = targetEnergy > maxBite ? maxBite : targetEnergy;\n\n        target.energy -= bite;\n        this.cell.energy += bite * nutrition;\n        this.cell.emit('eat', target);\n\n        return true;\n    }\n\n    consider(target: IEnergySource) {\n        const Type = target.constructor as IEnergySourceConstructor;\n\n        return this.types.get(Type) || 0;\n    }\n\n}\n\nexport interface IEnergySource {\n    energy: number;\n}\n\nexport interface IEnergySourceConstructor {\n    new (): IEnergySource;\n}\n","import { abs } from './math';\n\nexport default class Vector {\n\n    static ZERO = Vector.of(0, 0);\n\n    static of(x: number, y: number) {\n        return new Vector(x, y);\n    }\n\n    static from({ x = 0, y = 0 }: IVectorSetter) {\n        return new Vector(x, y);\n    }\n\n    static apply(action: (...values: number[]) => number, ...vectors: IVector[]) {\n        return Vector.of(\n            action(...vectors.map((vector) => vector.x)),\n            action(...vectors.map((vector) => vector.y)),\n        );\n    }\n\n    static range({ x = 0, y = 0 }: IVectorSetter) {\n        return this.iterate(Vector.of(x, y));\n    }\n\n    static *iterate(vectorA: IVector, vectorB: IVector = new Vector(0, 0)) {\n        const start = this.apply(Math.min, vectorA, vectorB);\n        const end = this.apply(Math.max, vectorA, vectorB);\n\n        for (let x = start.x; x < end.x; x++) {\n            for (let y = start.y; y < end.y; y++) {\n                yield start.add({ x, y });\n            }\n        }\n    }\n\n    constructor(\n        readonly x: number,\n        readonly y: number,\n    ) {\n        if (isNaN(x) || isNaN(y)) {\n            throw new Error(`Creating vector with NaN: ${this}`);\n        }\n    }\n\n    get isZero() {\n        return this.x === 0 && this.y === 0;\n    }\n\n    private _magnitude: number;\n\n    get magnitude() {\n        if (this.isZero) {\n            return 0;\n        }\n\n        if (!this._magnitude) {\n            this._magnitude = Math.hypot(this.x, this.y);\n        }\n\n        return this._magnitude;\n    }\n\n    get radians(): number {\n        if (this.isZero) {\n            return 0;\n        }\n\n        const { x, y } = this;\n        let arctan = Math.atan(y / x);\n\n        if (arctan < 0) {\n            arctan += Math.PI;\n        }\n\n        if (y < 0 || (y === 0 && x < 0)) {\n            arctan += Math.PI;\n        }\n\n        return arctan;\n    }\n\n    setMagnitude(value: number) {\n        if (this.magnitude === 0) {\n            return Vector.of(value, 0);\n        }\n\n        const ratio = this.magnitude / value;\n        return Vector.of(this.x / ratio, this.y / ratio);\n    }\n\n    distance(target: Vector) {\n        return this.sub(target).magnitude;\n    }\n\n    is({ x = this.x, y = this.y }: IVectorSetter) {\n        return this.x === x && this.y === y;\n    }\n\n    sub({ x = 0, y = 0 }: IVectorSetter) {\n        return Vector.of(this.x - x, this.y - y);\n    }\n\n    add({ x = 0, y = 0 }: IVectorSetter) {\n        return Vector.of(this.x + x, this.y + y);\n    }\n\n    multiply({ x = 1, y = 1 }: IVectorSetter) {\n        return Vector.of(this.x * x, this.y * y);\n    }\n\n    diff({ x = this.x, y = this.y }: IVectorSetter) {\n        return Vector.of(abs(this.x - x), abs(this.y - y));\n    }\n\n    toString() {\n        return `[Vector(${this.x}, ${this.y})]`;\n    }\n\n    toJSON() {\n        return { x: this.x, y: this.y };\n    }\n\n}\n\nexport interface IVector {\n    x: number;\n    y: number;\n}\n\ninterface IXVector {\n    x: number;\n    y?: number;\n}\n\ninterface IYVector {\n    y: number;\n    x?: number;\n}\n\nexport type IVectorSetter = IXVector | IYVector;\n","import Stat from '../stat';\nimport Vector from '../vector';\nimport Cell from './index';\nimport CellState from './state';\n\nexport default class CellPhysic {\n\n    private shoves: Vector[] = [];\n\n    constructor(\n        private cell: Cell,\n        private state: CellState,\n    ) {\n        state.pos = Vector.ZERO;\n        state.velocity = Vector.ZERO;\n    }\n\n    get pos() {\n        return this.state.pos;\n    }\n    set pos(value: Vector) {\n        this.state.pos = value;\n    }\n\n    get velocity() {\n        return this.state.velocity;\n    }\n    set velocity(value: Vector) {\n        this.state.velocity = value;\n    }\n\n    shove(force: Vector) {\n        const maxSize = this.cell.getStat(Stat.MAX_RADIUS);\n        const size = this.cell.size;\n        const weight = 1 - Math.max(size / maxSize, 0);\n        const modification = force.multiply({ x: weight, y: weight });\n\n        this.shoves.push(modification);\n    }\n\n    friction(velocity = this.velocity) {\n        const friction = this.cell.getStat(Stat.FRICTION);\n        const maxSize = this.cell.getStat(Stat.MAX_RADIUS);\n        const { size } = this.cell;\n        const frictionFactor = 1 - friction;\n        const sizeFactor = size / maxSize;\n        const factor = frictionFactor * 0.5 + sizeFactor * 0.5;\n\n        this.velocity = velocity.multiply({ x: factor, y: factor });\n    }\n\n    move() {\n        const maxVelocity = this.cell.getStat(Stat.MAX_VELOCITY);\n        let velocity = this.velocity;\n\n        for (const shove of this.shoves) {\n            velocity = velocity.add(shove);\n        }\n\n        if (velocity.magnitude > maxVelocity) {\n            velocity = velocity.setMagnitude(maxVelocity);\n        }\n\n        this.shoves.length = 0;\n        this.pos = this.pos.add(velocity);\n\n        this.friction(velocity);\n    }\n\n}\n","import Cell from './index';\n\nexport default class CellRelations {\n\n    private parents = new Set<Cell>();\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    setParent(target: Cell) {\n        this.parents.add(target);\n    }\n\n    isFamily(target: Cell) {\n        return (\n            this.isChildOf(target) ||\n            this.isParentOf(target) ||\n            this.isSibling(target)\n        );\n    }\n\n    isParentOf(target: Cell) {\n        return target.isChildOf(this.cell);\n    }\n\n    isChildOf(target: Cell) {\n        return this.parents.has(target);\n    }\n\n    isSibling(target: Cell) {\n        for (const parent of this.parents) {\n            if (target.isChildOf(parent)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n","import { PI, random, TAU } from '../math';\nimport Cell from './index';\n\nexport default class CellRenderer {\n\n    color = '#' + random(0, 0xFFFFFF)\n        .toString(16)\n        .padStart(6, '0');\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    render(context: CanvasRenderingContext2D) {\n        const {\n            pos,\n            velocity,\n            size,\n        } = this.cell;\n\n        /* tslint:disable-next-line:no-bitwise */\n        const radius = size | 0;\n        const padding = radius * 0.;\n\n        context.save();\n        context.translate(pos.x, pos.y);\n        context.rotate(velocity.radians - TAU / 4);\n\n        context.fillStyle = this.color;\n\n        context.beginPath();\n        context.arc(0, 0, radius, 0, TAU);\n        context.fill();\n        context.moveTo(radius, padding);\n        context.lineTo(0, radius * 1.5 + padding);\n        context.lineTo(-radius, padding);\n        context.closePath();\n        context.fill();\n\n        context.restore();\n    }\n\n}\n","import Stat from '../stat';\nimport World from '../world';\nimport Cell from './index';\n\nexport default class CellSenses {\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    getVisionRange() {\n        return this.cell.size + this.cell.getStat(Stat.VISION_RANGE);\n    }\n\n    getVisibleEntities(map: World) {\n        // TODO: Use getVisionRange();\n        const visionRange = this.cell.getStat(Stat.VISION_RANGE);\n        const entities = map.getEntitiesIn(this.cell.pos, visionRange);\n\n        return entities.filter((entry) => entry !== this.cell);\n    }\n\n    canSee(target: Cell) {\n        const borders = this.cell.size + target.size;\n        const distance = this.cell.pos.distance(target.pos);\n        const visionRange = this.cell.getStat(Stat.VISION_RANGE);\n\n        return distance - borders <= visionRange;\n    }\n\n    isTouching(target: Cell) {\n        const distance = this.cell.pos.distance(target.pos);\n        const minDistance = this.cell.size + target.size;\n\n        return distance <= minDistance;\n    }\n\n    considerFight(target: Cell) {\n        return this.cell.size - target.size;\n    }\n\n}\n","exports.buffer = function buffer(Class) {\n    const bufferProps = Class._bufferProps = Class._bufferProps || [];\n\n    Class._isDoubleBuffer = true;\n\n    Object.assign(Class.prototype, {\n\n        getState() {\n            const prev = {};\n\n            for (const { prop, state } of bufferProps) {\n                prev[prop] = this[state];\n            }\n\n            return prev;\n        },\n\n        setState(newState) {\n            this._isBufferDirty = false;\n\n            for (const { prop, state, next } of bufferProps) {\n                this[state] = newState[prop];\n                this[next] = newState[prop];\n            }\n        },\n\n        flushState() {\n            if (!this._isBufferDirty) {\n                return;\n            }\n\n            this._isBufferDirty = false;\n\n            for (const { state, next } of bufferProps) {\n                this[state] = this[next];\n            }\n        },\n\n    });\n}\n\nexports.bufferProp = function bufferProp(prototype, key) {\n    const Class = prototype.constructor;\n    const bufferProps = Class._bufferProps = Class._bufferProps || [];\n    const state = `_${key}`;\n    const next = `_${key}_next`;\n\n    bufferProps.push({\n        prop: key,\n        state,\n        next,\n    });\n\n    Object.defineProperty(prototype, key, {\n\n        get() {\n            return this[state];\n        },\n\n        set(value) {\n            this[next] = value;\n            this._isBufferDirty = true;\n        },\n\n    });\n}\n","import Stat from '../stat';\nimport Vector from '../vector';\nimport Cell from './index';\nimport { buffer, bufferProp } from './state-decorators';\n\n@buffer\nexport default class CellState {\n\n    private stats = new Map<Stat, number>();\n\n    @bufferProp\n    isAlive: boolean;\n\n    @bufferProp\n    size: number;\n\n    @bufferProp\n    pos: Vector;\n\n    @bufferProp\n    velocity: Vector;\n\n    constructor(\n        private cell: Cell,\n    ) {}\n\n    getStat(key: Stat) {\n        return this.stats.get(key);\n    }\n\n    setStat(key: Stat, value: number) {\n        this.stats.set(key, value);\n    }\n\n    //\n    // Methods injected by decorator\n    //\n\n    getState(): IStateScreenshot {\n        return null;\n    }\n\n    setState(newState: IStateScreenshot) {}\n\n    flushState() {}\n\n}\n\nexport interface IStateScreenshot {\n    isAlive: boolean;\n    size: number;\n    pos: Vector;\n    velocity: Vector;\n}\n","import Emitter, { Listener } from '../emitter';\nimport Stat from '../stat';\nimport Vector from '../vector';\nimport World from '../world';\nimport CellBehavior from './behavior';\nimport CellBody from './body';\nimport CellDiet, { IEnergySource, IEnergySourceConstructor } from './diet';\nimport CellPhysic from './physic';\nimport CellRelations from './relations';\nimport CellRenderer from './renderer';\nimport CellSenses from './senses';\nimport CellState, { IStateScreenshot } from './state';\n\nlet id = 0;\nconst cells: Cell[] = (window as any).cells = [];\n\nexport default class Cell {\n\n    private behavior = new CellBehavior(this);\n    private diet = new CellDiet(this);\n    private relations = new CellRelations(this);\n    private renderer = new CellRenderer(this);\n    private senses = new CellSenses(this);\n    private state = new CellState(this);\n    private body = new CellBody(this, this.state);\n    private physic = new CellPhysic(this, this.state);\n    private emitter = new Emitter();\n    id: number;\n\n    constructor() {\n        this.id = id++;\n\n        cells[this.id] = this;\n        this.flushState();\n    }\n\n    toString() {\n        return `[Cell ${this.id}]`;\n    }\n\n    //\n    // STATE\n    //\n\n    getStat(key: Stat) {\n        return this.state.getStat(key);\n    }\n\n    setStat(key: Stat, value: number) {\n        this.state.setStat(key, value);\n    }\n\n    getState() {\n        return this.state.getState();\n    }\n\n    setState(value: IStateScreenshot) {\n        return this.state.setState(value);\n    }\n\n    flushState() {\n        return this.state.flushState();\n    }\n\n    //\n    // SIGNALS\n    //\n\n    on(signal: string, listener: Listener) {\n        this.emitter.on(signal, listener);\n    }\n\n    emit(signal: string, argument: any) {\n        this.emitter.emit(signal, argument);\n    }\n\n    //\n    // BODY\n    //\n\n    get isAlive() {\n        return this.body.isAlive;\n    }\n\n    get size() {\n        return this.body.size;\n    }\n    set size(value) {\n        this.body.size = value;\n    }\n\n    get energy() {\n        return this.body.energy;\n    }\n    set energy(value) {\n        this.body.energy = value;\n    }\n\n    canMitos() {\n        return this.body.canMitos();\n    }\n\n    mitos() {\n        return this.body.mitos();\n    }\n\n    //\n    // DIET\n    //\n\n    setDietType(Type: IEnergySourceConstructor, nutrition = 1) {\n        this.diet.addType(Type, nutrition);\n    }\n\n    eat(target: IEnergySource) {\n        return this.diet.eat(target);\n    }\n\n    canEat(target: IEnergySource) {\n        if (target instanceof Cell && this.isFamily(target)) {\n            return false;\n        }\n\n        return this.considerFood(target) > 0;\n    }\n\n    considerFood(target: IEnergySource) {\n        const dietFactor = this.diet.consider(target);\n\n        if (target instanceof Cell) {\n            return dietFactor * this.considerFight(target);\n        }\n\n        return dietFactor;\n    }\n\n    //\n    // SENSES\n    //\n\n    getVisionRange() {\n        return this.senses.getVisionRange();\n    }\n\n    getVisibleEntities(map: World) {\n        return this.senses.getVisibleEntities(map);\n    }\n\n    canSee(target: Cell) {\n        return this.senses.canSee(target);\n    }\n\n    isTouching(target: Cell) {\n        return this.senses.isTouching(target);\n    }\n\n    considerFight(target: Cell) {\n        return this.senses.considerFight(target);\n    }\n\n    //\n    // RELATIONS\n    //\n\n    setParent(target: Cell) {\n        this.relations.setParent(target);\n    }\n\n    isFamily(target: Cell) {\n        return this.relations.isFamily(target);\n    }\n\n    isParentOf(target: Cell) {\n        return this.relations.isParentOf(target);\n    }\n\n    isChildOf(target: Cell) {\n        return this.relations.isChildOf(target);\n    }\n\n    isSibling(target: Cell) {\n        return this.relations.isSibling(target);\n    }\n\n    //\n    // PHYSIC\n    //\n\n    get pos() {\n        return this.physic.pos;\n    }\n    set pos(value) {\n        this.physic.pos = value;\n    }\n\n    get velocity() {\n        return this.physic.velocity;\n    }\n    set velocity(value) {\n        this.physic.velocity = value;\n    }\n\n    shove(force: Vector) {\n        return this.physic.shove(force);\n    }\n\n    move() {\n        return this.physic.move();\n    }\n\n    //\n    // BEHAVIOR\n    //\n\n    tick(map: World) {\n        return this.behavior.tick(map);\n    }\n\n    //\n    // RENDERER\n    //\n\n    render(context: CanvasRenderingContext2D) {\n        return this.renderer.render(context);\n    }\n\n}\n","import Cell from './cell/index';\n\nexport default Cell;\n","import Cell from './cell';\nimport { IEnergySource } from './cell/diet';\nimport Vector from './vector';\n\nexport default class World {\n\n    private entities = new Set<IWorldEntity>();\n\n    constructor(\n        readonly size: Vector,\n    ) {}\n\n    add(entity: IWorldEntity) {\n        this.entities.add(entity);\n    }\n\n    remove(entity: IWorldEntity) {\n        this.entities.delete(entity);\n    }\n\n    getEntitiesAlive() {\n        return [...this.entities];\n    }\n\n    getEntitiesAt(point: Vector) {\n        const result: IWorldEntity[] = [];\n\n        for (const entity of this.entities) {\n            const { x, y } = point.diff(entity.pos);\n            const { size } = entity;\n            const isInBox = x < size && y < size;\n\n            if (isInBox && entity.pos.distance(point) <= size) {\n                result.push(entity);\n            }\n        }\n\n        return result;\n    }\n\n    getEntitiesIn(point: Vector, radius: number) {\n        const start = point.sub({ x: radius, y: radius });\n        const end = point.add({ x: radius, y: radius });\n        const result: IWorldEntity[] = [];\n\n        for (const entity of this.entities) {\n            const { x, y } = entity.pos;\n            const range = radius + entity.size;\n            const isInBox = x >= start.x && x <= end.x && y >= start.y && y <= end.y;\n\n            if (isInBox && entity.pos.distance(point) <= range) {\n                result.push(entity);\n            }\n        }\n\n        return result;\n    }\n\n}\n\nexport interface IWorldEntity<T = EntityState> extends IEnergySource, StateHolder<T> {\n    id: number;\n    size: number;\n    pos: Vector;\n    tick(map: World): void;\n    render(context: CanvasRenderingContext2D): void;\n}\n\nexport interface StateHolder<T> {\n    getState(): T;\n    setState(state: T): void;\n    flushState(): void;\n}\n\nexport interface EntityState {\n\n}\n","import Cell from '../cell';\nimport { random } from '../math';\nimport Stat from '../stat';\nimport Vector from '../vector';\nimport World from '../world';\nimport Game from './index';\n\nexport default class GameEntities {\n\n    world: World;\n\n    constructor(\n        private game: Game,\n        mapSize: Vector,\n    ) {\n        this.world = new World(mapSize);\n    }\n\n    addCell(position: Vector) {\n        const cell = new Cell();\n\n        cell.size = 4 + random(2);\n        cell.pos = position;\n\n        cell.setStat(Stat.ESCAPE_ACCELERATION, 1);\n        cell.setStat(Stat.FRICTION, 0.3);\n        cell.setStat(Stat.HUNT_ACCELERATION, 1);\n        cell.setStat(Stat.MAX_BITE_SIZE, 10);\n        cell.setStat(Stat.MAX_RADIUS, 200);\n        cell.setStat(Stat.MAX_VELOCITY, 10);\n        cell.setStat(Stat.MITOSIS_MIN_RADIUS, 50);\n        cell.setStat(Stat.VISION_RANGE, 300);\n\n        cell.flushState();\n\n        this.world.add(cell);\n\n        return cell;\n    }\n\n    getEntitiesAlive() {\n        return this.world.getEntitiesAlive();\n    }\n\n    tickEntities() {\n        const { world } = this;\n        const entities = this.getEntitiesAlive();\n\n        for (const entity of entities) {\n            if (entity instanceof Cell && !entity.isAlive) {\n                world.remove(entity);\n                continue;\n            }\n\n            entity.tick(world);\n        }\n\n        return entities;\n    }\n\n}\n","import Cell from '../cell';\nimport Vector from '../vector';\nimport Game from './index';\n\nexport default class GameInteraction {\n\n    mouse: Vector = null;\n    private isListening = false;\n    private inspector = new Set<Cell>();\n    private isHistoryEnabled: boolean;\n\n    constructor(\n        private game: Game,\n        { isHistoryEnabled }: GameInteractionOptions = {},\n    ) {\n        this.onClick = this.onClick.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onKeyPress = isHistoryEnabled\n            ? this.onKeyPressHistory.bind(this)\n            : this.onKeyPress.bind(this);\n    }\n\n    interact() {\n        const { game } = this;\n        const { world } = game;\n\n        if (!this.mouse) {\n            return;\n        }\n\n        const hover = world.getEntitiesAt(this.mouse);\n        const inspect = new Set([ ...this.inspector, ...hover as Cell[] ]);\n\n        for (const cell of inspect) {\n            game.renderCellDetails(cell);\n        }\n    }\n\n    addListeners(canvas: HTMLCanvasElement) {\n        if (this.isListening) {\n            return false;\n        }\n\n        document.addEventListener('keypress', this.onKeyPress);\n        canvas.addEventListener('mousemove', this.onMouseMove);\n        canvas.addEventListener('click', this.onClick);\n    }\n\n    private onClick(event: MouseEvent) {\n        this.mouse = Vector.from(event);\n\n        const { game, inspector } = this;\n        const { world } = game;\n        const hover = world.getEntitiesAt(this.mouse);\n\n        for (const cell of hover as Cell[]) {\n            if (inspector.has(cell)) {\n                inspector.delete(cell);\n            } else {\n                inspector.add(cell);\n            }\n        }\n\n        this.game.updateView();\n    }\n\n    private onKeyPress(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'Space':\n                this.game.isPaused = !this.game.isPaused;\n        }\n    }\n\n    private onKeyPressHistory(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'Space':\n                this.game.isPaused = !this.game.isPaused;\n                break;\n\n            case 'KeyA':\n            case 'KeyJ':\n                this.game.playback()\n                break;\n\n            case 'KeyS':\n            case 'KeyK':\n                this.game.stepback();\n                break;\n\n            case 'KeyD':\n            case 'KeyL':\n                this.game.step();\n                break;\n\n            case 'KeyF':\n            case 'Semicolon':\n                this.game.play();\n                break;\n\n            // default:\n            //     console.log(`KEYPRESS ${event.code}`);\n        }\n    }\n\n    private onMouseMove(event: MouseEvent) {\n        this.mouse = Vector.from(event);\n        this.game.updateView();\n    }\n\n}\n\nexport interface GameInteractionOptions {\n    isHistoryEnabled?: boolean;\n}\n","import Cell from '../cell';\nimport { TAU } from '../math';\nimport Vector from '../vector';\nimport Game from './index';\n\nexport default class GameRenderer {\n\n    constructor(\n        private game: Game,\n        private canvas: HTMLCanvasElement,\n    ) {}\n\n    renderEntities() {\n        const { game, canvas } = this;\n        const { width, height } = canvas;\n        const entities = game.getEntitiesAlive();\n        const context = canvas.getContext('2d');\n\n        context.clearRect(0, 0, width, height);\n\n        for (const entity of entities) {\n            entity.render(context);\n        }\n    }\n\n    renderCellDetails(cell: Cell) {\n        this.renderCellVision(cell);\n        this.renderCellBehavior(cell);\n    }\n\n    private renderCellVision(cell: Cell) {\n        for (const visible of cell.getVisibleEntities(this.game.world)) {\n            this.drawLine(cell.pos, visible.pos, {\n                width: 0.5,\n                color: 'rgba(0, 0, 0, 50)',\n            });\n        }\n\n        const visionRange = cell.getVisionRange();\n\n        this.drawCircle(cell.pos, visionRange, {\n            color: 'red',\n        });\n\n    }\n\n    private renderCellBehavior(cell: Cell) {\n        const velocityMultiplier = 100;\n        const velocityLine = cell.velocity.multiply({\n            x: velocityMultiplier,\n            y: velocityMultiplier,\n        });\n\n        this.drawLine(cell.pos, velocityLine.add(cell.pos), {\n            color: 'blue',\n            width: 2,\n        });\n    }\n\n    drawLine(from: Vector, to: Vector, {\n        color = 'black',\n        width = 1,\n    } = {}) {\n        const context = this.canvas.getContext('2d');\n\n        context.lineWidth = width;\n        context.strokeStyle = color;\n        context.beginPath();\n        context.moveTo(from.x, from.y);\n        context.lineTo(to.x, to.y);\n        context.closePath();\n        context.stroke();\n    }\n\n    drawCircle(at: Vector, radius: number, {\n        color = 'black',\n        width = 1,\n    } = {}) {\n        const context = this.canvas.getContext('2d');\n\n        context.lineWidth = width;\n        context.strokeStyle = color;\n        context.beginPath();\n        context.arc(at.x, at.y, radius, 0, TAU);\n        context.closePath();\n        context.stroke();\n    }\n\n}\n","import Game from './index';\nimport { min, max } from '../math';\n\nexport default class GameState {\n\n    private history = new Map<number, EntitiesState>();\n    private maxHistory: number;\n    private initialStep: EntitiesState;\n\n    private get olderStepSaved() {\n        return min(...this.history.keys());\n    }\n\n    private get newerStepSaved() {\n        return max(...this.history.keys());\n    }\n\n    constructor(\n        private game: Game,\n        { maxHistory }: GameStateOptions = {},\n    ) {\n        this.maxHistory = maxHistory;\n    }\n\n    tick(cursor: number) {\n        if (this.hasStep(cursor)) {\n            this.setState(this.history.get(cursor));\n            return;\n        }\n\n        if (cursor < this.olderStepSaved) {\n            if (cursor !== 0) {\n                console.warn('Wiped saved history');\n            }\n\n            this.reset();\n        }\n\n        while (!this.hasStep(cursor)) {\n            this.processStep();\n        }\n    }\n\n    loadForeignState(state: EntitiesState) {\n        this.initialStep = state;\n        this.reset();\n    }\n\n    getState() {\n        return this.history.get(this.newerStepSaved);\n    }\n\n    reset() {\n        this.setState(this.initialStep);\n        this.history.clear();\n        this.history.set(0, this.initialStep);\n    }\n\n    hasStep(cursor: number) {\n        return this.history.has(cursor);\n    }\n\n    saveInitialStep() {\n        const entities = this.game.tickEntities();\n        const state: EntitiesState = {};\n\n        for (const entity of entities) {\n            state[entity.id] = entity.getState();\n        }\n\n        this.initialStep = state;\n        this.reset();\n    }\n\n    setState(state: EntitiesState) {\n        // TODO: Get all entities\n        const entities = this.game.getEntitiesAlive();\n\n        for (const entity of entities) {\n            // TODO: revive dead entities\n            entity.setState(state[entity.id]);\n        }\n    }\n\n    private processStep() {\n        const entities = this.game.tickEntities();\n        const newState: EntitiesState = {};\n\n        for (const entity of entities) {\n            entity.flushState();\n            newState[entity.id] = entity.getState();\n        }\n\n        this.saveStep(newState);\n    }\n\n    private saveStep(newState: EntitiesState) {\n        const { history } = this;\n\n        history.set(this.newerStepSaved + 1, newState);\n\n        if (history.size > this.maxHistory) {\n            history.delete(this.olderStepSaved);\n        }\n    }\n\n}\n\nexport interface GameStateOptions {\n    maxHistory?: number;\n}\n\nexport interface EntitiesState {\n    [id: number]: object;\n}\n","export default class GameTicker {\n\n    private _speed = 1;\n    private cursor = -1;\n    private isRunning = false;\n    isPaused = false;\n\n    get speed() {\n        return this._speed;\n    }\n    set speed(value) {\n        if (value !== 1 && value !== -1) {\n            throw new Error(`Invalid speed ${value}`);\n        }\n\n        this._speed = value;\n    }\n\n    get isForward() {\n        return this.speed === 1;\n    }\n\n    get isBackwards() {\n        return this.speed === -1;\n    }\n\n    get isAtBegining() {\n        return this.cursor <= 0;\n    }\n\n    constructor(\n        private callback: GameTickerCallback,\n    ) {\n        this.onTick = this.onTick.bind(this);\n    }\n\n    //\n    // Timer execution\n    //\n\n    start() {\n        if (this.isRunning) {\n            return;\n        }\n\n        this.isRunning = true;\n        requestAnimationFrame(this.onTick);\n    }\n\n    stop() {\n        this.isRunning = false;\n    }\n\n    //\n    // Flow control\n    //\n\n    play() {\n        this.speed = 1;\n        this.isPaused = false;\n        this.start();\n    }\n\n    playback() {\n        this.speed = -1;\n        this.isPaused = false;\n        this.start();\n    }\n\n    step() {\n        this.speed = 1;\n        this.isPaused = true;\n        this.execute();\n    }\n\n    stepback() {\n        this.speed = -1;\n        this.isPaused = true;\n        this.execute();\n    }\n\n    pause() {\n        this.isPaused = true;\n    }\n\n    //\n    // Implementation details\n    //\n\n    private execute() {\n        if (this.isBackwards && this.isAtBegining) {\n            console.warn(`Can't go further in history!`);\n            this.isPaused = true;\n            return;\n        }\n\n        this.cursor += this.speed;\n        this.callback.call(null, {\n            turn: this.cursor,\n        });\n    }\n\n    private onTick() {\n        if (!this.isRunning) {\n            return;\n        }\n\n        requestAnimationFrame(this.onTick);\n\n        if (!this.isPaused) {\n            this.execute();\n        }\n    }\n\n}\n\nexport type GameTickerCallback = () => void;\n\nexport interface GameTickerParams {\n    turn: number;\n}\n","import Cell from '../cell';\nimport Vector from '../vector';\nimport GameEntities from './entities';\nimport GameInteraction from './interaction';\nimport GameRenderer from './renderer';\nimport GameState, { EntitiesState } from './state';\nimport GameTicker, { GameTickerParams } from './ticker';\n\nexport default class Game {\n\n    private entities: GameEntities;\n    private interaction: GameInteraction;\n    private renderer: GameRenderer;\n    private state: GameState;\n    private ticker: GameTicker;\n\n    get world() {\n        return this.entities.world;\n    }\n\n    constructor(\n        private canvas: HTMLCanvasElement,\n        mapSize: Vector,\n        { maxHistory = 100 }: GameOptions = {},\n    ) {\n        this.entities = new GameEntities(this, mapSize);\n        this.renderer = new GameRenderer(this, canvas);\n        this.state = new GameState(this, { maxHistory });\n        this.ticker = new GameTicker(this.tick.bind(this));\n        this.interaction = new GameInteraction(this, {\n            isHistoryEnabled: Boolean(maxHistory),\n        });\n    }\n\n    init() {\n        this.addListeners();\n        this.state.saveInitialStep();\n        this.start();\n        this.pause();\n        this.render();\n    }\n\n    tick({ turn }: GameTickerParams) {\n        const entities = this.getEntitiesAlive();\n        console.log(turn, entities.length);\n\n        this.state.tick(turn);\n        this.updateView();\n    }\n\n    updateView() {\n        this.render();\n        this.interaction.interact();\n    }\n\n    //\n    // TICKER\n    //\n\n    get isPaused() {\n        return this.ticker.isPaused;\n    }\n    set isPaused(value: boolean) {\n        this.ticker.isPaused = value;\n    }\n\n    get speed() {\n        return this.ticker.speed;\n    }\n    set speed(value: number) {\n        this.ticker.speed = value;\n    }\n\n    goTo(step: number) {\n        return this.state.tick(step);\n    }\n\n    start() {\n        return this.ticker.start();\n    }\n\n    stop() {\n        return this.ticker.stop();\n    }\n\n    play() {\n        return this.ticker.play();\n    }\n\n    playback() {\n        return this.ticker.playback();\n    }\n\n    pause() {\n        return this.ticker.pause();\n    }\n\n    step() {\n        return this.ticker.step();\n    }\n\n    stepback() {\n        return this.ticker.stepback();\n    }\n\n    //\n    // ENTITIES\n    //\n\n    getEntitiesAlive() {\n        return this.entities.getEntitiesAlive();\n    }\n\n    addCell(position: Vector) {\n        return this.entities.addCell(position);\n    }\n\n    tickEntities() {\n        return this.entities.tickEntities();\n    }\n\n    //\n    // INTERACTION\n    //\n\n    addListeners() {\n        this.interaction.addListeners(this.canvas);\n    }\n\n    //\n    // STATE\n    //\n\n    getState() {\n        return this.state.getState();\n    }\n\n    setState(value: EntitiesState) {\n        return this.state.loadForeignState(value);\n    }\n\n    //\n    // RENDER\n    //\n\n    render() {\n        return this.renderer.renderEntities();\n    }\n\n    renderCellDetails(cell: Cell) {\n        return this.renderer.renderCellDetails(cell);\n    }\n\n}\n\nexport interface GameOptions {\n    maxHistory?: number;\n}","import Vector from '../src/vector';\n\nexport default {\n\n    load(id: string) {\n        const json = localStorage.getItem(id);\n\n        return json ? JSON.parse(json, vectorReviver) : null;\n    },\n\n    save(state: any) {\n        const id = getFormattedDate(new Date());\n        const json = JSON.stringify(state)\n\n        localStorage.setItem(id, json);\n\n        this.trim();\n    },\n\n    rename(id: string, newName: string) {\n        localStorage.setItem(newName, localStorage.getItem(id));\n    },\n\n    log() {\n        const keys = Object.keys(localStorage);\n\n        if (!keys.length) {\n            return;\n        }\n\n        console.log(`Found stored states:`);\n\n        for (const key of keys) {\n            console.log(`  load(\"${key}\")`);\n        }\n    },\n\n    trim() {\n        const keys = Object.keys(localStorage);\n\n        while (keys.length > 10) {\n            if (isDate(keys[0])) {\n                localStorage.removeItem(keys[0]);\n            }\n\n            keys.shift();\n        }\n    }\n\n};\n\nfunction vectorReviver(key, value) {\n    if (typeof value === 'object' && 'x' in value && 'y' in value) {\n        return Vector.from(value);\n    }\n\n    return value;\n}\n\nfunction pad(value: number, length: number) {\n    return (String(value) as any).padStart(length, '0');\n}\n\nfunction getFormattedDate(value: Date) {\n    const year = value.getFullYear();\n    const month = pad(value.getMonth() + 1, 2);\n    const date = pad(value.getDate(), 2);\n    const hour = pad(value.getHours(), 2);\n    const minutes = pad(value.getMinutes(), 2);\n    const seconds = pad(value.getSeconds(), 2);\n    const milliseconds = pad(value.getMilliseconds(), 3);\n\n    return `${year}-${month}-${date} ${hour}:${minutes}:${seconds}.${milliseconds}`;\n}\n\nfunction isDate(value: string) {\n    return getFormattedDate(new Date(value)) === value;\n}","import Game from '../src/game/index';\nimport Vector from '../src/vector';\nimport { random } from '../src/math';\nimport Cell from '../src/cell';\nimport state from './persisted-state';\n\nmain();\n\nasync function main() {\n    await domLoaded();\n\n    const width = window.innerWidth;\n    const height = window.innerHeight - 4;\n\n    console.log({ width, height });\n\n    const query = parseQuery();\n    const entities = query.get('cells') || 10;\n    const canvas = document.querySelector('canvas#world') as HTMLCanvasElement;\n    const game = new Game(canvas, Vector.of(width, height), {\n        maxHistory: query.get('history'),\n    });\n\n    canvas.width = width;\n    canvas.height = height;\n\n    for (let i = 0; i < entities; i++) {\n        const x = random(0, width);\n        const y = random(0, height);\n        const cell = game.addCell(Vector.of(x, y));\n\n        cell.setDietType(Cell);\n    }\n\n    game.init();\n    state.save(game.getState());\n    state.log();\n\n    if (!query.get('pause')) {\n        game.play();\n    }\n\n    Object.assign(window, {\n        game,\n        rename: state.rename,\n        load(id: string) {\n            game.setState(state.load(id));\n            game.render();\n        },\n    });\n}\n\nfunction domLoaded() {\n    return new Promise(resolve => window.addEventListener('DOMContentLoaded', resolve));\n}\n\nfunction parseQuery() {\n    const keyValue = window.location.search\n        .substr(1)\n        .split('&')\n        .filter(Boolean)\n        .map((entry): [ string, number ] => {\n            const [ key, value ] = entry.split('=');\n            const num = parseInt(value);\n\n            if (isNaN(num)) {\n                throw new Error(`Invalid option \"${key}\" is not a number \"${value}\" \"${num}\"`)\n            }\n\n            return [ key, num ];\n        })\n\n    return new Map<string, number>(keyValue);\n}"]}