{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/cell.ts","webpack:///./src/vector.ts","webpack:///./test/index.ts","webpack:///./test/test-duplicates.ts","webpack:///./src/CONFIGURATION.ts","webpack:///./src/behaviors/move.ts","webpack:///./src/color.ts","webpack:///./src/math.ts","webpack:///./src/lulas.ts","webpack:///./src/behaviors/roundMap.ts","webpack:///./src/behaviors/flocking.ts","webpack:///./src/behaviors/solidBody.ts","webpack:///./src/index.ts","webpack:///./test/user-stories.ts","webpack:///./user-stories sync \\.ts$","webpack:///./user-stories/0 - As a developer I want to run tests.test.ts","webpack:///./user-stories/1 - As a user I want to see cells.test.ts","webpack:///./user-stories/2 - As a user I want to watch them move.test.ts","webpack:///./user-stories/3 - As a user I want them to bounce on the corners.test.ts","webpack:///./src/behaviors/bounceOnCorners.ts","webpack:///./user-stories/3 - As a user I want them to navigate to the other side of the screen.test.ts","webpack:///./user-stories/4 - As a user I want to watch them follow flocking behaviour.test.ts","webpack:///./src/behaviors/flocking2.ts","webpack:///./test/assertions.ts","webpack:///./user-stories/5 - As a user I want to watch the cell not overlap.test.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","color_1","CONFIGURATION_1","vector_1","ANGLE_CORRECTION","Math","PI","lastId","renderAt","context","cell","pos","position","save","translate","x","y","rotate","radians","velocity","beginPath","arc","radius","lineTo","closePath","lineWidth","strokeStyle","color","fillStyle","bajarColor","stroke","fill","restore","createCell","partial","__assign","id","vector","acceleration","DEFAULT_RADIUS","vision","DEFAULT_VISION_FACTOR","applyForce","force","cellDistance","left","right","magnitude","subtractVectors","renderCell","_a","size","renderRadius","logCell","logVector","isZero","sqrt","pow","normalize","point","targetMagnitude","mag","vectorAxis","axis","atan2","operate","getAngle","limitVector","limit","sumVectors","sumVectorList","vectors","map","v","reduce","a","b","multiplyVectors","tests","documentTitle","document","title","file","executeTest","message","table","run","isJestTesting","console","groupCollapsed","runTest","groupEnd","global","test","log","error","write","stack","replace","printError","setFailState","body","style","backgroundColor","Boolean","first","second","Array","isArray","unit","runTests","background","lastFile","_i","tests_1","setSuccessState","setFilename","dirname","filename","cell_1","lulas_1","createTestLulas","config","default","canvas","createElement","cells","worldSize","behaviors","MAX_SPEED","MAX_FORCE","COLLISION_FRICTION","FLOCKING_ALIGMENENT_FACTOR","FLOCKING_COHESION_FACTOR","FLOCKING_SEPARATION_FACTOR","FLOCKING_SEPARATION_VISION_LIMIT","FLOCKING_SEPARATION_BORDER_LIMIT","move","math_1","toString","g","alpha","toHex","round","val","randomColor","random","percent","rgba","match","Error","parseInt","toRGBA","min","max","lulas","_b","width","height","currentCell","world","look","target","filter","getContext","renderCellToContext","step","forEach","render","clearRect","roundMap","alignement","neighbors","sum","average","relative","cohesion","separation","closer","requireNeighbors","fn","flocking","alignementBehavior","cohesionBehavior","separationBehavior","collide","correction","adjustment","factor","vel","collisionBrake_bounce","solidBody","collision","other","minDistance","distance","index_1","flocking_1","move_1","roundMap_1","solidBody_1","__awaiter","fullscreen","margin","padding","documentElement","el","assign","setStyles","sent","appendChild","innerWidth","innerHeight","center","game","operator","_","array","join","requestAnimationFrame","frame","start","setTimeout","keys","./0 - As a developer I want to run tests.test.ts","./1 - As a user I want to see cells.test.ts","./2 - As a user I want to watch them move.test.ts","./3 - As a user I want them to bounce on the corners.test.ts","./3 - As a user I want them to navigate to the other side of the screen.test.ts","./4 - As a user I want to watch them follow flocking behaviour.test.ts","./5 - As a user I want to watch the cell not overlap.test.ts","webpackContext","req","webpackContextResolve","e","code","resolve","isTestRunning","__dirname","__filename","assert","test_duplicates_1","isCanvasBlank_browser","getImageData","some","channel","isCanvasBlank_mock","__getEvents","every","type","isCanvasBlank","assert_1","equal","exp","bounceOnCorners_1","bounceOnCorners","abs","SIZE","flocking2_1","assertions_1","targetVel","neighborVel","angleBefore","neighborAngle","sut","angleAfter","notEqual","assertBetweenOrEqual","cellPosition","separationAngle","desired","steering","count","borderDistance","diff","steerign","effect","assertBetween","finalMessage","pos1","pos2","expected"],"mappings":"aACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAKlC,IAFGe,GAAqBA,EAAoBhB,GAEtCO,EAASC,QACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrBiB,EAAG,GAGAZ,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU8B,QAGnC,IAAIC,EAASH,EAAiB5B,GAAY,CACzCK,EAAGL,EACHgC,GAAG,EACHF,QAAS,IAUV,OANAhB,EAAQd,GAAUW,KAAKoB,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAG/DK,EAAOC,GAAI,EAGJD,EAAOD,QAKfJ,EAAoBO,EAAInB,EAGxBY,EAAoBQ,EAAIN,EAGxBF,EAAoBS,EAAI,SAASL,EAASM,EAAMC,GAC3CX,EAAoBY,EAAER,EAASM,IAClC5B,OAAO+B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEX,EAAoBgB,EAAI,SAASZ,GACX,oBAAXa,QAA0BA,OAAOC,aAC1CpC,OAAO+B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DrC,OAAO+B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKzC,OAAO0C,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBzC,OAAO+B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBS,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAL,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASgB,EAAQC,GAAY,OAAO/C,OAAOC,UAAUC,eAAeC,KAAK2C,EAAQC,IAGzG7B,EAAoB8B,EAAI,GAExB,IAAIC,EAAaC,OAAqB,aAAIA,OAAqB,cAAK,GAChEC,EAAmBF,EAAW5C,KAAKuC,KAAKK,GAC5CA,EAAW5C,KAAOf,EAClB2D,EAAaA,EAAWG,QACxB,IAAI,IAAIvD,EAAI,EAAGA,EAAIoD,EAAWlD,OAAQF,IAAKP,EAAqB2D,EAAWpD,IAC3E,IAAIU,EAAsB4C,EAI1B1C,EAAgBJ,KAAK,CAAC,GAAG,IAElBM,I,+XCvJT,IAAA0C,EAAAnC,EAAA,GACAoC,EAAApC,EAAA,GAEAqC,EAAArC,EAAA,GASMsC,EAAmBC,KAAKC,GAAK,EAG/BC,EAAS,EAiEb,SAASC,EACPC,EACAC,EACAC,QAAA,IAAAA,MAAMD,EAAKE,UAEXH,EAAQI,OACRJ,EAAQK,UAAUH,EAAII,EAAGJ,EAAIK,GAE7BP,EAAQQ,OAAOd,EAAAe,QAAQR,EAAKS,UAAYf,GACxCK,EAAQW,YACRX,EAAQY,IAAI,EAAG,EAAGX,EAAKY,OAAQ,EAAa,IAAVjB,KAAKC,IACvCG,EAAQc,OAAOb,EAAKY,QAASZ,EAAKY,QAElCb,EAAQe,YACRf,EAAQgB,UAAY,EACpBhB,EAAQiB,YAAchB,EAAKiB,MAC3BlB,EAAQmB,UAAY3B,EAAA4B,WAAWnB,EAAKiB,MAAO,IAC3ClB,EAAQqB,SACRrB,EAAQsB,OAERtB,EAAQuB,UArEV9D,EAAA+D,WAAA,SAA2BC,GACzB,OAAOC,EAAP,CACEC,GAfM7B,IAgBNoB,MAAO,UACPf,SAAUT,EAAAkC,OAAO,GACjBlB,SAAUhB,EAAAkC,OAAO,GACjBC,aAAcnC,EAAAkC,OAAO,GACrBf,OAAQpB,EAAAqC,eACRC,QACGN,GAAWA,EAAQZ,OAASY,EAAQZ,OAASpB,EAAAqC,gBAC9CrC,EAAAuC,uBACCP,IAIPhE,EAAAwE,WAAA,SAA2BhC,EAAYiC,GACrCjC,EAAKS,SAASJ,GAAK4B,EAAM5B,EACzBL,EAAKS,SAASH,GAAK2B,EAAM3B,GAG3B9C,EAAA0E,aAAA,SAA6BC,EAAYC,GACvC,OAAO3C,EAAA4C,UAAU5C,EAAA6C,gBAAgBH,EAAKjC,SAAUkC,EAAMlC,YAGxD1C,EAAA+E,WAAA,SACExC,EACAyC,EACAxC,G,IADEyC,EAAID,EAAAC,KAGAC,EAAe1C,EAAKY,OAAS,GACjBX,EAAQD,EAAIE,SAE9BJ,EAASC,EAASC,GAEdC,EAAII,EAAIqC,EAAe,GACzB5C,EAASC,EAASC,EAAM,CAAEK,EAAGJ,EAAII,EAAIoC,EAAKpC,EAAGC,EAAGL,EAAIK,IAElDL,EAAII,EAAIqC,EAAeD,EAAKpC,GAC9BP,EAASC,EAASC,EAAM,CAAEK,EAAGJ,EAAII,EAAIoC,EAAKpC,EAAGC,EAAGL,EAAIK,IAGlDL,EAAIK,EAAIoC,EAAe,GACzB5C,EAASC,EAASC,EAAM,CAAEK,EAAGJ,EAAII,EAAGC,EAAGL,EAAIK,EAAImC,EAAKnC,IAElDL,EAAIK,EAAIoC,EAAeD,EAAKnC,GAC9BR,EAASC,EAASC,EAAM,CAAEK,EAAGJ,EAAII,EAAGC,EAAGL,EAAIK,EAAImC,EAAKnC,KA2BxD9C,EAAAmF,QAAA,SAAwB3C,GACtB,MAAO,QAAQA,EAAK0B,GAAE,KAAK1B,EAAKY,OAAM,WAAWnB,EAAAmD,UAC/C5C,EAAKE,UACN,UAAUT,EAAAmD,UAAU5C,EAAKS,UAAS,O,qQCjGrC,SAAgBoC,EAAOL,G,IAAEnC,EAACmC,EAAAnC,EAAEC,EAACkC,EAAAlC,EAC3B,OAAa,IAAND,GAAiB,IAANC,EAGpB,SAAgB+B,EAAUG,G,IAAEnC,EAACmC,EAAAnC,EAAEC,EAACkC,EAAAlC,EAC9B,OAAOX,KAAKmD,KAAKnD,KAAAoD,IAAA1C,EAAK,GAAIV,KAAAoD,IAAAzC,EAAK,IAGjC,SAAgB0C,EAAUC,EAAeC,GACvC,QADuC,IAAAA,MAAA,GACnCL,EAAOI,GACT,OAAOxB,EAAP,GAAYwB,GAGd,IAAME,EAAMd,EAAUY,GACtB,OAAOG,EAAW,SAACC,GAAS,OAACJ,EAAMI,GAAQH,EAAmBC,IAGhE,SAAgB3C,EAAQgC,G,IAAEnC,EAACmC,EAAAnC,EAAEC,EAACkC,EAAAlC,EAC5B,OAAOX,KAAK2D,MAAMhD,EAAGD,GAgCvB,SAAgB+C,EACdG,GAEA,IAAMlD,EAAIkD,EAAQ,KACZjD,EAAIiD,EAAQ,KAElB,GAAiB,iBAANlD,GAA+B,iBAANC,EAClC,MAAO,CAAED,EAACA,EAAEC,EAACA,G,+NA7DjB9C,EAAAmE,OAAA,SAAuBtB,EAAWC,GAChC,YADgC,IAAAA,MAAAD,GACzB,CAAEA,EAACA,EAAEC,EAACA,IAGf9C,EAAAqF,SAIArF,EAAA6E,YAIA7E,EAAAwF,YASAxF,EAAAgD,UAIAhD,EAAAgG,SAAA,SAAyB7B,GACvB,OAA0B,IAAlBnB,EAAQmB,GAAiBhC,KAAKC,IAGxCpC,EAAAiG,YAAA,SAA4BR,EAAeS,GAEzC,OAAaA,EADDrB,EAAUY,GACDD,EAAUC,EAAOS,GAAST,GAGjDzF,EAAAmG,WAAA,SAA2BxB,EAAcC,GACvC,OAAOgB,EAAW,SAACC,GAAS,OAAAlB,EAAKkB,GAAQjB,EAAMiB,MAGjD7F,EAAAoG,cAAA,SAA8BC,GAC5B,OAAOT,EAAW,SAACC,GACjB,OAAAQ,EAAQC,IAAI,SAACC,GAAM,OAAAA,EAAEV,KAAOW,OAAO,SAACC,EAAGC,GAAM,OAAAD,EAAIC,OAIrD1G,EAAA8E,gBAAA,SAAgCH,EAAcC,GAC5C,OAAOgB,EAAW,SAACC,GAAS,OAAAlB,EAAKkB,GAAQjB,EAAMiB,MAGjD7F,EAAA2G,gBAAA,SAAgClB,EAAe1E,GAC7C,OAAO6E,EAAW,SAACC,GAAS,OAAAJ,EAAMI,GAAQ9E,KAK5Cf,EAAA4F,aAWA5F,EAAAoF,UAAA,SAA0BK,GACxB,MAAO,IAAIA,EAAM5C,EAAC,IAAI4C,EAAM3C,EAAC,M,kJCnD/B,IAAM8D,EAAyB,GACzBC,EAAgBC,SAASC,MAC3BC,EAAO,GAwDX,SAASC,EAA6BjC,G,IACpCgC,EAAIhC,EAAAgC,KACJE,EAAOlC,EAAAkC,QACPC,EAAKnC,EAAAmC,MACLC,EAAGpC,EAAAoC,IAEH,GAAKD,EAAL,CAKKnH,EAAAqH,eACHC,QAAQC,eAAeL,GAGzB,I,eAAS3I,GACPiJ,EAAQR,EAASE,EAAO,KAAK3I,EAAC,IAAK,WAAM,OAAA6I,EAAGhI,WAAA,EAAI+H,EAAM5I,OAD/CA,EAAI,EAAGA,EAAI4I,EAAM1I,OAAQF,I,EAAzBA,GAIJyB,EAAAqH,eACHC,QAAQG,gBAbRD,EAAQR,EAAME,EAASE,GAiB3B,SAASI,EAAQR,EAAcE,EAAiBE,GAC9C,GAAIpH,EAAAqH,cACDK,EAAeC,KAAKT,EAASE,QAIhC,IACEA,IACAE,QAAQM,IAAOV,EAAO,OACtB,MAAOW,GAGP,MAIJ,SAAoBb,EAAca,EAAcX,G,MAC9CI,QAAQM,IAAOV,EAAO,OACtBI,QAAQO,MAAMA,GACdf,SAASgB,MAAM,uHAGLd,EAAI,oBACJE,EAAO,sBACK,QADLlC,EACN6C,EAAME,aAAK,IAAA/C,OAAA,EAAAA,EAAEgD,QAAQ,KAAM,SAAM,wCAd1CC,CAAWjB,EAAMa,EAAOX,GACxBgB,IACML,GAwBV,SAASK,IACPpB,SAASqB,KAAKC,MAAMC,gBAAkB,UAnH3BrI,EAAAqH,cAAgBiB,aACT,IAAXZ,GAA2BA,EAAeC,MAUnD3H,EAAA2H,KAAA,SACET,EACAqB,EACAC,GAEA,IAAMrB,EAAQsB,MAAMC,QAAQH,GAASA,EAAQ,KAEvCI,EAAO,CAAE3B,KAAIA,EAAEE,QAAOA,EAAEC,MAAKA,EAAEC,IADzBD,EAAQqB,EAAUD,GAG1BvI,EAAAqH,cACFJ,EAAY0B,GAEZ/B,EAAM7H,KAAK4J,IAIf3I,EAAA4I,SAAA,SAAyB5D,G,IAAE6D,QAAU,IAAA7D,EAA8B,GAAEA,GAAA6D,WAoFnEX,IAhFA,IAFA,IAAIY,EAAW,GAEIC,EAAA,EAAAC,EAAApC,EAAAmC,EAAAC,EAAAvK,OAAAsK,IAAO,CAArB,IAAMJ,EAAIK,EAAAD,GACR/I,EAAAqH,eAAiBsB,EAAK3B,OAAS8B,IAClCxB,QAAQG,WACRqB,EAAWH,EAAK3B,KAChBM,QAAQC,eAAeoB,EAAK3B,OAG9BC,EAAY0B,GAGT3I,EAAAqH,eACHC,QAAQG,WAGVb,EAAMnI,OAAS,EACfqI,SAASC,MAAQF,EAwEnB,SAAyBgC,QAAA,IAAAA,MAAA,SACvB/B,SAASqB,KAAKC,MAAMC,gBAAkBQ,EAxEtCI,CAAgBJ,IAGlB7I,EAAAkJ,YAAA,SAA4BC,EAAiBC,GAC3CpC,EAAOoC,EAASpB,QAAWmB,EAAO,IAAK,IAAInB,QAAQ,iBAAkB,O,iWC3EvE,IAAAqB,EAAAzJ,EAAA,GACA0J,EAAA1J,EAAA,IAEAI,EAAAuJ,gBAAA,SAAgCC,GAC9B,YAD8B,IAAAA,MAAA,IACvBF,EAAAG,QAAMxF,EAAD,CACVyF,OAAQ5C,SAAS6C,cAAc,UAC/BC,MAAO,CAACP,EAAAtF,cACR8F,UAAW,CAAEhH,EAAG,IAAMC,EAAG,KACzBgH,UAAW,IACRN,M,sUCTMxJ,EAAAqE,eAAiB,EACjBrE,EAAA+J,UAAY,EACZ/J,EAAAgK,UAAY,GAGZhK,EAAAuE,sBAAwB,GAGxBvE,EAAAiK,mBAAqB,GAErBjK,EAAAkK,2BAA6B,IAC7BlK,EAAAmK,yBAA2B,KAC3BnK,EAAAoK,2BAA6B,KAG7BpK,EAAAqK,iCAAmC,GAEnCrK,EAAAsK,iCAAmC,I,4FChBhD,IAAAtI,EAAApC,EAAA,GACAqC,EAAArC,EAAA,GAEAI,EAAAuK,KAAA,SAAqB/H,GACnBA,EAAKS,SAAWhB,EAAAkE,WACd3D,EAAKS,SACLhB,EAAAgE,YAAYzD,EAAK4B,aAAcpC,EAAAgI,YAKjCxH,EAAK4B,aAAenC,EAAAkC,OAAO,GAE3B3B,EAAKE,SAASG,GAAKL,EAAKS,SAASJ,EACjCL,EAAKE,SAASI,GAAKN,EAAKS,SAASH,I,iHCfnC,IAAA0H,EAAA5K,EAAA,GAuCA,SAAS6K,EAASzF,G,IAAEpE,EAACoE,EAAApE,EAAE8J,EAAC1F,EAAA0F,EAAEhE,EAAC1B,EAAA0B,EAAKiE,EAAK3F,EAAAyB,EAC7BA,EAAImE,EAAMzI,KAAK0I,MAAc,IAARF,IAC3B,MAAO,IAAIC,EAAMhK,GAAKgK,EAAMF,GAAKE,EAAMlE,GAAKD,EAG9C,SAASmE,EAAME,GACb,IAAMxL,EAAS6C,KAAK0I,MAAMC,GAAKL,SAAS,IACxC,OAAyB,IAAlBnL,EAAOb,OAAe,IAAIa,EAAWA,EA1C9CU,EAAA+K,YAAA,WACE,OAAON,EAAS,CACd7J,EAAG4J,EAAAQ,OAAO,IAAK,KACfN,EAAGF,EAAAQ,OAAO,IAAK,KACftE,EAAG8D,EAAAQ,OAAO,IAAK,KACfvE,EAAG,KAIPzG,EAAA2D,WAAA,SAA2BF,EAAcwH,GACvC,IAAMC,EAQR,SAAgBzH,GACd,IAAM0H,EAAQ1H,EAAM0H,MAAM,kCAE1B,IAAKA,EACH,MAAM,IAAIC,MAAM,uBAAuB3H,GAGjB0H,EAAK,GAAtB,IAAGvK,EAAcuK,EAAK,GAAhBT,EAAWS,EAAK,GAAbzE,EAAQyE,EAAK,GAAV1E,EAAK0E,EAAK,GAE7B,MAAO,CACLvK,EAAGyK,SAASzK,EAAG,IACf8J,EAAGW,SAASX,EAAG,IACfhE,EAAG2E,SAAS3E,EAAG,IACfD,EAAGA,EAAI4E,SAAS5E,EAAG,IAAM,IAAM,GArBpB6E,CAAO7H,GAKpB,OAJAyH,EAAKtK,GAAKqK,EACVC,EAAKR,GAAKO,EACVC,EAAKxE,GAAKuE,EAEHR,EAASS,K,8FCTlBlL,EAAAgL,OAAA,SAAuBzC,EAAeC,QAAA,IAAAA,OAAUD,GAC9C,IAAMgD,EAAMpJ,KAAKoJ,IAAIhD,EAAOC,GACtBgD,EAAMrJ,KAAKqJ,IAAIjD,EAAOC,GAC5B,OAAOrG,KAAK0I,MAAM1I,KAAK6I,UAAYQ,EAAMD,GAAOA,K,qUCblD,IAAAlC,EAAAzJ,EAAA,GAiBA,SAAgB6L,EAAMzG,G,IACpB0E,EAAM1E,EAAA0E,OACNE,EAAK5E,EAAA4E,MACLE,EAAS9E,EAAA8E,UACT4B,EAAA1G,EAAA6E,iBAAS,IAAG6B,EAAA,CAAE7I,EAAG6G,EAAOiC,MAAO7I,EAAG4G,EAAOkC,QAAQF,EAE7CG,EAA2B,KACzBC,EAAQ,CACZ7G,KAAM4E,EACNkC,KAAA,SAAK3I,GACH,OA2BJ,SAAc4I,EAAc5I,GAC1B,OAAOwG,EAAMqC,OACX,SAACpJ,GAAM,OAAAA,IAAMmJ,GAAU3C,EAAA3E,aAAasH,EAAQnJ,GAAKO,IA7B1C2I,CAAKF,EAAczI,KAIxBb,EAAUmH,EAAOwC,WAAW,MAC5BC,EAAsB9C,EAAAtE,WAAWzD,KAAK,KAAMiB,EAASuJ,GAE3D,MAAO,CACLlC,YACE,OAAOA,GAETwC,KAAI,WACFxC,EAAQA,EAAMtD,IAAI,SAACzD,GACjB,IAAML,EAAOyB,EAAH,GAAQpB,GAGlB,OAFAgJ,EAAchJ,EACdiH,EAAUuC,QAAQ,SAAC3F,GAAM,OAAAA,EAAElE,EAAMsJ,KAC1BtJ,KAGX8J,OAAM,WACJ/J,EAAQiB,YAAc,OACtBjB,EAAQmB,UAAY,OACpBnB,EAAQgK,UAAU,EAAG,EAAG7C,EAAOiC,MAAOjC,EAAOkC,QAC7ChC,EAAMyC,QAAQF,KAjCpBnM,EAAAyL,QA4CAzL,EAAAyJ,QAAegC,G,gGC1DfzL,EAAAwM,SAAA,SAAyBhK,EAAYwC,G,IAAEC,EAAID,EAAAC,KACrCzC,EAAKE,SAASG,EAAI,IACpBL,EAAKE,SAASG,GAAKoC,EAAKpC,GAGtBL,EAAKE,SAASI,EAAI,IACpBN,EAAKE,SAASI,GAAKmC,EAAKnC,GAGtBN,EAAKE,SAASG,EAAIoC,EAAKpC,IACzBL,EAAKE,SAASG,GAAKoC,EAAKpC,GAGtBL,EAAKE,SAASI,EAAImC,EAAKnC,IACzBN,EAAKE,SAASI,GAAKmC,EAAKnC,K,6JCjB5B,IAAAuG,EAAAzJ,EAAA,GACAoC,EAAApC,EAAA,GAOAqC,EAAArC,EAAA,GAsBA,SAAS6M,EAAWjK,EAAYkK,GAC9B,IAAMC,EAAMD,EAAUpG,IAAI,SAACzD,GAAM,OAAAA,EAAEI,WAAUuD,OAAOvE,EAAAkE,WAAYlE,EAAAkC,OAAO,IACjEyI,EAAU3K,EAAA0E,gBAAgBgG,EAAK,EAAID,EAAUjO,QAC7CoO,EAAW5K,EAAA6C,gBAAgB8H,EAASpK,EAAKS,UAC/C,OAAOhB,EAAA0E,gBAAgBkG,EAAU7K,EAAAkI,4BAGnC,SAAS4C,EAAStK,EAAYkK,GAC5B,IAAMC,EAAMD,EAAUpG,IAAI,SAACzD,GAAM,OAAAA,EAAEH,WAAU8D,OAAOvE,EAAAkE,WAAYlE,EAAAkC,OAAO,IACjEyI,EAAU3K,EAAA0E,gBAAgBgG,EAAK,EAAID,EAAUjO,QAC7CoO,EAAW5K,EAAA6C,gBAAgB8H,EAASpK,EAAKE,UAC/C,OAAOT,EAAA0E,gBAAgBkG,EAAU7K,EAAAmI,0BAGnC,SAAS4C,EAAWvK,EAAYkK,GAC9B,IAAMxG,EAAQ1D,EAAK8B,OAAStC,EAAAqI,iCACtB2C,EAASN,EAAUT,OAAO,SAACpJ,GAAM,OAAAwG,EAAA3E,aAAalC,EAAMK,GAAKqD,IAE/D,IAAK8G,EAAOvO,OACV,OAAOwD,EAAAkC,OAAO,GAGhB,IAAMwI,EAAMK,EAAO1G,IAAI,SAACzD,GAAM,OAAAA,EAAEH,WAAU8D,OAAOvE,EAAAkE,WAAYlE,EAAAkC,OAAO,IAC9DyI,EAAU3K,EAAA0E,gBAAgBgG,EAAK,EAAIK,EAAOvO,QAC1CoO,EAAW5K,EAAA6C,gBAAgB8H,EAASpK,EAAKE,UAC/C,OAAOT,EAAA0E,gBAAgBkG,GAAwC,EAA9B7K,EAAAoI,4BAGnC,SAAS6C,EACPC,GAEA,OAAO,SAAC1K,EAAYwC,G,IACZ0H,GAAYX,EADM/G,EAAA+G,MACDvJ,EAAK8B,QAE5B,GAAKoI,EAAUjO,OAAf,CAIA,IAAMgG,EAAQyI,EAAG1K,EAAMkK,GACvBrD,EAAA7E,WAAWhC,EAAMiC,KApDRzE,EAAAmN,SAAWF,EAKxB,SAAsBzK,EAAYkK,GAChC,OAAOzK,EAAAmE,cAAc,CACnBqG,EAAWjK,EAAMkK,GACjBI,EAAStK,EAAMkK,GACfK,EAAWvK,EAAMkK,OARR1M,EAAAoN,mBAAqBH,EAAiBR,GACtCzM,EAAAqN,iBAAmBJ,EAAiBH,GACpC9M,EAAAsN,mBAAqBL,EAAiBF,I,iGCpBnD,IAAA1D,EAAAzJ,EAAA,GACAoC,EAAApC,EAAA,GAEAqC,EAAArC,EAAA,GAgBA,SAAS2N,EAAQ9G,EAASC,EAAS8G,GACjC,IAAMC,EAAaxL,EAAAuD,UACjB,CACE3C,EAAG4D,EAAE/D,SAASG,EAAI6D,EAAEhE,SAASG,EAC7BC,EAAG2D,EAAE/D,SAASI,EAAI4D,EAAEhE,SAASI,GAE/B0K,GAGF/G,EAAE/D,SAASG,GAAK4K,EAAW5K,EAC3B4D,EAAE/D,SAASI,GAAK2K,EAAW3K,EAC3B4D,EAAEhE,SAASG,GAAK4K,EAAW5K,EAC3B6D,EAAEhE,SAASI,GAAK2K,EAAW3K,EAK7B,SAA+B2D,EAASC,GACtC,IAAMgH,EAAS,EAAI1L,EAAAiI,mBACb0D,EAAMlH,EAAExD,SACdwD,EAAExD,SAAWhB,EAAA0E,gBAAgBD,EAAEzD,SAAUyK,GACzChH,EAAEzD,SAAWhB,EAAA0E,gBAAgBgH,EAAKD,GAPlCE,CAAsBnH,EAAGC,GA5B3B1G,EAAA6N,UAAA,SAA0BrL,EAAYwC,GAGpC,I,IAFM8I,GAAY/B,EADwB/G,EAAA+G,MACL,EAAdvJ,EAAKY,QAEnB7E,EAAI,EAAGA,EAAIuP,EAAUrP,OAAQF,IAAK,CACzC,IAAMwP,EAAQD,EAAUvP,GAClByP,EAAcD,EAAM3K,OAASZ,EAAKY,OAClC6K,EAAW5E,EAAA3E,aAAaqJ,EAAOvL,GAEjCyL,EAAWD,GACbT,EAAQ/K,EAAMuL,GAAQC,EAAcC,GAAY,M,srDCZtDrO,EAAA,IAEA,IAAAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,IACAwO,EAAAxO,EAAA,GACAyO,EAAAzO,EAAA,IACA0O,EAAA1O,EAAA,IACAyJ,EAAAzJ,EAAA,GACAmC,EAAAnC,EAAA,GACA0J,EAAA1J,EAAA,IACA4K,EAAA5K,EAAA,GACAqC,EAAArC,EAAA,GAEC2O,OAAA,2B,iDAEC,OAqDF,WAOE,IANA,IAAMC,EAAa,CACjBC,OAAQ,EACRC,QAAS,EACT9C,OAAQ,QAGO7C,EAAA,EAAA/D,EAAA,CAAC8B,SAAS6H,gBAAiB7H,SAASqB,MAApCY,EAAA/D,EAAAvG,OAAAsK,IAA2C,CAAvD,IAAM6F,EAAE5J,EAAA+D,GACXrK,OAAOmQ,OAAOD,EAAGxG,MAAOoG,IA9D1BM,GACA,GAAMZ,EAAAtF,SAAS,CACbC,WAAY,W,cADd7D,EAAA+J,OAUF,WACE,IAAMrF,EAAS5C,SAAS6C,cAAc,UACtC7C,SAASqB,KAAK6G,YAAYtF,GAC1BA,EAAOiC,MAAQ/J,OAAOqN,WACtBvF,EAAOkC,OAAShK,OAAOsN,YAEvB,IAAMC,EAASlN,EAAAkC,OAAOuF,EAAOiC,MAAQ,EAAGjC,EAAOkC,OAAS,GASlDwD,EAAO9F,EAAAG,QAAM,CACjBC,OAAMA,EACNE,MAmBJ,SAAkB3E,EAAcoK,GAC9B,OAAO5G,MAAMxD,GACVpB,KAAK,MACLyC,IAAI,SAACgJ,EAAG/Q,GAAM,OAAAA,EAAI,IAClB+H,IAAI+I,GAvBEE,CAAM,GAVU,SAAChR,GACxB,OAAA8K,EAAAtF,WAAW,CACTrB,SAAUuB,EAAF,GAAOkL,GACflM,SAAUhB,EAAAkC,OAAOqG,EAAAQ,OAAO,IAAKR,EAAAQ,OAAO,KACpC5H,OAAQoH,EAAAQ,OAAO,EAAG,IAClBvH,MAAO1B,EAAAgJ,kBAMTjB,UAAW,CAACqE,EAAAhB,SAAUiB,EAAA7D,KAAM+D,EAAAT,UAAWQ,EAAA7B,YAGzClF,QAAQM,IAAI,iBAWVN,QAAQM,IAAIwH,EAAKxF,MAAMtD,IAAI+C,EAAAlE,SAASqK,KAAK,OAR3CJ,EAAK9C,SACLmD,sBAAsB,SAASC,IAC7BN,EAAKhD,OACLgD,EAAK9C,SACLmD,sBAAsBC,KAnCxBC,G,SAGFC,WAAW,WACT9I,SAASqB,KAAKC,MAAMC,gBAAkB,W,6BCtBxC,IAAoBzH,KAFRhB,EAAA,KAGRiQ,OAAOxD,QAAQzL,I,gBCHnB,IAAI0F,EAAM,CACTwJ,mDAAoD,GACpDC,8CAA+C,GAC/CC,oDAAqD,GACrDC,+DAAgE,GAChEC,kFAAmF,GACnFC,yEAA0E,GAC1EC,+DAAgE,IAIjE,SAASC,EAAeC,GACvB,IAAIpM,EAAKqM,EAAsBD,GAC/B,OAAO1Q,EAAoBsE,GAE5B,SAASqM,EAAsBD,GAC9B,GAAI1Q,EAAoBY,EAAE8F,EAAKgK,GAK/B,OAAOhK,EAAIgK,GAJV,IAAIE,EAAI,IAAIpF,MAAM,uBAAyBkF,EAAM,KAEjD,MADAE,EAAEC,KAAO,mBACHD,EAIRH,EAAeR,KAAO,WACrB,OAAOnR,OAAOmR,KAAKvJ,IAEpB+J,EAAeK,QAAUH,GACzBtQ,EAAOD,QAAUqQ,GACFnM,GAAK,I,6FC5BpB,IAAAgK,EAAAtO,EAAA,GAEI+Q,GAAgB,EAEpBzC,EAAAhF,YAAY0H,EAAWC,GAEvB3C,EAAAvG,KAAK,0BAA2B,WAC9BgJ,GAAgB,EAEXzC,EAAA7G,eACHC,QAAQM,IAAI,sBAIhBgI,WAEA,WACE,IAAKe,EAEH,MADA7J,SAASqB,KAAKC,MAAMC,gBAAkB,SAChC,IAAI+C,MAAM,0BALG,K,sLCdvB,IAAA0F,EAAAlR,EAAA,GAGAyJ,EAAAzJ,EAAA,GACAsO,EAAAtO,EAAA,GACAmR,EAAAnR,EAAA,GAoBA,SAASoR,EAAsBtH,GAC7B,OAAQA,EACLwC,WAAW,MACX+E,aAAa,EAAG,EAAGvH,EAAOiC,MAAOjC,EAAOkC,QACxC3N,KAAKiT,KAAK,SAACC,GAAY,OAAY,IAAZA,IAG5B,SAASC,EAAmB1H,GAE1B,OADgBA,EAAOwC,WAAW,MACVmF,cAAcC,MACpC,SAACzO,GACC,MAAW,cAAXA,EAAE0O,MACS,gBAAX1O,EAAE0O,OAED,iBAAiB5J,KAAK9E,EAAE0O,QAhC/BrD,EAAAhF,YAAY0H,EAAWC,GAEvB3C,EAAAvG,KAAK,0BAA2B,WAC9B,IAAM+B,EAAS5C,SAAS6C,cAAc,UAChC8B,EAAQsF,EAAAxH,gBAAgB,CAAEG,OAAMA,IAChC8H,EAAgBtD,EAAA7G,cAClB+J,EACAJ,EAEJvF,EAAMa,SACNwE,GAAQU,EAAc9H,MAGxBwE,EAAAvG,KAAK,+BAAgC,WACnC,IAAMnF,EAAO6G,EAAAtF,aACb+M,EAAOtO,O,8ZCtBT,IAAAiP,EAAA7R,EAAA,GAEAwO,EAAAxO,EAAA,GACAyJ,EAAAzJ,EAAA,GACAqC,EAAArC,EAAA,GACAsO,EAAAtO,EAAA,GACAmR,EAAAnR,EAAA,GAEAsO,EAAAhF,YAAY0H,EAAWC,GAEvB3C,EAAAvG,KACE,+DACA,CAAC,CAAC1F,EAAAkC,OAAO,IAAK,CAAClC,EAAAkC,OAAO,IAAK,CAAClC,EAAAkC,OAAO,KACnC,SAAC1B,GACC,IAAMD,EAAO6G,EAAAtF,WAAW,CACtBrB,SAAUuB,EAAF,GAAOxB,KAGjBR,EAAA2D,WAAW,SAACC,GAAS,OAAA4L,EAAAC,MAAYlP,EAAKE,SAASmD,GAAOpD,EAAIoD,GAAOA,OAIrEqI,EAAAvG,KACE,oCACA,CACE,CAAC1F,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,IAC9B,CAAClC,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,IAC9B,CAAClC,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,IAC9B,CAAClC,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,KAEhC,SAAC1B,EAAKkL,EAAKgE,GACT,IAAMnP,EAAO6G,EAAAtF,WAAW,CACtBrB,SAAUuB,EAAF,GAAOxB,GACfQ,SAAUgB,EAAF,GAAO0J,KAELoD,EAAAxH,gBAAgB,CAC1BK,MAAO,CAACpH,GACRsH,UAAW,CAACsE,EAAA7D,QAGV6B,OAEJnK,EAAA2D,WAAW,SAACC,GAAS,OAAA4L,EAAAC,MAAYlP,EAAKE,SAASmD,GAAO8L,EAAI9L,U,uLC1C9D,IAAA4L,EAAA7R,EAAA,GAEAgS,EAAAhS,EAAA,IACAyJ,EAAAzJ,EAAA,GACAqC,EAAArC,EAAA,GACAsO,EAAAtO,EAAA,GACAmR,EAAAnR,EAAA,GAEAsO,EAAAhF,YAAY0H,EAAWC,GAEvB3C,EAAAvG,KAAK,gEAAiE,WACpE,IAAMnF,EAAO6G,EAAAtF,WAAW,CAAEX,OAAQ,IACtB2N,EAAAxH,gBAAgB,CAC1BO,UAAW,CAAC8H,EAAAC,iBACZjI,MAAO,CAACpH,KAGN4J,OAEJnK,EAAA2D,WAAW,SAACC,GAAS,OAAA4L,EAAAC,MAAMlP,EAAKE,SAASmD,GAAO,EAAGA,OAGrDqI,EAAAvG,KAAK,kEAAmE,WACtE,IAAMnF,EAAO6G,EAAAtF,WAAW,CAAEd,SAAUhB,EAAAkC,QAAQ,KAChC4M,EAAAxH,gBAAgB,CAC1BO,UAAW,CAAC8H,EAAAC,iBACZjI,MAAO,CAACpH,KAGN4J,OAEJnK,EAAA2D,WAAW,SAACC,GAAS,OAAA4L,EAAAC,MAAMlP,EAAKS,SAAS4C,GAAO,EAAGA,OAGrDqI,EAAAvG,KAAK,6EAA8E,WACjF,IACMnF,EAAO6G,EAAAtF,WAAW,CAAErB,SAAUT,EAAAkC,OADvB,KACqCf,OAAQ,IAC9C2N,EAAAxH,gBAAgB,CAC1BO,UAAW,CAAC8H,EAAAC,iBACZjI,MAAO,CAACpH,GACRqH,UAAW5H,EAAAkC,OALA,OAQTiI,OAEJnK,EAAA2D,WAAW,SAACC,GAAS,OAAA4L,EAAAC,MAAMlP,EAAKE,SAASmD,GAAO,IAAKA,OAGvDqI,EAAAvG,KAAK,+EAAgF,WACnF,IACMnF,EAAO6G,EAAAtF,WAAW,CACtBrB,SAAUT,EAAAkC,OAFC,KAGXlB,SAAUhB,EAAAkC,OAAO,KAEP4M,EAAAxH,gBAAgB,CAC1BO,UAAW,CAAC8H,EAAAC,iBACZjI,MAAO,CAACpH,GACRqH,UAAW5H,EAAAkC,OARA,OAWTiI,OAEJnK,EAAA2D,WAAW,SAACC,GAAS,OAAA4L,EAAAC,MAAMlP,EAAKS,SAAS4C,IAAQ,EAAGA,S,4MC3DtD7F,EAAA6R,gBAAA,SAAgCrP,EAAYwC,G,IAAEC,EAAID,EAAAC,KAC5CzC,EAAKE,SAASG,EAAIL,EAAKY,OAAS,IAClCZ,EAAKE,SAASG,EAAIL,EAAKY,OACvBZ,EAAKS,SAASJ,EAAIV,KAAK2P,IAAItP,EAAKS,SAASJ,IAGvCL,EAAKE,SAASI,EAAIN,EAAKY,OAAS,IAClCZ,EAAKE,SAASI,EAAIN,EAAKY,OACvBZ,EAAKS,SAASH,EAAIX,KAAK2P,IAAItP,EAAKS,SAASH,IAGvCN,EAAKE,SAASG,EAAIL,EAAKY,OAAS6B,EAAKpC,IACvCL,EAAKE,SAASG,EAAIoC,EAAKpC,EAAIL,EAAKY,OAChCZ,EAAKS,SAASJ,GAAKV,KAAK2P,IAAItP,EAAKS,SAASJ,IAGxCL,EAAKE,SAASI,EAAIN,EAAKY,OAAS6B,EAAKnC,IACvCN,EAAKE,SAASI,EAAImC,EAAKnC,EAAIN,EAAKY,OAChCZ,EAAKS,SAASH,GAAKX,KAAK2P,IAAItP,EAAKS,SAASH,M,qUCrB9C,IAAA2O,EAAA7R,EAAA,GAEAyO,EAAAzO,EAAA,IACAyJ,EAAAzJ,EAAA,GACAqC,EAAArC,EAAA,GACAsO,EAAAtO,EAAA,GACAmR,EAAAnR,EAAA,GAEAsO,EAAAhF,YAAY0H,EAAWC,GAIvB3C,EAAAvG,KACE,qFACA,CACE,CAAC1F,EAAAkC,OAAO,EAAG4N,KAAW9P,EAAAkC,OAAO,EAAG,IAChC,CAAClC,EAAAkC,OAAO4N,IAAU,GAAI9P,EAAAkC,OAAO,EAAG,IAChC,CAAClC,EAAAkC,OAAO4N,KAAW9P,EAAAkC,OAAO,IAC1B,CAAClC,EAAAkC,OAAO,GAAI,GAAIlC,EAAAkC,OAAO,EAAG4N,MAC1B,CAAC9P,EAAAkC,QAAQ,EAAG,GAAIlC,EAAAkC,OAAO4N,IAAU,IACjC,CAAC9P,EAAAkC,QAAQ,GAAIlC,EAAAkC,OAAO4N,OAEtB,SAACtP,EAAKkP,GACJ,IAAMnP,EAAO6G,EAAAtF,WAAW,CAAErB,SAAUuB,EAAF,GAAOxB,KAC7BsO,EAAAxH,gBAAgB,CAC1BO,UAAW,CAACuE,EAAA7B,UACZ5C,MAAO,CAACpH,GACRqH,UAAW5H,EAAAkC,OAjBJ,OAoBLiI,OAEJnK,EAAA2D,WAAW,SAACC,GAAS,OAAA4L,EAAAC,MAAMlP,EAAKE,SAASmD,GAAO8L,EAAI9L,U,6bChCxD,IAAA4L,EAAA7R,EAAA,GAEAuO,EAAAvO,EAAA,IAKAoS,EAAApS,EAAA,IAKAwO,EAAAxO,EAAA,GACAyJ,EAAAzJ,EAAA,GACAqC,EAAArC,EAAA,GACAqS,EAAArS,EAAA,IACAsO,EAAAtO,EAAA,GACAmR,EAAAnR,EAAA,GAIAsO,EAAAhF,YAAY0H,EAAWC,GAEvB,CACE,CACEvQ,KAAM,WACN8M,mBAAoBe,EAAAf,mBACpBC,iBAAkBc,EAAAd,iBAClBC,mBAAoBa,EAAAb,oBAEtB,CACEhN,KAAM,YACN8M,mBAAoB4E,EAAA5E,mBACpBC,iBAAkB2E,EAAA3E,iBAClBC,mBAAoB0E,EAAA1E,qBAEtBjB,QACA,SAACrH,G,IAAE1E,EAAI0E,EAAA1E,KAAE8M,EAAkBpI,EAAAoI,mBAAEC,EAAgBrI,EAAAqI,iBAAEC,EAAkBtI,EAAAsI,mBAC/DY,EAAAvG,KAAQrH,EAAI,8CAA+C,WACzD,IAAMmL,EAAQsF,EAAAxH,gBAAgB,CAC5BO,UAAW,CAACsE,EAAA7D,MACZX,MAAO,CACLP,EAAAtF,WAAW,CAAErB,SAAUT,EAAAkC,OAAO,IAAKlB,SAAUhB,EAAAkC,QAAQ,GAAI,KACzDkF,EAAAtF,WAAW,CAAErB,SAAUT,EAAAkC,OAAO,IAAKlB,SAAUhB,EAAAkC,OAAO,QAIxDsH,EAAMW,OACA,IAAApH,EAAkByG,EAAM7B,MAAvBrB,EAAKvD,EAAA,GAAEwD,EAAMxD,EAAA,GAEpB/C,EAAA2D,WAAW,SAACC,GAAS,OAAA4L,EAAAC,MAAMnJ,EAAMtF,SAAS4C,IAAQ,KAClD5D,EAAA2D,WAAW,SAACC,GAAS,OAAA4L,EAAAC,MAAMlJ,EAAOvF,SAAS4C,GAAO,OAGpDqI,EAAAvG,KACKrH,EAAI,2CACP,CACE,CAAC2B,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,EAAG,IAEtB,CAAClC,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,EAAG,IACtB,CAAClC,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,IACnB,CAAClC,EAAAkC,OAAO,GAAIlC,EAAAkC,QAAQ,EAAG,IACvB,CAAClC,EAAAkC,OAAO,GAAIlC,EAAAkC,OAAO,GAAI,IACvB,CAAClC,EAAAkC,OAAO,GAAIlC,EAAAkC,QAAQ,GAAI,KAE1B,SAAC+N,EAAWC,GACV,IAAM1G,EAAQsF,EAAAxH,gBAAgB,CAC5BO,UAAW,CAACsD,GACZxD,MAAO,CACLP,EAAAtF,WAAW,CAAErB,SAAUT,EAAAkC,OAAO,IAAKlB,SAAUgB,EAAF,GAAOiO,KAClD7I,EAAAtF,WAAW,CAAErB,SAAUT,EAAAkC,OAAO,IAAKlB,SAAUgB,EAAF,GAAOkO,QAIhDC,EAAcnQ,EAAA+D,SAASkM,GACvBG,EAAgBpQ,EAAA+D,SAASmM,GAE/B1G,EAAMW,OACN,IAAMkG,EAAM7G,EAAM7B,MAAM,GAElB2I,EAAatQ,EAAA+D,SAASsM,EAAIrP,UAChCwO,EAAAe,SAASD,EAAYH,GACrBH,EAAAQ,qBAAqBF,EAAYH,EAAaC,KAIlDnE,EAAAvG,KACKrH,EAAI,kDACP,CACE,CAAC2B,EAAAkC,OAAO,KACR,CAAClC,EAAAkC,QAAQ,KACT,CAAClC,EAAAkC,OAAO,IAAK,KACb,CAAClC,EAAAkC,QAAQ,GAAI,MAIf,SAAC1B,GACC,IAAMgJ,EAAQsF,EAAAxH,gBAAgB,CAC5BO,UAAW,CAACuD,GACZzD,MAAO,CACLP,EAAAtF,WAAW,CACTrB,SAAUT,EAAAkC,OAAO,GACjBlB,SAAUhB,EAAAkC,OAAO,GACjBG,OAAQ,KAEV+E,EAAAtF,WAAW,CAAErB,SAAUuB,EAAF,GAAOxB,GAAOQ,SAAUhB,EAAAkC,OAAO,QAIxDsH,EAAMW,OAEN,IAAMkG,EAAM7G,EAAM7B,MAAM,GAElB2I,EAAatQ,EAAA+D,SAASsM,EAAIrP,UAEhCwO,EAAAe,SAASD,EAHW,GAIpBN,EAAAQ,qBAAqBF,EAJD,EAI0BtQ,EAAA+D,SAASvD,MAI3DyL,EAAAvG,KACKrH,EAAI,2DACP,CACE,CAAC2B,EAAAkC,OAAO,KACR,CAAClC,EAAAkC,OAAO,GAAI,IACZ,CAAClC,EAAAkC,QAAQ,KACT,CAAClC,EAAAkC,QAAQ,GAAI,MAIf,SAAC1B,GAEC,IAAMiQ,EAAezQ,EAAAkC,QAAQ,IAAK,KAE5BsH,EAAQsF,EAAAxH,gBAAgB,CAC5BO,UAAW,CAACwD,GACZ1D,MAAO,CACLP,EAAAtF,WAAW,CACTrB,SAAUgQ,EACVzP,SAAUhB,EAAAkC,OAAO,GACjBG,OAAQ,KAEV+E,EAAAtF,WAAW,CACTrB,SAAUT,EAAAkE,WAAWuM,EAAcjQ,GACnCQ,SAAUhB,EAAAkC,OAAO,QAKvBsH,EAAMW,OAEN,IAAMkG,EAAM7G,EAAM7B,MAAM,GAElB2I,EAAatQ,EAAA+D,SAASsM,EAAIrP,UAC5B0P,EAAkB1Q,EAAA+D,SAASvD,GAAO,IAEhB,IAAlBkQ,IACFA,GAAmB,KAGrBlB,EAAAe,SAASD,EARW,GASpBN,EAAAQ,qBAAqBF,EATD,EAS0BI,S,4QC/JtD,IAAAtJ,EAAAzJ,EAAA,GACAoC,EAAApC,EAAA,GAQAqC,EAAArC,EAAA,GAuBA,SAAS6M,EAAWjK,EAAYkK,GAC9B,IAAMC,EAAMD,EAAUlG,OACpB,SAACmG,EAAK9J,GAAM,OAAAZ,EAAAkE,WAAWwG,EAAK9J,EAAEI,WAC9BhB,EAAAkC,OAAO,IAGHyI,EAAU3K,EAAA0E,gBAAgBgG,EAAK,EAAID,EAAUjO,QAC7CmU,EAAU3Q,EAAAuD,UAAUoH,GACpBiG,EAAW5Q,EAAA6C,gBAAgB8N,EAASpQ,EAAKS,UAC/C,OAAOhB,EAAA0E,gBAAgBkM,EAAU7Q,EAAAkI,4BAGnC,SAAS4C,EAAStK,EAAYkK,GAC5B,IAAMC,EAAMD,EAAUlG,OACpB,SAACmG,EAAK9J,GAAM,OAAAZ,EAAAkE,WAAWwG,EAAK9J,EAAEH,WAC9BT,EAAAkC,OAAO,IAGHyI,EAAU3K,EAAA0E,gBAAgBgG,EAAK,EAAID,EAAUjO,QAC7CmU,EAAU3Q,EAAA6C,gBAAgB8H,EAASpK,EAAKE,UACxCmQ,EAAW5Q,EAAA6C,gBAAgB8N,EAASpQ,EAAKS,UAC/C,OAAOhB,EAAA0E,gBAAgBkM,EAAU7Q,EAAAmI,0BAGnC,SAAS4C,EAAWvK,EAAYkK,GAC9B,IAAMxG,EAAQ1D,EAAK8B,OAAStC,EAAAqI,iCACxByI,EAAQ,EAENnG,EAAMD,EAAUlG,OAAO,SAACmG,EAAK9J,GACjC,IAAMoL,EAAW5E,EAAA3E,aAAalC,EAAMK,GAC9BkQ,EAAiB9E,EAAWzL,EAAKY,OAASP,EAAEO,OAElD,GAAe8C,EAAX+H,EACF,OAAOtB,EAGTmG,IACA,IAAME,EAAO/Q,EAAA6C,gBAAgBtC,EAAKE,SAAUG,EAAEH,UACxC2M,EAAWlN,KAAKqJ,IAAIuH,EAAgB/Q,EAAAsI,kCACpCsI,EAAU3Q,EAAA0E,gBAAgBqM,EAAM,EAAI3D,GAC1C,OAAOpN,EAAAkE,WAAWwG,EAAKiG,IACtB3Q,EAAAkC,OAAO,IAEV,GAAc,IAAV2O,EACF,OAAO7Q,EAAAkC,OAAO,GAGhB,IAAMyI,EAAU3K,EAAA0E,gBAAgBgG,EAAK,EAAImG,GACnCG,EAAWhR,EAAA6C,gBAAgB8H,EAASpK,EAAKS,UAC/C,OAAOhB,EAAA0E,gBAAgBsM,EAAUjR,EAAAoI,4BAGnC,SAAS6C,EACPC,GAEA,OAAO,SAAC1K,EAAYwC,G,IACZ0H,GAAYX,EADM/G,EAAA+G,MACDvJ,EAAK8B,QAE5B,GAAKoI,EAAUjO,OAAf,CAIA,IAAMyU,EAAShG,EAAG1K,EAAMkK,GAExBlK,EAAKS,SAASJ,GAAKqQ,EAAOrQ,EAC1BL,EAAKS,SAASH,GAAKoQ,EAAOpQ,IA9EjB9C,EAAAmN,SAAWF,EAKxB,SAAsBzK,EAAYkK,GAChC,OAAOzK,EAAAmE,cAAc,CACnBqG,EAAWjK,EAAMkK,GACjBI,EAAStK,EAAMkK,GACfK,EAAWvK,EAAMkK,OARR1M,EAAAoN,mBAAqBH,EAAiBR,GACtCzM,EAAAqN,iBAAmBJ,EAAiBH,GACpC9M,EAAAsN,mBAAqBL,EAAiBF,I,4HCxBnD,IAAA+D,EAAAlR,EAAA,GAEAI,EAAAmT,cAAA,SACEpS,EACAwH,EACAC,EACAtB,QAAA,IAAAA,MAAA,IAEA,IAAMqE,EAAMpJ,KAAKoJ,IAAIhD,EAAOC,GACtBgD,EAAMrJ,KAAKqJ,IAAIjD,EAAOC,GACtB4K,EAAe,YAAYrS,EAAK,kBAAkBwK,EAAG,QAAQC,EAAG,KAAKtE,EAAO,IAE9EqE,IAAQC,GAKZsF,EAAevF,EAARxK,EAAaqS,GACpBtC,EAAO/P,EAAQyK,EAAK4H,IALlBtC,EAAO/P,IAAUwK,EAAK6H,IAQ1BpT,EAAAyS,qBAAA,SACE1R,EACAwH,EACAC,EACAtB,QAAA,IAAAA,MAAA,IAEA,IAAMqE,EAAMpJ,KAAKoJ,IAAIhD,EAAOC,GACtBgD,EAAMrJ,KAAKqJ,IAAIjD,EAAOC,GACtB4K,EAAe,YAAYrS,EAAK,kBAAkBwK,EAAG,QAAQC,EAAG,KAAKtE,EAAO,IAE9EqE,IAAQC,GAKZsF,EAAgBvF,GAATxK,EAAcqS,GACrBtC,EAAO/P,GAASyK,EAAK4H,IALnBtC,EAAO/P,IAAUwK,EAAK6H,K,qUChC1B,IAAAtC,EAAAlR,EAAA,GAEA0O,EAAA1O,EAAA,IACAyJ,EAAAzJ,EAAA,GACAqC,EAAArC,EAAA,GACAsO,EAAAtO,EAAA,GACAmR,EAAAnR,EAAA,GAEAsO,EAAAhF,YAAY0H,EAAWC,GAEvB3C,EAAAvG,KACE,+DACA,CACE,CAAC1F,EAAAkC,OAAO,EAAG,GAAIlC,EAAAkC,QAAQ,EAAG,GAAIlC,EAAAkC,OAAO,EAAG,IACxC,CAAClC,EAAAkC,OAAO,EAAG,GAAIlC,EAAAkC,OAAO,GAAI,GAAIlC,EAAAkC,OAAO,EAAG,IACxC,CAAClC,EAAAkC,OAAO,GAAIlC,EAAAkC,QAAQ,GAAIlC,EAAAkC,OAAO,sBAEjC,SAACkP,EAAMC,EAAMC,GACX,IAAM9H,EAAQsF,EAAAxH,gBAAgB,CAC5BO,UAAW,CAACwE,EAAAT,WACZjE,MAAO,CACLP,EAAAtF,WAAW,CAAErB,SAAUuB,EAAF,GAAOoP,GAAQpQ,SAAUhB,EAAAkC,OAAO,KACrDkF,EAAAtF,WAAW,CAAErB,SAAUuB,EAAF,GAAOqP,GAAQrQ,SAAUhB,EAAAkC,OAAO,QAIzDsH,EAAMW,OACN,IAAMkG,EAAM7G,EAAM7B,MAAM,GAExB3H,EAAA2D,WAAW,SAACC,GAAS,OAAAiL,EAAOY,MAAMY,EAAI5P,SAASmD,GAAO0N,EAAS1N,QAInEqI,EAAAvG,KAAK,kDAAmD,WACtD,IAAM8D,EAAQsF,EAAAxH,gBAAgB,CAC5BO,UAAW,CAACwE,EAAAT,WACZjE,MAAO,CACLP,EAAAtF,WAAW,CAAErB,SAAUT,EAAAkC,OAAO,GAAIlB,SAAUhB,EAAAkC,QAAQ,KACpDkF,EAAAtF,WAAW,CAAErB,SAAUT,EAAAkC,QAAQ,GAAIlB,SAAUhB,EAAAkC,OAAO,QAIxDsH,EAAMW,OACN,IAAMkG,EAAM7G,EAAM7B,MAAM,GAExB3H,EAAA2D,WAAW,SAACC,GAAS,OAAAiL,EAA6B,GAAtBwB,EAAIrP,SAAS4C,U","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([14,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { bajarColor, Color } from './color';\nimport { DEFAULT_RADIUS, DEFAULT_VISION_FACTOR } from './CONFIGURATION';\nimport { World } from './lulas';\nimport {\n  logVector,\n  magnitude,\n  radians,\n  subtractVectors,\n  Vector,\n  vector,\n} from './vector';\n\nconst ANGLE_CORRECTION = Math.PI / 4;\n\nexport type CellId = '[number CellId]';\nlet lastId = 0;\n\nfunction getNextId() {\n  return (lastId++ as any) as CellId;\n}\n\nexport interface Cell {\n  id: CellId;\n  color: Color;\n  position: Vector;\n  velocity: Vector;\n  acceleration: Vector;\n  radius: number;\n  vision: number;\n}\n\nexport function createCell(partial?: Partial<Cell>): Cell {\n  return {\n    id: getNextId(),\n    color: '#ffffff' as Color,\n    position: vector(0),\n    velocity: vector(0),\n    acceleration: vector(0),\n    radius: DEFAULT_RADIUS,\n    vision:\n      (partial && partial.radius ? partial.radius : DEFAULT_RADIUS) *\n      DEFAULT_VISION_FACTOR,\n    ...partial,\n  };\n}\n\nexport function applyForce(cell: Cell, force: Vector) {\n  cell.velocity.x += force.x;\n  cell.velocity.y += force.y;\n}\n\nexport function cellDistance(left: Cell, right: Cell) {\n  return magnitude(subtractVectors(left.position, right.position));\n}\n\nexport function renderCell(\n  context: CanvasRenderingContext2D,\n  { size }: World,\n  cell: Cell,\n) {\n  const renderRadius = cell.radius + 10;\n  const { position: pos } = cell;\n\n  renderAt(context, cell);\n\n  if (pos.x - renderRadius < 0) {\n    renderAt(context, cell, { x: pos.x + size.x, y: pos.y });\n  }\n  if (pos.x + renderRadius > size.x) {\n    renderAt(context, cell, { x: pos.x - size.x, y: pos.y });\n  }\n\n  if (pos.y - renderRadius < 0) {\n    renderAt(context, cell, { x: pos.x, y: pos.y + size.y });\n  }\n  if (pos.y + renderRadius > size.y) {\n    renderAt(context, cell, { x: pos.x, y: pos.y - size.y });\n  }\n}\n\nfunction renderAt(\n  context: CanvasRenderingContext2D,\n  cell: Cell,\n  pos = cell.position,\n) {\n  context.save();\n  context.translate(pos.x, pos.y);\n\n  context.rotate(radians(cell.velocity) + ANGLE_CORRECTION);\n  context.beginPath();\n  context.arc(0, 0, cell.radius, 0, Math.PI * 1.5);\n  context.lineTo(cell.radius, -cell.radius);\n  // context.lineTo(cell.radius, 0);\n  context.closePath();\n  context.lineWidth = 5;\n  context.strokeStyle = cell.color;\n  context.fillStyle = bajarColor(cell.color, 0.5);\n  context.stroke();\n  context.fill();\n\n  context.restore();\n}\n\nexport function logCell(cell: Cell) {\n  return `Cell(${cell.id}) ${cell.radius} { pos: ${logVector(\n    cell.position,\n  )}, vel: ${logVector(cell.velocity)} }`;\n}\n","export interface Vector {\n  x: number;\n  y: number;\n}\n\nexport function vector(x: number, y = x): Vector {\n  return { x, y };\n}\n\nexport function isZero({ x, y }: Vector) {\n  return x === 0 && y === 0;\n}\n\nexport function magnitude({ x, y }: Vector) {\n  return Math.sqrt(x ** 2 + y ** 2);\n}\n\nexport function normalize(point: Vector, targetMagnitude = 1) {\n  if (isZero(point)) {\n    return { ...point };\n  }\n\n  const mag = magnitude(point);\n  return vectorAxis((axis) => (point[axis] * targetMagnitude) / mag);\n}\n\nexport function radians({ x, y }: Vector) {\n  return Math.atan2(y, x);\n}\n\nexport function getAngle(vector: Vector) {\n  return (radians(vector) * 180) / Math.PI;\n}\n\nexport function limitVector(point: Vector, limit: number) {\n  const mag = magnitude(point);\n  return mag > limit ? normalize(point, limit) : point;\n}\n\nexport function sumVectors(left: Vector, right: Vector): Vector {\n  return vectorAxis((axis) => left[axis] + right[axis]);\n}\n\nexport function sumVectorList(vectors: Vector[]): Vector {\n  return vectorAxis((axis) =>\n    vectors.map((v) => v[axis]).reduce((a, b) => a + b),\n  );\n}\n\nexport function subtractVectors(left: Vector, right: Vector) {\n  return vectorAxis((axis) => left[axis] - right[axis]);\n}\n\nexport function multiplyVectors(point: Vector, value: number) {\n  return vectorAxis((axis) => point[axis] * value);\n}\n\nexport function vectorAxis(operate: (key: 'x' | 'y') => number): Vector;\nexport function vectorAxis(operate: (key: 'x' | 'y') => void): void;\nexport function vectorAxis(\n  operate: (key: 'x' | 'y') => number | void,\n): Vector | void {\n  const x = operate('x');\n  const y = operate('y');\n\n  if (typeof x === 'number' && typeof y === 'number') {\n    return { x, y };\n  }\n}\n\nexport function logVector(point: Vector) {\n  return `(${point.x},${point.y})`;\n}\n","type TestRun<T extends any[]> = (...args: T) => Promise<any> | void;\n\ninterface UnitTest_Basic {\n  file: string;\n  message: string;\n  table: null;\n  run: TestRun<[]>;\n}\n\ninterface UnitTest_Table<T extends any[] = []> {\n  file: string;\n  message: string;\n  table: T[];\n  run: TestRun<T>;\n}\n\ntype UnitTest<T extends any[]> = UnitTest_Basic | UnitTest_Table<T>;\n\n// -----\n\nconst tests: UnitTest<any>[] = [];\nconst documentTitle = document.title;\nlet file = '';\n\nexport const isJestTesting = Boolean(\n  typeof global !== 'undefined' && (global as any).test,\n);\n\nexport function test(message: string, run: TestRun<[]>): void;\nexport function test<T extends any[]>(\n  message: string,\n  table: T[],\n  run: TestRun<T>,\n): void;\n\nexport function test<T extends any[]>(\n  message: string,\n  first: TestRun<[]> | T[],\n  second?: TestRun<T>,\n): void {\n  const table = Array.isArray(first) ? first : null;\n  const run = table ? second : (first as TestRun<T>);\n  const unit = { file, message, table, run } as UnitTest<T>;\n\n  if (isJestTesting) {\n    executeTest(unit);\n  } else {\n    tests.push(unit);\n  }\n}\n\nexport function runTests({ background }: { background?: string } = {}) {\n  setInitialState();\n  let lastFile = '';\n\n  for (const unit of tests) {\n    if (!isJestTesting && unit.file !== lastFile) {\n      console.groupEnd();\n      lastFile = unit.file;\n      console.groupCollapsed(unit.file);\n    }\n\n    executeTest(unit);\n  }\n\n  if (!isJestTesting) {\n    console.groupEnd();\n  }\n\n  tests.length = 0;\n  document.title = documentTitle;\n  setSuccessState(background);\n}\n\nexport function setFilename(dirname: string, filename: string) {\n  file = filename.replace(`${dirname}/`, '').replace(/(\\.test)?\\.ts$/, '');\n}\n\nfunction executeTest<T extends any[]>({\n  file,\n  message,\n  table,\n  run,\n}: UnitTest<T>) {\n  if (!table) {\n    runTest(file, message, run as TestRun<[]>);\n    return;\n  }\n\n  if (!isJestTesting) {\n    console.groupCollapsed(message);\n  }\n\n  for (let i = 0; i < table.length; i++) {\n    runTest(file, `${message} [${i}]`, () => run(...table[i]));\n  }\n\n  if (!isJestTesting) {\n    console.groupEnd();\n  }\n}\n\nfunction runTest(file: string, message: string, run: TestRun<[]>) {\n  if (isJestTesting) {\n    (global as any).test(message, run);\n    return;\n  }\n\n  try {\n    run();\n    console.log(`${message} 🟢`);\n  } catch (error) {\n    printError(file, error, message);\n    setFailState();\n    throw error;\n  }\n}\n\nfunction printError(file: string, error: Error, message: string) {\n  console.log(`${message} 🔴`);\n  console.error(error);\n  document.write(`\n    <div style=\"display: flex; align-items:center; justify-content: center; height: 100%\">\n    <span>\n      <h1>${file}</h1>\n      <h2>${message}</h2>\n      <pre>${error.stack?.replace('\\n', '<br>')}}</pre>\n    </span>\n    </div>\n  `);\n}\n\n// -----\n\nfunction setInitialState() {\n  setFailState();\n}\n\nfunction setFailState() {\n  document.body.style.backgroundColor = '#440000';\n}\n\nfunction setSuccessState(background = 'green') {\n  document.body.style.backgroundColor = background;\n}\n","import { createCell } from '../src/cell';\nimport lulas, { LulasConfig } from '../src/lulas';\n\nexport function createTestLulas(config: Partial<LulasConfig> = {}) {\n  return lulas({\n    canvas: document.createElement('canvas'),\n    cells: [createCell()],\n    worldSize: { x: 1000, y: 1000 },\n    behaviors: [],\n    ...config,\n  });\n}\n","export const DEFAULT_RADIUS = 5;\nexport const MAX_SPEED = 2;\nexport const MAX_FORCE = 0.5;\n\n// Multiplier for cell's radius\nexport const DEFAULT_VISION_FACTOR = 10;\n\n// Friction when two cells collide\nexport const COLLISION_FRICTION = 0.5;\n\nexport const FLOCKING_ALIGMENENT_FACTOR = 0.05;\nexport const FLOCKING_COHESION_FACTOR = 0.001;\nexport const FLOCKING_SEPARATION_FACTOR = 0.005;\n\n// Multiplier over cell's vision\nexport const FLOCKING_SEPARATION_VISION_LIMIT = 0.5;\n// From this point separation becomes stronger\nexport const FLOCKING_SEPARATION_BORDER_LIMIT = 0.1;\n","import { Cell } from '../cell';\nimport { MAX_FORCE } from '../CONFIGURATION';\nimport { limitVector, sumVectors, vector } from '../vector';\n\nexport function move(cell: Cell) {\n  cell.velocity = sumVectors(\n    cell.velocity,\n    limitVector(cell.acceleration, MAX_FORCE),\n  );\n\n  // limitVector(a, MAX_SPEED);\n\n  cell.acceleration = vector(0);\n\n  cell.position.x += cell.velocity.x;\n  cell.position.y += cell.velocity.y;\n}\n","import { random } from './math';\n\nexport type Color = '[string Color]';\n\nexport function randomColor() {\n  return toString({\n    r: random(100, 200),\n    g: random(100, 200),\n    b: random(100, 200),\n    a: 1,\n  });\n}\n\nexport function bajarColor(color: Color, percent: number) {\n  const rgba = toRGBA(color);\n  rgba.r *= percent;\n  rgba.g *= percent;\n  rgba.b *= percent;\n  // rgba.a *= percent;\n  return toString(rgba);\n}\n\nfunction toRGBA(color: Color): RGBA {\n  const match = color.match(/#(\\w{2})(\\w{2})(\\w{2})(\\w{2})?/);\n\n  if (!match) {\n    throw new Error(`DAFUK COLOR IS DIS? ${color}`);\n  }\n\n  const [_, r, g, b, a] = match;\n\n  return {\n    r: parseInt(r, 16),\n    g: parseInt(g, 16),\n    b: parseInt(b, 16),\n    a: a ? parseInt(a, 16) / 255 : 1,\n  };\n}\n\nfunction toString({ r, g, b, a: alpha }: RGBA): Color {\n  const a = toHex(Math.round(alpha * 255));\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}${a}` as Color;\n}\n\nfunction toHex(val: number) {\n  const result = Math.round(val).toString(16);\n  return result.length === 1 ? `0${result}` : result;\n}\n\ninterface RGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n","// export function getSign(value: number) {\n//   if (value === 0) {\n//     return 0;\n//   }\n\n//   return value / Math.abs(value);\n// }\n\n// This is being used in production only\n/* istanbul ignore next */\nexport function random(first: number, second = -first) {\n  const min = Math.min(first, second);\n  const max = Math.max(first, second);\n  return Math.round(Math.random() * (max - min) + min);\n}\n","import { Cell, cellDistance, renderCell } from './cell';\nimport { Vector } from './vector';\n\nexport interface World {\n  size: Vector;\n  look: (radius: number) => Cell[];\n}\n\nexport type Behavior = (cell: Cell, world: World) => void;\n\nexport interface LulasConfig {\n  canvas: HTMLCanvasElement;\n  cells: Cell[];\n  behaviors: Behavior[];\n  worldSize?: Vector;\n}\n\nexport function lulas({\n  canvas,\n  cells,\n  behaviors,\n  worldSize = { x: canvas.width, y: canvas.height },\n}: LulasConfig) {\n  let currentCell: Cell | null = null;\n  const world = {\n    size: worldSize,\n    look(radius: number) {\n      return look(currentCell!, radius);\n    },\n  };\n\n  const context = canvas.getContext('2d')!;\n  const renderCellToContext = renderCell.bind(null, context, world);\n\n  return {\n    get cells() {\n      return cells;\n    },\n    step() {\n      cells = cells.map((x) => {\n        const cell = { ...x };\n        currentCell = x;\n        behaviors.forEach((b) => b(cell, world));\n        return cell;\n      });\n    },\n    render() {\n      context.strokeStyle = 'blue';\n      context.fillStyle = 'blue';\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      cells.forEach(renderCellToContext);\n    },\n  };\n\n  function look(target: Cell, radius: number): Cell[] {\n    return cells.filter(\n      (x) => x !== target && cellDistance(target, x) < radius,\n    );\n  }\n}\n\nexport default lulas;\n","import { Cell } from '../cell';\nimport { World } from '../lulas';\n\nexport function roundMap(cell: Cell, { size }: World) {\n  if (cell.position.x < 0) {\n    cell.position.x += size.x;\n  }\n\n  if (cell.position.y < 0) {\n    cell.position.y += size.y;\n  }\n\n  if (cell.position.x > size.x) {\n    cell.position.x -= size.x;\n  }\n\n  if (cell.position.y > size.y) {\n    cell.position.y -= size.y;\n  }\n}\n","import { applyForce, Cell, cellDistance } from '../cell';\nimport {\n  FLOCKING_ALIGMENENT_FACTOR,\n  FLOCKING_COHESION_FACTOR,\n  FLOCKING_SEPARATION_FACTOR,\n  FLOCKING_SEPARATION_VISION_LIMIT,\n} from '../CONFIGURATION';\nimport { Behavior, World } from '../lulas';\nimport {\n  multiplyVectors,\n  subtractVectors,\n  sumVectorList,\n  sumVectors,\n  vector,\n  Vector,\n} from '../vector';\n\nexport const flocking = requireNeighbors(flockingCore);\nexport const alignementBehavior = requireNeighbors(alignement);\nexport const cohesionBehavior = requireNeighbors(cohesion);\nexport const separationBehavior = requireNeighbors(separation);\n\nfunction flockingCore(cell: Cell, neighbors: Cell[]) {\n  return sumVectorList([\n    alignement(cell, neighbors),\n    cohesion(cell, neighbors),\n    separation(cell, neighbors),\n  ]);\n}\n\nfunction alignement(cell: Cell, neighbors: Cell[]) {\n  const sum = neighbors.map((x) => x.velocity).reduce(sumVectors, vector(0));\n  const average = multiplyVectors(sum, 1 / neighbors.length);\n  const relative = subtractVectors(average, cell.velocity);\n  return multiplyVectors(relative, FLOCKING_ALIGMENENT_FACTOR);\n}\n\nfunction cohesion(cell: Cell, neighbors: Cell[]) {\n  const sum = neighbors.map((x) => x.position).reduce(sumVectors, vector(0));\n  const average = multiplyVectors(sum, 1 / neighbors.length);\n  const relative = subtractVectors(average, cell.position);\n  return multiplyVectors(relative, FLOCKING_COHESION_FACTOR);\n}\n\nfunction separation(cell: Cell, neighbors: Cell[]) {\n  const limit = cell.vision * FLOCKING_SEPARATION_VISION_LIMIT;\n  const closer = neighbors.filter((x) => cellDistance(cell, x) < limit);\n\n  if (!closer.length) {\n    return vector(0);\n  }\n\n  const sum = closer.map((x) => x.position).reduce(sumVectors, vector(0));\n  const average = multiplyVectors(sum, 1 / closer.length);\n  const relative = subtractVectors(average, cell.position);\n  return multiplyVectors(relative, FLOCKING_SEPARATION_FACTOR * -1);\n}\n\nfunction requireNeighbors(\n  fn: (cell: Cell, neighbors: Cell[]) => Vector,\n): Behavior {\n  return (cell: Cell, { look }: World) => {\n    const neighbors = look(cell.vision);\n\n    if (!neighbors.length) {\n      return;\n    }\n\n    const force = fn(cell, neighbors);\n    applyForce(cell, force);\n  };\n}\n","import { Cell, cellDistance } from '../cell';\nimport { COLLISION_FRICTION } from '../CONFIGURATION';\nimport { World } from '../lulas';\nimport { multiplyVectors, normalize, Vector } from '../vector';\n\nexport function solidBody(cell: Cell, { look }: World) {\n  const collision = look(cell.radius * 2);\n\n  for (let i = 0; i < collision.length; i++) {\n    const other = collision[i];\n    const minDistance = other.radius + cell.radius;\n    const distance = cellDistance(other, cell);\n\n    if (distance < minDistance) {\n      collide(cell, other, (minDistance - distance) / 2);\n    }\n  }\n}\n\nfunction collide(a: Cell, b: Cell, correction: number) {\n  const adjustment = normalize(\n    {\n      x: a.position.x - b.position.x,\n      y: a.position.y - b.position.y,\n    },\n    correction,\n  );\n\n  a.position.x += adjustment.x;\n  a.position.y += adjustment.y;\n  b.position.x -= adjustment.x;\n  b.position.y -= adjustment.y;\n\n  collisionBrake_bounce(a, b, adjustment);\n}\n\nfunction collisionBrake_bounce(a: Cell, b: Cell, adjustment: Vector) {\n  const factor = 1 - COLLISION_FRICTION;\n  const vel = a.velocity;\n  a.velocity = multiplyVectors(b.velocity, factor);\n  b.velocity = multiplyVectors(vel, factor);\n}\n\n// function collisionBrake_reflect(a: Cell, b: Cell, adjustment: Vector) {\n//   const signX = getSign(adjustment.x);\n//   const signY = getSign(adjustment.y);\n\n//   if (getSign(a.velocity.x) === -signX) {\n//     a.velocity.x = -a.velocity.x * (1 - COLLISION_FRICTION);\n//   }\n\n//   if (getSign(a.velocity.y) === -signY) {\n//     a.velocity.y = -a.velocity.y * (1 - COLLISION_FRICTION);\n//   }\n\n//   if (getSign(b.velocity.x) === signX) {\n//     b.velocity.x = -b.velocity.x * (1 - COLLISION_FRICTION);\n//   }\n\n//   if (getSign(b.velocity.y) === signY) {\n//     b.velocity.y = -b.velocity.y * (1 - COLLISION_FRICTION);\n//   }\n// }\n","/* istanbul ignore file */\n\nimport '../test/user-stories';\n\nimport { runTests } from '../test/index';\nimport { flocking } from './behaviors/flocking';\nimport { move } from './behaviors/move';\nimport { roundMap } from './behaviors/roundMap';\nimport { solidBody } from './behaviors/solidBody';\nimport { createCell, logCell } from './cell';\nimport { randomColor } from './color';\nimport lulas from './lulas';\nimport { random } from './math';\nimport { vector } from './vector';\n\n(async () => {\n  setStyles();\n  await runTests({\n    background: 'black',\n  });\n  start();\n})();\n\nsetTimeout(() => {\n  document.body.style.backgroundColor = 'black';\n});\n\nfunction start() {\n  const canvas = document.createElement('canvas');\n  document.body.appendChild(canvas);\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n\n  const center = vector(canvas.width / 2, canvas.height / 2);\n  const createRandomCell = (i: number) =>\n    createCell({\n      position: { ...center },\n      velocity: vector(random(10), random(10)),\n      radius: random(5, 20),\n      color: randomColor(),\n    });\n\n  const game = lulas({\n    canvas,\n    cells: array(50, createRandomCell),\n    behaviors: [flocking, move, solidBody, roundMap],\n  });\n\n  console.log('Initial state');\n  logState();\n\n  game.render();\n  requestAnimationFrame(function frame() {\n    game.step();\n    game.render();\n    requestAnimationFrame(frame);\n  });\n\n  function logState() {\n    console.log(game.cells.map(logCell).join('\\n'));\n  }\n}\n\nfunction array<T>(size: number, operator: (pos: number) => T): T[] {\n  return Array(size)\n    .fill(null)\n    .map((_, i) => i + 1)\n    .map(operator);\n}\n\nfunction setStyles() {\n  const fullscreen = {\n    margin: 0,\n    padding: 0,\n    height: '100%',\n  };\n\n  for (const el of [document.documentElement, document.body]) {\n    Object.assign(el.style, fullscreen);\n  }\n}\n","requireAll((require as any).context('../user-stories/', true, /\\.ts$/));\n\nfunction requireAll(r: any) {\n  r.keys().forEach(r);\n}\n","var map = {\n\t\"./0 - As a developer I want to run tests.test.ts\": 17,\n\t\"./1 - As a user I want to see cells.test.ts\": 18,\n\t\"./2 - As a user I want to watch them move.test.ts\": 24,\n\t\"./3 - As a user I want them to bounce on the corners.test.ts\": 25,\n\t\"./3 - As a user I want them to navigate to the other side of the screen.test.ts\": 27,\n\t\"./4 - As a user I want to watch them follow flocking behaviour.test.ts\": 28,\n\t\"./5 - As a user I want to watch the cell not overlap.test.ts\": 31\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;","import { isJestTesting, setFilename, test } from '../test/index';\n\nlet isTestRunning = false;\n\nsetFilename(__dirname, __filename);\n\ntest('Should render something', () => {\n  isTestRunning = true;\n\n  if (!isJestTesting) {\n    console.log('Tests running...');\n  }\n});\n\nsetTimeout(testTester, 0);\n\nfunction testTester() {\n  if (!isTestRunning) {\n    document.body.style.backgroundColor = 'yellow';\n    throw new Error('Test suite not runnig');\n  }\n}\n","import * as assert from 'assert';\n\nimport { CanvasRenderingContext2DEvent } from '../node_modules/jest-canvas-mock/types/index.d';\nimport { createCell } from '../src/cell';\nimport { isJestTesting, setFilename, test } from '../test/index';\nimport { createTestLulas } from '../test/test-duplicates';\n\nsetFilename(__dirname, __filename);\n\ntest('Should render something', () => {\n  const canvas = document.createElement('canvas');\n  const lulas = createTestLulas({ canvas });\n  const isCanvasBlank = isJestTesting\n    ? isCanvasBlank_mock\n    : isCanvasBlank_browser;\n\n  lulas.render();\n  assert(!isCanvasBlank(canvas));\n});\n\ntest('Cells should be instanciable', () => {\n  const cell = createCell();\n  assert(cell);\n});\n\nfunction isCanvasBlank_browser(canvas: HTMLCanvasElement) {\n  return !canvas\n    .getContext('2d')!\n    .getImageData(0, 0, canvas.width, canvas.height)\n    .data.some((channel) => channel !== 0);\n}\n\nfunction isCanvasBlank_mock(canvas: HTMLCanvasElement) {\n  const context = canvas.getContext('2d')!;\n  return (context as any).__getEvents().every(\n    (x: CanvasRenderingContext2DEvent) =>\n      x.type === 'fillStyle' ||\n      x.type === 'strokeStyle' ||\n      // ((console.log(x.type, /^(fill|stroke)/.test(x.type)) as any) || true) ||\n      !/^(fill|stroke)/.test(x.type),\n  );\n}\n","import { equal as assertEqual } from 'assert';\n\nimport { move } from '../src/behaviors/move';\nimport { createCell } from '../src/cell';\nimport { vector, vectorAxis } from '../src/vector';\nimport { setFilename, test } from '../test/index';\nimport { createTestLulas } from '../test/test-duplicates';\n\nsetFilename(__dirname, __filename);\n\ntest(\n  'I should be able to create a cell with predefined parameters',\n  [[vector(0)], [vector(1)], [vector(2)]],\n  (pos) => {\n    const cell = createCell({\n      position: { ...pos },\n    });\n\n    vectorAxis((axis) => assertEqual(cell.position[axis], pos[axis], axis));\n  },\n);\n\ntest(\n  'The game will execute a cell step',\n  [\n    [vector(0), vector(1), vector(1)],\n    [vector(0), vector(2), vector(2)],\n    [vector(4), vector(1), vector(5)],\n    [vector(4), vector(2), vector(6)],\n  ],\n  (pos, vel, exp) => {\n    const cell = createCell({\n      position: { ...pos },\n      velocity: { ...vel },\n    });\n    const sut = createTestLulas({\n      cells: [cell],\n      behaviors: [move],\n    });\n\n    sut.step();\n\n    vectorAxis((axis) => assertEqual(cell.position[axis], exp[axis]));\n  },\n);\n","import { equal } from 'assert';\n\nimport { bounceOnCorners } from '../src/behaviors/bounceOnCorners';\nimport { createCell } from '../src/cell';\nimport { vector, vectorAxis } from '../src/vector';\nimport { setFilename, test } from '../test/index';\nimport { createTestLulas } from '../test/test-duplicates';\n\nsetFilename(__dirname, __filename);\n\ntest('A cell in (0,0) will have position adjusted to fit the screen', () => {\n  const cell = createCell({ radius: 5 });\n  const sut = createTestLulas({\n    behaviors: [bounceOnCorners],\n    cells: [cell],\n  });\n\n  sut.step();\n\n  vectorAxis((axis) => equal(cell.position[axis], 5, axis));\n});\n\ntest('A cell in (0,0) will have velocity adjusted to bounce on screen', () => {\n  const cell = createCell({ velocity: vector(-1) });\n  const sut = createTestLulas({\n    behaviors: [bounceOnCorners],\n    cells: [cell],\n  });\n\n  sut.step();\n\n  vectorAxis((axis) => equal(cell.velocity[axis], 1, axis));\n});\n\ntest('A cell outside of the window will have position adjusted to fit the screen', () => {\n  const size = 200;\n  const cell = createCell({ position: vector(size), radius: 5 });\n  const sut = createTestLulas({\n    behaviors: [bounceOnCorners],\n    cells: [cell],\n    worldSize: vector(size),\n  });\n\n  sut.step();\n\n  vectorAxis((axis) => equal(cell.position[axis], 195, axis));\n});\n\ntest('A cell outside of the window will have velocity adjusted to bounce on screen', () => {\n  const size = 200;\n  const cell = createCell({\n    position: vector(size),\n    velocity: vector(1),\n  });\n  const sut = createTestLulas({\n    behaviors: [bounceOnCorners],\n    cells: [cell],\n    worldSize: vector(size),\n  });\n\n  sut.step();\n\n  vectorAxis((axis) => equal(cell.velocity[axis], -1, axis));\n});\n","import { Cell } from '../cell';\nimport { World } from '../lulas';\n\nexport function bounceOnCorners(cell: Cell, { size }: World) {\n  if (cell.position.x - cell.radius < 0) {\n    cell.position.x = cell.radius;\n    cell.velocity.x = Math.abs(cell.velocity.x);\n  }\n\n  if (cell.position.y - cell.radius < 0) {\n    cell.position.y = cell.radius;\n    cell.velocity.y = Math.abs(cell.velocity.y);\n  }\n\n  if (cell.position.x + cell.radius > size.x) {\n    cell.position.x = size.x - cell.radius;\n    cell.velocity.x = -Math.abs(cell.velocity.x);\n  }\n\n  if (cell.position.y + cell.radius > size.y) {\n    cell.position.y = size.y - cell.radius;\n    cell.velocity.y = -Math.abs(cell.velocity.y);\n  }\n}\n","import { equal } from 'assert';\n\nimport { roundMap } from '../src/behaviors/roundMap';\nimport { createCell } from '../src/cell';\nimport { vector, vectorAxis } from '../src/vector';\nimport { setFilename, test } from '../test/index';\nimport { createTestLulas } from '../test/test-duplicates';\n\nsetFilename(__dirname, __filename);\n\nconst SIZE = 200;\n\ntest(\n  \"A cell must navigate to the other side of the screen if they're pass the map limit\",\n  [\n    [vector(0, SIZE + 1), vector(0, 1)],\n    [vector(SIZE + 1, 0), vector(1, 0)],\n    [vector(SIZE + 1), vector(1)],\n    [vector(0, -1), vector(0, SIZE - 1)],\n    [vector(-1, 0), vector(SIZE - 1, 0)],\n    [vector(-1), vector(SIZE - 1)],\n  ],\n  (pos, exp) => {\n    const cell = createCell({ position: { ...pos } });\n    const sut = createTestLulas({\n      behaviors: [roundMap],\n      cells: [cell],\n      worldSize: vector(SIZE),\n    });\n\n    sut.step();\n\n    vectorAxis((axis) => equal(cell.position[axis], exp[axis]));\n  },\n);\n","import { equal, notEqual } from 'assert';\n\nimport {\n  alignementBehavior as alignementBehavior1,\n  cohesionBehavior as cohesionBehavior1,\n  separationBehavior as separationBehavior1,\n} from '../src/behaviors/flocking';\nimport {\n  alignementBehavior as alignementBehavior2,\n  cohesionBehavior as cohesionBehavior2,\n  separationBehavior as separationBehavior2,\n} from '../src/behaviors/flocking2';\nimport { move } from '../src/behaviors/move';\nimport { createCell } from '../src/cell';\nimport { getAngle, sumVectors, vector, vectorAxis } from '../src/vector';\nimport { assertBetweenOrEqual } from '../test/assertions';\nimport { setFilename, test } from '../test/index';\nimport { createTestLulas } from '../test/test-duplicates';\n\n// GLOSSARY: Boid = Cell\n\nsetFilename(__dirname, __filename);\n\n[\n  {\n    name: 'flocking',\n    alignementBehavior: alignementBehavior1,\n    cohesionBehavior: cohesionBehavior1,\n    separationBehavior: separationBehavior1,\n  },\n  {\n    name: 'flocking2',\n    alignementBehavior: alignementBehavior2,\n    cohesionBehavior: cohesionBehavior2,\n    separationBehavior: separationBehavior2,\n  },\n].forEach(\n  ({ name, alignementBehavior, cohesionBehavior, separationBehavior }) => {\n    test(`${name} - Each boid velocity should be independent`, () => {\n      const lulas = createTestLulas({\n        behaviors: [move],\n        cells: [\n          createCell({ position: vector(10), velocity: vector(-1, -1) }),\n          createCell({ position: vector(20), velocity: vector(1) }),\n        ],\n      });\n\n      lulas.step();\n      const [first, second] = lulas.cells;\n\n      vectorAxis((axis) => equal(first.velocity[axis], -1));\n      vectorAxis((axis) => equal(second.velocity[axis], 1));\n    });\n\n    test(\n      `${name} - A boid should align to it's neighbors`,\n      [\n        [vector(0), vector(0, 1)],\n        // With vector(0) angle would be the same before and after (0)\n        [vector(1), vector(1, 0)],\n        [vector(0), vector(1)],\n        [vector(0), vector(-1, 0)],\n        [vector(0), vector(0, -1)],\n        [vector(0), vector(-1, -1)],\n      ],\n      (targetVel, neighborVel) => {\n        const lulas = createTestLulas({\n          behaviors: [alignementBehavior],\n          cells: [\n            createCell({ position: vector(10), velocity: { ...targetVel } }),\n            createCell({ position: vector(20), velocity: { ...neighborVel } }),\n          ],\n        });\n\n        const angleBefore = getAngle(targetVel);\n        const neighborAngle = getAngle(neighborVel);\n\n        lulas.step();\n        const sut = lulas.cells[0];\n\n        const angleAfter = getAngle(sut.velocity);\n        notEqual(angleAfter, angleBefore);\n        assertBetweenOrEqual(angleAfter, angleBefore, neighborAngle);\n      },\n    );\n\n    test(\n      `${name} - A boid should get closer to nearby neighbors`,\n      [\n        [vector(10)],\n        [vector(-10)],\n        [vector(15, -15)],\n        [vector(-15, 15)],\n        // out of range\n        // [vector(50), vector(0)],\n      ],\n      (pos) => {\n        const lulas = createTestLulas({\n          behaviors: [cohesionBehavior],\n          cells: [\n            createCell({\n              position: vector(0),\n              velocity: vector(0),\n              vision: 50,\n            }),\n            createCell({ position: { ...pos }, velocity: vector(0) }),\n          ],\n        });\n\n        lulas.step();\n\n        const sut = lulas.cells[0];\n        const angleBefore = 0;\n        const angleAfter = getAngle(sut.velocity);\n\n        notEqual(angleAfter, angleBefore);\n        assertBetweenOrEqual(angleAfter, angleBefore, getAngle(pos));\n      },\n    );\n\n    test(\n      `${name} - A boid should maintain distance from closer neighbors`,\n      [\n        [vector(10)],\n        [vector(10, 5)],\n        [vector(-10)],\n        [vector(-5, -10)],\n        // out of range\n        // [vector(49), vector(0)],\n      ],\n      (pos) => {\n        // This checks if the cell position affects the direction\n        const cellPosition = vector(-100, 100);\n\n        const lulas = createTestLulas({\n          behaviors: [separationBehavior],\n          cells: [\n            createCell({\n              position: cellPosition,\n              velocity: vector(0),\n              vision: 50,\n            }),\n            createCell({\n              position: sumVectors(cellPosition, pos),\n              velocity: vector(0),\n            }),\n          ],\n        });\n\n        lulas.step();\n\n        const sut = lulas.cells[0];\n        const angleBefore = 0;\n        const angleAfter = getAngle(sut.velocity);\n        let separationAngle = getAngle(pos) + 180;\n\n        if (separationAngle > 180) {\n          separationAngle -= 360;\n        }\n\n        notEqual(angleAfter, angleBefore);\n        assertBetweenOrEqual(angleAfter, angleBefore, separationAngle);\n      },\n    );\n  },\n);\n","// Built with https://www.youtube.com/watch?v=mhjuuHl6qHM\n\nimport { Cell, cellDistance } from '../cell';\nimport {\n  FLOCKING_ALIGMENENT_FACTOR,\n  FLOCKING_COHESION_FACTOR,\n  FLOCKING_SEPARATION_BORDER_LIMIT,\n  FLOCKING_SEPARATION_FACTOR,\n  FLOCKING_SEPARATION_VISION_LIMIT,\n} from '../CONFIGURATION';\nimport { Behavior, World } from '../lulas';\nimport {\n  multiplyVectors,\n  normalize,\n  subtractVectors,\n  sumVectorList,\n  sumVectors,\n  Vector,\n  vector,\n} from '../vector';\n\nexport const flocking = requireNeighbors(flockingCore);\nexport const alignementBehavior = requireNeighbors(alignement);\nexport const cohesionBehavior = requireNeighbors(cohesion);\nexport const separationBehavior = requireNeighbors(separation);\n\nfunction flockingCore(cell: Cell, neighbors: Cell[]) {\n  return sumVectorList([\n    alignement(cell, neighbors),\n    cohesion(cell, neighbors),\n    separation(cell, neighbors),\n  ]);\n}\n\nfunction alignement(cell: Cell, neighbors: Cell[]) {\n  const sum = neighbors.reduce(\n    (sum, x) => sumVectors(sum, x.velocity),\n    vector(0),\n  );\n\n  const average = multiplyVectors(sum, 1 / neighbors.length);\n  const desired = normalize(average);\n  const steering = subtractVectors(desired, cell.velocity);\n  return multiplyVectors(steering, FLOCKING_ALIGMENENT_FACTOR);\n}\n\nfunction cohesion(cell: Cell, neighbors: Cell[]) {\n  const sum = neighbors.reduce(\n    (sum, x) => sumVectors(sum, x.position),\n    vector(0),\n  );\n\n  const average = multiplyVectors(sum, 1 / neighbors.length);\n  const desired = subtractVectors(average, cell.position);\n  const steering = subtractVectors(desired, cell.velocity);\n  return multiplyVectors(steering, FLOCKING_COHESION_FACTOR);\n}\n\nfunction separation(cell: Cell, neighbors: Cell[]) {\n  const limit = cell.vision * FLOCKING_SEPARATION_VISION_LIMIT;\n  let count = 0;\n\n  const sum = neighbors.reduce((sum, x) => {\n    const distance = cellDistance(cell, x);\n    const borderDistance = distance - cell.radius - x.radius;\n\n    if (distance > limit) {\n      return sum;\n    }\n\n    count++;\n    const diff = subtractVectors(cell.position, x.position);\n    const operator = Math.max(borderDistance, FLOCKING_SEPARATION_BORDER_LIMIT);\n    const desired = multiplyVectors(diff, 1 / operator);\n    return sumVectors(sum, desired);\n  }, vector(0));\n\n  if (count === 0) {\n    return vector(0);\n  }\n\n  const average = multiplyVectors(sum, 1 / count);\n  const steerign = subtractVectors(average, cell.velocity);\n  return multiplyVectors(steerign, FLOCKING_SEPARATION_FACTOR);\n}\n\nfunction requireNeighbors(\n  fn: (cell: Cell, neighbors: Cell[]) => Vector,\n): Behavior {\n  return (cell: Cell, { look }: World) => {\n    const neighbors = look(cell.vision);\n\n    if (!neighbors.length) {\n      return;\n    }\n\n    const effect = fn(cell, neighbors);\n\n    cell.velocity.x += effect.x;\n    cell.velocity.y += effect.y;\n  };\n}\n","import * as assert from 'assert';\n\nexport function assertBetween(\n  value: number,\n  first: number,\n  second: number,\n  message = '',\n) {\n  const min = Math.min(first, second);\n  const max = Math.max(first, second);\n  const finalMessage = `Expected ${value} to be between ${min} and ${max} (${message})`;\n\n  if (min === max) {\n    assert(value === min, finalMessage);\n    return;\n  }\n\n  assert(value > min, finalMessage);\n  assert(value < max, finalMessage);\n}\n\nexport function assertBetweenOrEqual(\n  value: number,\n  first: number,\n  second: number,\n  message = '',\n) {\n  const min = Math.min(first, second);\n  const max = Math.max(first, second);\n  const finalMessage = `Expected ${value} to be between ${min} and ${max} (${message})`;\n\n  if (min === max) {\n    assert(value === min, finalMessage);\n    return;\n  }\n\n  assert(value >= min, finalMessage);\n  assert(value <= max, finalMessage);\n}\n","import * as assert from 'assert';\n\nimport { solidBody } from '../src/behaviors/solidBody';\nimport { createCell } from '../src/cell';\nimport { vector, vectorAxis } from '../src/vector';\nimport { setFilename, test } from '../test/index';\nimport { createTestLulas } from '../test/test-duplicates';\n\nsetFilename(__dirname, __filename);\n\ntest(\n  'Cells should immediately separate each other if they overlap',\n  [\n    [vector(1, 0), vector(-1, 0), vector(5, 0)],\n    [vector(0, 1), vector(0, -1), vector(0, 5)],\n    [vector(1), vector(-1), vector(3.5355339059327378)],\n  ],\n  (pos1, pos2, expected) => {\n    const lulas = createTestLulas({\n      behaviors: [solidBody],\n      cells: [\n        createCell({ position: { ...pos1 }, velocity: vector(0) }),\n        createCell({ position: { ...pos2 }, velocity: vector(0) }),\n      ],\n    });\n\n    lulas.step();\n    const sut = lulas.cells[0];\n\n    vectorAxis((axis) => assert.equal(sut.position[axis], expected[axis]));\n  },\n);\n\ntest('Cells should stop if they collide on each other', () => {\n  const lulas = createTestLulas({\n    behaviors: [solidBody],\n    cells: [\n      createCell({ position: vector(1), velocity: vector(-1) }),\n      createCell({ position: vector(-1), velocity: vector(0) }),\n    ],\n  });\n\n  lulas.step();\n  const sut = lulas.cells[0];\n\n  vectorAxis((axis) => assert(sut.velocity[axis] >= 0));\n});\n"],"sourceRoot":""}